{
  "file_contents": {
    "drizzle.config.ts": {
      "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
      "size_bytes": 325
    },
    "postcss.config.js": {
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "size_bytes": 80
    },
    "tailwind.config.ts": {
      "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
      "size_bytes": 2787
    },
    "vite.config.ts": {
      "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n",
      "size_bytes": 894
    },
    "server/index.ts": {
      "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n",
      "size_bytes": 1921
    },
    "server/routes.ts": {
      "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n",
      "size_bytes": 473
    },
    "server/storage.ts": {
      "content": "import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n",
      "size_bytes": 1012
    },
    "server/vite.ts": {
      "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
      "size_bytes": 2254
    },
    "shared/schema.ts": {
      "content": "import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n",
      "size_bytes": 533
    },
    "client/src/App.css": {
      "content": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n",
      "size_bytes": 606
    },
    "client/src/App.tsx": {
      "content": "import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <ErrorBoundary>\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Sonner />\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<Index />} />\n            {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n            <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n        </BrowserRouter>\n      </TooltipProvider>\n    </QueryClientProvider>\n  </ErrorBoundary>\n);\n\nexport default App;\n",
      "size_bytes": 990
    },
    "client/src/index.css": {
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Futuristic iOS-like design variables */\nhtml {\n  --vh: 1vh;\n  \n  /* Futuristic color system with soft pale tones */\n  --color-bg-primary: #ffffff;\n  --color-bg-secondary: #fafbfc;\n  --color-bg-tertiary: #f6f8fa;\n  --color-bg-overlay: rgba(255, 255, 255, 0.85);\n  --color-border-subtle: rgba(255, 255, 255, 0.2);\n  --color-border-muted: rgba(255, 255, 255, 0.1);\n  --color-text-primary: #1a1a1a;\n  --color-text-secondary: #6b7280;\n  --color-text-tertiary: #9ca3af;\n  \n  /* Soft pale accent colors */\n  --color-green-primary: #10b981;\n  --color-green-secondary: #34d399;\n  --color-green-pale: rgba(16, 185, 129, 0.1);\n  --color-red-primary: #ef4444;\n  --color-red-secondary: #f87171;\n  --color-red-pale: rgba(239, 68, 68, 0.1);\n  --color-blue-primary: #3b82f6;\n  --color-blue-secondary: #60a5fa;\n  --color-blue-pale: rgba(59, 130, 246, 0.1);\n  \n  --color-surface-subtle: rgba(255, 255, 255, 0.6);\n  --color-glass-bg: rgba(255, 255, 255, 0.7);\n  --color-glass-border: rgba(255, 255, 255, 0.2);\n  \n  /* Dark mode colors */\n  --color-bg-primary-dark: #0f0f0f;\n  --color-bg-secondary-dark: #161b22;\n  --color-bg-tertiary-dark: #21262d;\n  --color-bg-overlay-dark: rgba(15, 15, 15, 0.85);\n  --color-border-subtle-dark: rgba(255, 255, 255, 0.1);\n  --color-border-muted-dark: rgba(255, 255, 255, 0.05);\n  --color-text-primary-dark: #f0f6fc;\n  --color-text-secondary-dark: #8b949e;\n  --color-text-tertiary-dark: #6e7681;\n  \n  /* Dark mode accent colors */\n  --color-green-primary-dark: #34d399;\n  --color-green-secondary-dark: #6ee7b7;\n  --color-green-pale-dark: rgba(52, 211, 153, 0.1);\n  --color-red-primary-dark: #f87171;\n  --color-red-secondary-dark: #fca5a5;\n  --color-red-pale-dark: rgba(248, 113, 113, 0.1);\n  --color-blue-primary-dark: #60a5fa;\n  --color-blue-secondary-dark: #93c5fd;\n  --color-blue-pale-dark: rgba(96, 165, 250, 0.1);\n  \n  --color-surface-subtle-dark: rgba(255, 255, 255, 0.05);\n  --color-glass-bg-dark: rgba(0, 0, 0, 0.4);\n  --color-glass-border-dark: rgba(255, 255, 255, 0.1);\n}\n\nbody {\n  min-height: 100vh;\n  min-height: calc(var(--vh, 1vh) * 100);\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n  margin: 0;\n  padding: 0;\n  background: var(--color-bg-primary);\n  color: var(--color-text-primary);\n  font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Segoe UI', 'Roboto', 'Noto Sans', sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 400;\n  letter-spacing: -0.01em;\n}\n\n.dark body {\n  background: var(--color-bg-primary-dark);\n  color: var(--color-text-primary-dark);\n}\n\n#root {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\n/* Futuristic iOS-like layout system */\n.layout-container {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: linear-gradient(135deg, #fafbfc 0%, #f6f8fa 100%);\n}\n\n.dark .layout-container {\n  background: linear-gradient(135deg, #0f0f0f 0%, #161b22 100%);\n}\n\n/* Canvas area with glass morphism */\n.canvas-area {\n  flex: 1;\n  min-height: 0;\n  overflow: hidden;\n  contain: layout style paint;\n  transform: translateZ(0);\n  position: relative;\n}\n\n.canvas-area::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);\n  pointer-events: none;\n  z-index: 1;\n}\n\n/* Sidebar with glass morphism */\n.sidebar {\n  height: 100%;\n  overflow-y: auto;\n  flex-shrink: 0;\n  background: var(--color-glass-bg);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border-left: 1px solid var(--color-glass-border);\n  contain: layout style paint;\n  position: relative;\n}\n\n.dark .sidebar {\n  background: var(--color-glass-bg-dark);\n  border-left: 1px solid var(--color-glass-border-dark);\n}\n\n.sidebar::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, transparent 100%);\n  pointer-events: none;\n  z-index: 1;\n}\n\n/* Glass morphism utilities */\n.glass-effect {\n  background: var(--color-glass-bg);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border: 1px solid var(--color-glass-border);\n}\n\n.dark .glass-effect {\n  background: var(--color-glass-bg-dark);\n  border: 1px solid var(--color-glass-border-dark);\n}\n\n/* Performance optimizations */\n.gpu-accelerated {\n  transform: translateZ(0);\n  will-change: transform;\n}\n\n.contain-paint {\n  contain: layout style paint;\n}\n\n/* iOS-like button animations */\n@keyframes ios-button-press {\n  0% { transform: scale(1); }\n  50% { transform: scale(0.95); }\n  100% { transform: scale(1); }\n}\n\n.ios-button-press {\n  animation: ios-button-press 0.15s ease-out;\n}\n\n/* Smooth spring animations */\n.spring-animation {\n  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.gentle-spring {\n  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n/* Advanced hover effects */\n.hover-lift {\n  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Gradient animations */\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.gradient-animate {\n  background-size: 200% 200%;\n  animation: gradient-shift 3s ease infinite;\n}\n\n/* Floating elements */\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-6px); }\n}\n\n.float-animation {\n  animation: float 3s ease-in-out infinite;\n}\n\n/* Pulse effect for status indicators */\n@keyframes pulse-glow {\n  0% { \n    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);\n    transform: scale(1);\n  }\n  50% { \n    box-shadow: 0 0 0 8px rgba(16, 185, 129, 0);\n    transform: scale(1.05);\n  }\n  100% { \n    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);\n    transform: scale(1);\n  }\n}\n\n.pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n@layer base {\n  :root {\n    /* iOS-inspired color system */\n    --background: 0 0% 100%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 0 0% 100%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 142 76% 36%;\n    --primary-foreground: 355.7 100% 97.3%;\n    --secondary: 220 14.3% 95.9%;\n    --secondary-foreground: 220.9 39.3% 11%;\n    --muted: 220 14.3% 95.9%;\n    --muted-foreground: 220 8.9% 46.1%;\n    --accent: 220 14.3% 95.9%;\n    --accent-foreground: 220.9 39.3% 11%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 20% 98%;\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 142 76% 36%;\n    --radius: 1rem;\n  }\n\n  .dark {\n    --background: 224 71.4% 4.1%;\n    --foreground: 210 20% 98%;\n    --card: 224 71.4% 4.1%;\n    --card-foreground: 210 20% 98%;\n    --popover: 224 71.4% 4.1%;\n    --popover-foreground: 210 20% 98%;\n    --primary: 142 84% 44%;\n    --primary-foreground: 355.7 100% 97.3%;\n    --secondary: 215 27.9% 16.9%;\n    --secondary-foreground: 210 20% 98%;\n    --muted: 215 27.9% 16.9%;\n    --muted-foreground: 217.9 10.6% 64.9%;\n    --accent: 215 27.9% 16.9%;\n    --accent-foreground: 210 20% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 20% 98%;\n    --border: 215 27.9% 16.9%;\n    --input: 215 27.9% 16.9%;\n    --ring: 142 84% 44%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/* iOS-like grid patterns */\n.grid-pattern {\n  background-image: \n    linear-gradient(rgba(16, 185, 129, 0.05) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(16, 185, 129, 0.05) 1px, transparent 1px);\n  background-size: 24px 24px;\n}\n\n.terrain-grid-pattern {\n  background-image: \n    linear-gradient(rgba(239, 68, 68, 0.08) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(239, 68, 68, 0.08) 1px, transparent 1px),\n    linear-gradient(rgba(239, 68, 68, 0.03) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(239, 68, 68, 0.03) 1px, transparent 1px);\n  background-size: \n    calc(var(--grid-major, 24px)) calc(var(--grid-major, 24px)), \n    calc(var(--grid-major, 24px)) calc(var(--grid-major, 24px)), \n    calc(var(--grid-minor, 12px)) calc(var(--grid-minor, 12px)), \n    calc(var(--grid-minor, 12px)) calc(var(--grid-minor, 12px));\n}\n\n/* iOS-like element styles */\n.plant-element, .terrain-element {\n  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  contain: layout style paint;\n  border-radius: 1rem;\n  overflow: hidden;\n}\n\n.plant-element:hover, .terrain-element:hover {\n  transform: scale(1.05) translateY(-2px);\n  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);\n}\n\n.canvas-element {\n  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  contain: layout style paint;\n  border-radius: 1rem;\n}\n\n.canvas-element.selected {\n  box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.3),\n              0 8px 24px rgba(16, 185, 129, 0.2);\n}\n\n/* iOS-like button styles */\n.btn-ios {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.6) 100%);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  border-radius: 1rem;\n  padding: 0.75rem 1.5rem;\n  font-weight: 600;\n  font-size: 0.875rem;\n  letter-spacing: -0.01em;\n  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-ios::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%);\n  pointer-events: none;\n}\n\n.btn-ios:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\n}\n\n.btn-ios:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.btn-ios.active {\n  background: linear-gradient(135deg, rgba(16, 185, 129, 0.9) 0%, rgba(16, 185, 129, 0.7) 100%);\n  color: white;\n  box-shadow: 0 8px 24px rgba(16, 185, 129, 0.3);\n}\n\n.dark .btn-ios {\n  background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0.4) 100%);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.dark .btn-ios:hover {\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);\n}\n\n.dark .btn-ios.active {\n  background: linear-gradient(135deg, rgba(52, 211, 153, 0.9) 0%, rgba(52, 211, 153, 0.7) 100%);\n  box-shadow: 0 8px 24px rgba(52, 211, 153, 0.3);\n}\n\n/* iOS-like scrollbars */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n  border: none;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.3);\n}\n\n.dark ::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n/* iOS-like focus styles */\n.focus-visible {\n  outline: 2px solid rgba(16, 185, 129, 0.6);\n  outline-offset: 2px;\n  border-radius: 1rem;\n}\n\n.dark .focus-visible {\n  outline-color: rgba(52, 211, 153, 0.6);\n}\n\n/* Enhanced loading animations */\n@keyframes ios-fade-in {\n  from { \n    opacity: 0; \n    transform: translateY(8px) scale(0.95);\n  }\n  to { \n    opacity: 1; \n    transform: translateY(0) scale(1);\n  }\n}\n\n.ios-fade-in {\n  animation: ios-fade-in 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  .grid-pattern {\n    background-size: 20px 20px;\n  }\n  \n  .terrain-grid-pattern {\n    background-size: 20px 20px, 20px 20px, 10px 10px, 10px 10px;\n  }\n  \n  ::-webkit-scrollbar {\n    width: 3px;\n    height: 3px;\n  }\n  \n  body {\n    font-size: 16px; /* Prevent zoom on iOS */\n  }\n}\n\n/* Touch-friendly interactions */\n.touch-target {\n  min-width: 44px;\n  min-height: 44px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.touch-target::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 44px;\n  height: 44px;\n  transform: translate(-50%, -50%);\n  border-radius: 50%;\n  background: transparent;\n  transition: background-color 0.2s ease;\n}\n\n.touch-target:active::after {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n/* High performance canvas optimizations */\n.canvas-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  contain: strict;\n  transform: translateZ(0);\n  border-radius: 1rem;\n  background: linear-gradient(135deg, #fafbfc 0%, #f6f8fa 100%);\n}\n\n.dark .canvas-container {\n  background: linear-gradient(135deg, #0f0f0f 0%, #161b22 100%);\n}\n\n/* Responsive utilities */\n.container-fluid {\n  width: 100%;\n  margin: 0 auto;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n@media (min-width: 640px) {\n  .container-fluid {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n}\n\n@media (min-width: 768px) {\n  .container-fluid {\n    padding-left: 2.5rem;\n    padding-right: 2.5rem;\n  }\n}\n\n/* Reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Enhanced backdrop blur for better performance */\n.backdrop-blur-efficient {\n  backdrop-filter: blur(20px) saturate(180%);\n  -webkit-backdrop-filter: blur(20px) saturate(180%);\n}\n\n@supports not (backdrop-filter: blur(20px)) {\n  .backdrop-blur-efficient {\n    background: var(--color-bg-overlay);\n  }\n  \n  .dark .backdrop-blur-efficient {\n    background: var(--color-bg-overlay-dark);\n  }\n}\n\n/* Noise texture for glass effect */\n.glass-texture {\n  position: relative;\n}\n\n.glass-texture::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url(\"data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.02'/%3E%3C/svg%3E\");\n  pointer-events: none;\n  border-radius: inherit;\n}\n\n/* Color-specific enhancements */\n.bg-green-gradient {\n  background: linear-gradient(135deg, var(--color-green-primary) 0%, var(--color-green-secondary) 100%);\n}\n\n.bg-red-gradient {\n  background: linear-gradient(135deg, var(--color-red-primary) 0%, var(--color-red-secondary) 100%);\n}\n\n.bg-blue-gradient {\n  background: linear-gradient(135deg, var(--color-blue-primary) 0%, var(--color-blue-secondary) 100%);\n}\n\n.dark .bg-green-gradient {\n  background: linear-gradient(135deg, var(--color-green-primary-dark) 0%, var(--color-green-secondary-dark) 100%);\n}\n\n.dark .bg-red-gradient {\n  background: linear-gradient(135deg, var(--color-red-primary-dark) 0%, var(--color-red-secondary-dark) 100%);\n}\n\n.dark .bg-blue-gradient {\n  background: linear-gradient(135deg, var(--color-blue-primary-dark) 0%, var(--color-blue-secondary-dark) 100%);\n}",
      "size_bytes": 15091
    },
    "client/src/main.tsx": {
      "content": "import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
      "size_bytes": 158
    },
    "client/src/vite-env.d.ts": {
      "content": "/// <reference types=\"vite/client\" />\n",
      "size_bytes": 38
    },
    "client/src/components/Canvas.tsx": {
      "content": "\nimport React, { useRef, useEffect, useState, useCallback, useMemo, memo, forwardRef, useImperativeHandle } from \"react\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CanvasElement } from \"./canvas/CanvasElement\";\nimport { CanvasWelcome } from \"./canvas/CanvasWelcome\";\nimport { useCanvasEvents } from \"@/hooks/useCanvasEvents\";\nimport { useCanvasZoom } from \"@/hooks/useCanvasZoom\";\nimport { useUndoRedo } from \"@/hooks/useUndoRedo\";\nimport { useResponsive } from \"@/hooks/useResponsive\";\nimport { cn } from \"@/lib/utils\";\nimport { Grid3X3, Download, Square, Target, Move, Plus, Minus, RotateCcw } from \"lucide-react\";\nimport { captureCanvasScreenshot, captureCanvasArea, captureHighResCanvas, exportFullCanvas, exportSelectedArea } from \"@/utils/canvasExport\";\nimport { ExportarButton } from \"@/components/ui/ExportarButton\";\n\nimport { CANVAS_CONSTANTS } from \"../utils/canvasConstants\";\nimport { calculatePixelsPerMeter, metersToPixels, getCanvasMousePosition, snapToGrid } from \"../utils/canvasCoordinates\";\nimport { CanvasProps, DrawingElement } from \"../types/canvasTypes\";\nimport { parseSpacingToMeters } from \"../utils/plantSizes\";\n\n// Canvas ref interface\nexport interface CanvasRef {\n  exportFullCanvas: () => Promise<void>;\n  exportSelectionAsPNG: () => Promise<void>;\n  exportSelectedElementsAsPNG: () => Promise<void>;\n  exportHighResolution: (options?: { scale?: number; format?: 'png' | 'jpeg' }) => Promise<void>;\n  undo: () => void;\n  redo: () => void;\n}\n\nexport const Canvas = memo(forwardRef<CanvasRef, CanvasProps>(({ selectedTool, selectedPlant, selectedTerrain, selectedStructure, onPlantUsed, onTerrainUsed, onStructureUsed, onToolChange, canvasSize = CANVAS_CONSTANTS.DEFAULT_CANVAS_REAL_SIZE, onCanvasSizeChange, onHistoryChange }, ref) => {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const [elements, elementsActions] = useUndoRedo<DrawingElement[]>([], {\n    maxHistorySize: 50,\n    debounceMs: 300,\n  });\n\n  useEffect(() => {\n    onHistoryChange?.(elementsActions.canUndo, elementsActions.canRedo);\n  }, [elementsActions.canUndo, elementsActions.canRedo, onHistoryChange]);\n  \n  // Canvas dimensions state for dynamic measurements\n  const [canvasDimensions, setCanvasDimensions] = useState(CANVAS_CONSTANTS.DEFAULT_CANVAS_DIMENSIONS);\n  \n  // Canvas real-world size in meters\n  const [canvasRealSize, setCanvasRealSize] = useState(CANVAS_CONSTANTS.DEFAULT_CANVAS_REAL_SIZE);\n  \n  const { isMobile, isTablet, isDesktop, isLargeDesktop, isUltraWide, screenWidth, screenHeight } = useResponsive();\n  const isCompact = isMobile || isTablet;\n  const isWideScreen = isLargeDesktop || isUltraWide;\n\n  // Enhanced zoom controls\n  const {\n    zoom,\n    panOffset,\n    zoomIn,\n    zoomOut,\n    zoomToFit,\n    resetZoom,\n    setPanOffset,\n    zoomLevel,\n    canZoomIn,\n    canZoomOut,\n  } = useCanvasZoom({\n    minZoom: isCompact ? 25 : 10,\n    maxZoom: isWideScreen ? 400 : isCompact ? 200 : 300,\n    zoomStep: isWideScreen ? 2 : 3, // Further reduced zoom step for slower zooming\n    canvasRef,\n    onZoomChange: (newZoom) => {\n      toast.info(`Zoom: ${newZoom}%`, { duration: 1000 });\n    },\n  });\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isPanning, setIsPanning] = useState(false);\n  const [isSpacePressed, setIsSpacePressed] = useState(false);\n  const [dragElement, setDragElement] = useState<DrawingElement | null>(null);\n  const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [lastPanPoint, setLastPanPoint] = useState({ x: 0, y: 0 });\n  const [currentShape, setCurrentShape] = useState<DrawingElement | null>(null);\n  const [showGrid, setShowGrid] = useState(true);\n  const [isDrawingTerrain, setIsDrawingTerrain] = useState(false);\n  const [currentTerrainPath, setCurrentTerrainPath] = useState<{ x: number; y: number }[]>([]);\n  const [isResizing, setIsResizing] = useState(false);\n  const [resizeHandle, setResizeHandle] = useState<string | null>(null);\n  const [resizeElement, setResizeElement] = useState<DrawingElement | null>(null);\n  const [resizeStartPos, setResizeStartPos] = useState({ x: 0, y: 0 });\n  const [originalElementBounds, setOriginalElementBounds] = useState({ x: 0, y: 0, width: 0, height: 0 });\n  \n  // Selection area states\n  const [isSelecting, setIsSelecting] = useState(false);\n  const [selectionStart, setSelectionStart] = useState({ x: 0, y: 0 });\n  const [selectionEnd, setSelectionEnd] = useState({ x: 0, y: 0 });\n  const [selectionArea, setSelectionArea] = useState<{ x: number; y: number; width: number; height: number } | null>(null);\n  const [showSelectionTool, setShowSelectionTool] = useState(false);\n  \n  // Performance optimization states\n  const [isDragOptimized, setIsDragOptimized] = useState(false);\n  const dragAnimationFrame = useRef<number | null>(null);\n  const lastDragUpdate = useRef<number>(0);\n  const pendingDragUpdate = useRef<{ elementId: number; x: number; y: number } | null>(null);\n  const panAnimationFrame = useRef<number | null>(null);\n  const lastPanUpdate = useRef<number>(0);\n  const pendingPanUpdate = useRef<{ x: number; y: number } | null>(null);\n\n  // Cleanup animation frames to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      if (dragAnimationFrame.current) {\n        cancelAnimationFrame(dragAnimationFrame.current);\n        dragAnimationFrame.current = null;\n      }\n      if (panAnimationFrame.current) {\n        cancelAnimationFrame(panAnimationFrame.current);\n        panAnimationFrame.current = null;\n      }\n    };\n  }, []);\n\n  // World-to-pixel conversion constants (responsive and based on canvas real size)\n  // Use the smaller dimension to ensure consistent scaling\n\n  const PIXELS_PER_METER = useMemo(() => calculatePixelsPerMeter(\n    canvasDimensions,\n    canvasRealSize\n  ), [canvasDimensions, canvasRealSize]);\n  const GRID_SIZE_METERS = 2; // Each grid square = 2m x 2m\n  const GRID_SIZE_PIXELS = GRID_SIZE_METERS * PIXELS_PER_METER;\n  \n  // Dynamic grid calculations based on actual canvas size\n  const MAX_HORIZONTAL_GRIDS = useMemo(() => {\n    const canvasWidth = (canvasSize?.width || canvasRealSize.width);\n    const gridCount = Math.floor(canvasWidth / GRID_SIZE_METERS);\n    // Ensure we have a reasonable maximum (prevent infinite grids)\n    return Math.max(1, Math.min(gridCount, 200)); // Cap at 200 grids maximum\n  }, [canvasSize, canvasRealSize, GRID_SIZE_METERS]);\n  \n  const MAX_VERTICAL_GRIDS = useMemo(() => {\n    const canvasHeight = (canvasSize?.height || canvasRealSize.height);\n    const gridCount = Math.floor(canvasHeight / GRID_SIZE_METERS);\n    // Ensure we have a reasonable maximum (prevent infinite grids)\n    return Math.max(1, Math.min(gridCount, 200)); // Cap at 200 grids maximum\n  }, [canvasSize, canvasRealSize, GRID_SIZE_METERS]);\n\n  // Utility functions for world-to-pixel conversion\n  const metersToPixels = useCallback((meters: number) => meters * PIXELS_PER_METER, [PIXELS_PER_METER]);\n  const pixelsToMeters = useCallback((pixels: number) => pixels / PIXELS_PER_METER, [PIXELS_PER_METER]);\n\n  // Enhanced element selection with better hit detection\n  const findElementAtPosition = useCallback((x: number, y: number) => {\n    const scaleFactor = 1.5; // Increase scale factor for better selection size\n    const minClickableSize = 20;\n    const maxClickableSize = 150;\n    \n    // Find elements in reverse order (top to bottom in z-index)\n    for (let i = elements.length - 1; i >= 0; i--) {\n      const element = elements[i];\n      \n      if (element.type === 'plant') {\n        const realWorldSize = parseSpacingToMeters(element.plant?.spacing || '1x1m');\n        const plantSize = {\n          width: realWorldSize.width * PIXELS_PER_METER,\n          height: realWorldSize.height * PIXELS_PER_METER\n        };\n        \n        // Adaptive clickable area based on zoom level\n        const zoomAdjustedScaleFactor = scaleFactor + (100 / zoom) * 0.5; // Larger hitbox at lower zoom\n        \n        const clickableSize = {\n          width: Math.max(minClickableSize, Math.min(maxClickableSize, plantSize.width * zoomAdjustedScaleFactor)),\n          height: Math.max(minClickableSize, Math.min(maxClickableSize, plantSize.height * zoomAdjustedScaleFactor))\n        };\n        \n        const left = element.x - clickableSize.width / 2;\n        const right = element.x + clickableSize.width / 2;\n        const top = element.y - clickableSize.height / 2;\n        const bottom = element.y + clickableSize.height / 2;\n        \n        if (x >= left && x <= right && y >= top && y <= bottom) {\n          return element;\n        }\n      } else if (element.type === 'terrain') {\n        if (element.pathPoints && element.pathPoints.length > 1) {\n          // Check if point is near the path\n          const strokeWidth = element.brushThickness || 8;\n          const threshold = strokeWidth / 2 + 5; // Add some padding for easier selection\n          \n          for (let j = 0; j < element.pathPoints.length - 1; j++) {\n            const p1 = element.pathPoints[j];\n            const p2 = element.pathPoints[j + 1];\n            \n            // Calculate distance from point to line segment\n            const A = x - p1.x;\n            const B = y - p1.y;\n            const C = p2.x - p1.x;\n            const D = p2.y - p1.y;\n            \n            const dot = A * C + B * D;\n            const lenSq = C * C + D * D;\n            let param = -1;\n            if (lenSq !== 0) param = dot / lenSq;\n            \n            let xx, yy;\n            if (param < 0) {\n              xx = p1.x;\n              yy = p1.y;\n            } else if (param > 1) {\n              xx = p2.x;\n              yy = p2.y;\n            } else {\n              xx = p1.x + param * C;\n              yy = p1.y + param * D;\n            }\n            \n            const dx = x - xx;\n            const dy = y - yy;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            \n            if (distance <= threshold) {\n              return element;\n            }\n          }\n        } else {\n          // Area-based terrain\n          const terrainWidth = element.width || 40;\n          const terrainHeight = element.height || 40;\n          \n          // Adaptive clickable area for terrain based on zoom level\n          const zoomAdjustedScaleFactor = scaleFactor + (100 / zoom) * 0.5;\n          \n          const clickableWidth = Math.max(minClickableSize, Math.min(maxClickableSize, terrainWidth * zoomAdjustedScaleFactor));\n          const clickableHeight = Math.max(minClickableSize, Math.min(maxClickableSize, terrainHeight * zoomAdjustedScaleFactor));\n          \n          const left = element.x - (clickableWidth - terrainWidth) / 2;\n          const right = left + clickableWidth;\n          const top = element.y - (clickableHeight - terrainHeight) / 2;\n          const bottom = top + clickableHeight;\n          \n          if (element.brushType === 'circle') {\n            const centerX = left + clickableWidth / 2;\n            const centerY = top + clickableHeight / 2;\n            const radius = Math.min(clickableWidth, clickableHeight) / 2;\n            const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));\n            if (distance <= radius) return element;\n          } else {\n            if (x >= left && x <= right && y >= top && y <= bottom) {\n              return element;\n            }\n          }\n        }\n      } else if (element.type === 'rectangle') {\n        if (x >= element.x && x <= element.x + (element.width || 0) &&\n            y >= element.y && y <= element.y + (element.height || 0)) {\n          return element;\n        }\n      } else if (element.type === 'circle') {\n        const centerX = element.x + (element.radius || 0);\n        const centerY = element.y + (element.radius || 0);\n        const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));\n        if (distance <= (element.radius || 0)) {\n          return element;\n        }\n      }\n    }\n    return null;\n  }, [elements, PIXELS_PER_METER, zoom]);\n\n  const { getMousePosition, snapToGrid } = useCanvasEvents();\n  \n  // Optimized panning function using requestAnimationFrame\n  const schedulePanUpdate = useCallback((x: number, y: number) => {\n    pendingPanUpdate.current = { x, y };\n    \n    if (panAnimationFrame.current) {\n      return; // Update already scheduled\n    }\n    \n    panAnimationFrame.current = requestAnimationFrame(() => {\n      const now = performance.now();\n      const timeSinceLastUpdate = now - lastPanUpdate.current;\n      \n      // Throttle updates to max 60fps (16.67ms)\n      if (timeSinceLastUpdate >= 16.67 && pendingPanUpdate.current) {\n        const { x, y } = pendingPanUpdate.current;\n        setPanOffset({ x, y });\n        lastPanUpdate.current = now;\n        pendingPanUpdate.current = null;\n      }\n      \n      panAnimationFrame.current = null;\n    });\n  }, [setPanOffset]);\n\n  // Optimized drag update function using requestAnimationFrame\n  const scheduleDragUpdate = useCallback((elementId: number, x: number, y: number) => {\n        pendingDragUpdate.current = { elementId, x, y };\n    \n    if (dragAnimationFrame.current) {\n      return; // Update already scheduled\n    }\n    \n    dragAnimationFrame.current = requestAnimationFrame(() => {\n      const now = performance.now();\n      const timeSinceLastUpdate = now - lastDragUpdate.current;\n      \n      // Throttle updates to max 60fps (16.67ms)\n      if (timeSinceLastUpdate >= 16.67 && pendingDragUpdate.current) {\n        const { elementId, x, y } = pendingDragUpdate.current;\n                \n        const updatedElements = elements.map(el => {\n          if (el.id === elementId) {\n            // Handle terrain brush elements with path points\n            if (el.type === 'terrain' && el.pathPoints && el.pathPoints.length > 0) {\n              const deltaX = x - el.x;\n              const deltaY = y - el.y;\n              \n              // Move all path points along with the element\n              const updatedPathPoints = el.pathPoints.map(point => ({\n                x: point.x + deltaX,\n                y: point.y + deltaY\n              }));\n              \n              return { ...el, x, y, pathPoints: updatedPathPoints };\n            }\n            // Regular element update\n            return { ...el, x, y };\n          }\n          return el;\n        });\n        \n        elementsActions.set(updatedElements);\n        lastDragUpdate.current = now;\n        pendingDragUpdate.current = null;\n      }\n      \n      dragAnimationFrame.current = null;\n    });\n  }, [elements, elementsActions]);\n  \n  // Export selected area\n  const exportSelectionAsPNG = useCallback(async () => {\n    if (!selectionArea || !canvasRef.current) {\n      toast.error(\"Nenhuma área selecionada para exportar!\");\n      return;\n    }\n\n    const canvasElement = canvasRef.current;\n    \n    await exportSelectedArea(canvasElement, selectionArea, {\n      quality: 0.95,\n      format: 'png',\n      filename: `area-selecionada-${Date.now()}`,\n      scale: 3 // 3x resolution for high quality\n    });\n  }, [selectionArea]);\n  // Export full canvas\n  const exportFullCanvasFunction = useCallback(async () => {\n    if (!canvasRef.current) {\n      toast.error(\"Canvas não encontrado!\");\n      return;\n    }\n\n    const canvasElement = canvasRef.current;\n    \n    await exportFullCanvas(canvasElement, {\n      quality: 0.95,\n      format: 'png',\n      filename: `canvas-completo-${Date.now()}`,\n      scale: 2 // 2x resolution for good quality\n    });\n  }, []);\n\n  // Export selected elements (just captures the viewport)\n  const exportSelectedElementsAsPNG = useCallback(async () => {\n    if (!canvasRef.current) {\n      toast.error(\"Canvas não encontrado!\");\n      return;\n    }\n\n    const canvasElement = canvasRef.current;\n    \n    await captureCanvasScreenshot(canvasElement, {\n      quality: 0.95,\n      format: 'png',\n      filename: `elementos-selecionados-${Date.now()}`,\n      scale: 3 // 3x resolution for high quality\n    });\n  }, []);\n\n  // High-resolution export function with custom options\n  const exportHighResolution = useCallback(async (options?: { scale?: number; format?: 'png' | 'jpeg' }) => {\n    if (!canvasRef.current) {\n      toast.error(\"Canvas não encontrado!\");\n      return;\n    }\n\n    const canvasElement = canvasRef.current;\n    \n    await captureHighResCanvas(canvasElement, {\n      quality: 0.98,\n      format: options?.format || 'png',\n      filename: `canvas-alta-resolucao-${Date.now()}`,\n      scale: options?.scale || 4 // 4x resolution for high quality\n    });\n  }, []);\n\n  // Expose export functions to parent component\n  useImperativeHandle(ref, () => ({\n    exportFullCanvas: exportFullCanvasFunction,\n    exportSelectionAsPNG,\n    exportSelectedElementsAsPNG,\n    exportHighResolution,\n    undo: () => elementsActions.undo(),\n    redo: () => elementsActions.redo(),\n    getState: () => elements,\n    setState: (newElements: DrawingElement[]) => elementsActions.set(newElements)\n  }), [exportFullCanvasFunction, exportSelectionAsPNG, exportSelectedElementsAsPNG, exportHighResolution, elementsActions, elements]);\n  \n  // Center selection area in canvas\n  const centerSelectionArea = useCallback(() => {\n    if (selectionArea && canvasRef.current) {\n      const canvasRect = canvasRef.current.getBoundingClientRect();\n      const centerX = (canvasRect.width / 2) - (selectionArea.width / 2);\n      const centerY = (canvasRect.height / 2) - (selectionArea.height / 2);\n      \n      setPanOffset({ x: centerX, y: centerY });\n      toast.info(\"Área selecionada centralizada\");\n    }\n  }, [selectionArea, setPanOffset]);\n  \n  // Clear selection area\n  const clearSelectionArea = useCallback(() => {\n    setSelectionArea(null);\n    setIsSelecting(false);\n    toast.info(\"Seleção removida\");\n  }, []);\n  \n  // Parse terrain size string to get dimensions in meters\n  const parseTerrainSize = useCallback((sizeString: string) => {\n    if (sizeString === \"Variável\") {\n      return { width: 1, height: 1 }; // Default 1x1m for variable size\n    }\n    \n    const match = sizeString.match(/(\\d+)x(\\d+)m/);\n    if (match) {\n      return { width: parseInt(match[1]), height: parseInt(match[2]) };\n    }\n    \n    // Handle single dimension (like \"2x2m\")\n    const singleMatch = sizeString.match(/(\\d+)m/);\n    if (singleMatch) {\n      const size = parseInt(singleMatch[1]);\n      return { width: size, height: size };\n    }\n    \n    // Default fallback\n    return { width: 1, height: 1 };\n  }, []);\n\n  const detectResizeHandle = useCallback((pos: { x: number; y: number }, element: DrawingElement): string | null => {\n    if (!element.selected) return null;\n\n    const handleSize = 8; // Size of resize handles\n    \n    // For plants\n    if (element.type === 'plant') {\n      const realWorldSize = parseSpacingToMeters(element.plant?.spacing || '1x1m');\n      const plantSize = {\n        width: realWorldSize.width * PIXELS_PER_METER,\n        height: realWorldSize.height * PIXELS_PER_METER\n      };\n      \n      const left = element.x - plantSize.width / 2;\n      const top = element.y - plantSize.height / 2;\n      const right = left + plantSize.width;\n      const bottom = top + plantSize.height;\n      \n      // Check each handle\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'nw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'ne';\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'sw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'se';\n    } \n    // For terrain with path points (brush/trail elements)\n    else if (element.type === 'terrain' && element.pathPoints && element.pathPoints.length > 0) {\n      // Calculate bounding box of path points\n      const xs = element.pathPoints.map(p => p.x);\n      const ys = element.pathPoints.map(p => p.y);\n      const left = Math.min(...xs);\n      const right = Math.max(...xs);\n      const top = Math.min(...ys);\n      const bottom = Math.max(...ys);\n      \n      // Check resize handles around the bounding box\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'nw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'ne';\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'sw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'se';\n    }\n    // For rectangles and terrain rectangles\n    else if (element.type === 'rectangle' || (element.type === 'terrain' && element.brushType !== 'circle' && !element.pathPoints)) {\n      const left = element.x;\n      const top = element.y;\n      const right = left + (element.width || 0);\n      const bottom = top + (element.height || 0);\n      \n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'nw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'ne';\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'sw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'se';\n    }\n    // For circles\n    else if (element.type === 'circle' || (element.type === 'terrain' && element.brushType === 'circle')) {\n      const radius = element.radius || 0;\n      const left = element.x;\n      const top = element.y;\n      const right = left + radius * 2;\n      const bottom = top + radius * 2;\n      \n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'nw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'ne';\n      if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'sw';\n      if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'se';\n    }\n    \n    return null;\n  }, [PIXELS_PER_METER]);\n\n  const selectElement = useCallback((elementId: number, isMulti: boolean = false) => {\n    const updatedElements = elements.map(el => {\n      if (isMulti) {\n        return el.id === elementId ? { ...el, selected: !el.selected } : el;\n      } else {\n        return { ...el, selected: el.id === elementId };\n      }\n    });\n    elementsActions.set(updatedElements);\n  }, [elements, elementsActions]);\n\n  // Auto-select when clicking on any element\n  const handleElementClick = useCallback((elementId: number, e: React.MouseEvent) => {\n    // Switch to select tool automatically\n    if (selectedTool !== 'select') {\n      onToolChange('select');\n    }\n    selectElement(elementId, e.shiftKey);\n  }, [selectedTool, onToolChange, selectElement]);\n\n  const clearSelection = useCallback(() => {\n    const updatedElements = elements.map(el => ({ ...el, selected: false }));\n    elementsActions.set(updatedElements);\n  }, [elements, elementsActions]);\n\n  const isOverlapping = useCallback((newElement: DrawingElement) => {\n    const newLeft = newElement.x;\n    const newTop = newElement.y;\n    const newRight = newLeft + (newElement.width || 0);\n    const newBottom = newTop + (newElement.height || 0);\n\n    return elements.some(el => {\n      if (el.id === newElement.id) return false;\n      const elLeft = el.x;\n      const elTop = el.y;\n      const elRight = elLeft + (el.width || 0);\n      const elBottom = elTop + (el.height || 0);\n\n      return !(\n        newRight < elLeft || \n        newLeft > elRight || \n        newBottom < elTop || \n        newTop > elBottom\n      );\n    });\n  }, [elements]);\n\n  const deleteSelectedElements = useCallback(() => {\n    const selectedCount = elements.filter(el => el.selected).length;\n    if (selectedCount > 0) {\n      const filteredElements = elements.filter(el => !el.selected);\n      elementsActions.set(filteredElements);\n      toast.success(`${selectedCount} elemento(s) removido(s)`);\n    }\n  }, [elements, elementsActions]);\n\n  const copySelectedElements = useCallback(() => {\n    const selectedElements = elements.filter(el => el.selected);\n    if (selectedElements.length > 0) {\n      const copiedElements = selectedElements.map(el => ({\n        ...el,\n        id: Date.now() + Math.random(),\n        x: el.x + 50, // Offset copies slightly\n        y: el.y + 50,\n        selected: false\n      }));\n      elementsActions.set([...elements, ...copiedElements]);\n      clearSelection();\n      toast.success(`${selectedElements.length} elemento(s) copiado(s)`);\n    } else {\n      toast.error(\"Selecione elementos para copiar\");\n    }\n  }, [elements, elementsActions, clearSelection]);\n\n  const rotateSelectedElements = useCallback(() => {\n    const selectedElements = elements.filter(el => el.selected);\n    if (selectedElements.length > 0) {\n      const updatedElements = elements.map(el => \n        el.selected \n          ? { ...el, rotation: (el.rotation || 0) + 90 }\n          : el\n      );\n      elementsActions.set(updatedElements);\n      toast.success(`${selectedElements.length} elemento(s) rotacionado(s)`);\n    } else {\n      toast.error(\"Selecione elementos para rotacionar\");\n    }\n  }, [elements, elementsActions]);\n\n  const deleteElementAtPosition = useCallback((pos: { x: number; y: number }) => {\n    const clickedElement = findElementAtPosition(pos, elements);\n    if (clickedElement) {\n      const filteredElements = elements.filter(el => el.id !== clickedElement.id);\n      elementsActions.set(filteredElements);\n      toast.success(\"Elemento removido\");\n      return true;\n    }\n    return false;\n  }, [elements, elementsActions, findElementAtPosition]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    // Calculate mouse position relative to the canvas viewport\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n    \n    const canvasX = e.clientX - rect.left;\n    const canvasY = e.clientY - rect.top;\n    \n    // Convert to world coordinates (account for pan and zoom)\n    const worldX = (canvasX - panOffset.x) / (zoom / 100);\n    const worldY = (canvasY - panOffset.y) / (zoom / 100);\n    \n    const rawPos = { x: worldX, y: worldY };\n    const pos = snapToGrid(rawPos, showGrid);\n    \n        \n    // Handle panning with space key\n    if (isSpacePressed) {\n      setIsPanning(true);\n      setLastPanPoint({ x: e.clientX, y: e.clientY });\n      return;\n    }\n\n    // Handle selection tool\n    if (selectedTool === 'selectArea') {\n      setIsSelecting(true);\n      setSelectionStart(pos);\n      setSelectionEnd(pos);\n      setSelectionArea({ x: pos.x, y: pos.y, width: 0, height: 0 });\n      return;\n    }\n    \n    // Handle delete tool\n    if (selectedTool === 'delete') {\n      deleteElementAtPosition(pos);\n      return;\n    }\n\n    // Check if clicking on an existing element for selection or interaction\n    const clickedElement = findElementAtPosition(pos.x, pos.y);\n        \n    if (clickedElement && selectedTool !== 'delete') {\n      // Check if clicking on a resize handle first\n      const handle = detectResizeHandle(pos, clickedElement);\n      \n      if (handle && clickedElement.selected) {\n        // Start resizing\n        setIsResizing(true);\n        setResizeHandle(handle);\n        setResizeElement(clickedElement);\n        setResizeStartPos(pos);\n        \n        // Store original bounds for calculation\n        if (clickedElement.type === 'plant') {\n          const realWorldSize = parseSpacingToMeters(clickedElement.plant?.spacing || '1x1m');\n          const plantSize = {\n            width: realWorldSize.width * PIXELS_PER_METER,\n            height: realWorldSize.height * PIXELS_PER_METER\n          };\n          setOriginalElementBounds({\n            x: clickedElement.x - plantSize.width / 2,\n            y: clickedElement.y - plantSize.height / 2,\n            width: plantSize.width,\n            height: plantSize.height\n          });\n        } else if (clickedElement.type === 'terrain' && clickedElement.pathPoints && clickedElement.pathPoints.length > 0) {\n          // For terrain path elements, calculate bounding box from path points\n          const xs = clickedElement.pathPoints.map(p => p.x);\n          const ys = clickedElement.pathPoints.map(p => p.y);\n          const minX = Math.min(...xs);\n          const maxX = Math.max(...xs);\n          const minY = Math.min(...ys);\n          const maxY = Math.max(...ys);\n          \n          setOriginalElementBounds({\n            x: minX,\n            y: minY,\n            width: maxX - minX || 10,\n            height: maxY - minY || 10\n          });\n        } else {\n          setOriginalElementBounds({\n            x: clickedElement.x,\n            y: clickedElement.y,\n            width: clickedElement.width || 0,\n            height: clickedElement.height || 0\n          });\n        }\n        return;\n      }\n      \n      // Element selection and dragging for any tool (except delete)\n                        \n      // Select the element\n      selectElement(clickedElement.id);\n      \n      // Start dragging\n            setIsDragging(true);\n      setDragElement(clickedElement);\n      const offset = {\n        x: pos.x - clickedElement.x,\n        y: pos.y - clickedElement.y\n      };\n            setDragOffset(offset);\n      \n      // Switch to select tool if not already selected and not placing elements\n      if (selectedTool !== 'select' && !selectedPlant && !selectedTerrain) {\n        onToolChange('select');\n      }\n      \n      return;\n    }\n\n    // Clear selection if clicking empty space with select tool\n    if (selectedTool === 'select') {\n      clearSelection();\n      return;\n    }\n\n    // Add plant\n    if (selectedPlant && (selectedTool === 'select' || !selectedTool)) {\n      const newElement: DrawingElement = {\n        id: Date.now() + Math.random(), // Better unique ID generation\n        type: 'plant',\n        x: pos.x,\n        y: pos.y,\n        plant: selectedPlant,\n      };\n      \n      if (isOverlapping(newElement)) {\n        toast.warning('Elemento sobrepõe outro existente');\n        return;\n      }\n      \n      // Add to existing elements instead of replacing\n      elementsActions.set([...elements, newElement]);\n      toast.success(`${selectedPlant.name} adicionada ao mapa!`);\n      return;\n    }\n\n    // Add structure\n    if (selectedStructure && (selectedTool === 'select' || !selectedTool)) {\n      const structureSize = selectedStructure.size || { width: 2, height: 2 };\n      const pixelWidth = metersToPixels(structureSize.width);\n      const pixelHeight = metersToPixels(structureSize.height);\n      \n      const newElement: DrawingElement = {\n        id: Date.now() + Math.random(),\n        type: 'structure',\n        x: pos.x - pixelWidth / 2,\n        y: pos.y - pixelHeight / 2,\n        width: pixelWidth,\n        height: pixelHeight,\n        realWorldWidth: structureSize.width,\n        realWorldHeight: structureSize.height,\n        structure: selectedStructure,\n      };\n      \n      if (isOverlapping(newElement)) {\n        toast.warning('Estrutura sobrepõe elemento existente');\n        return;\n      }\n      \n      elementsActions.set([...elements, newElement]);\n      toast.success(`${selectedStructure.name} adicionada ao mapa!`);\n      onStructureUsed?.();\n      return;\n    }\n\n    // Add terrain element with brush system\n    if (selectedTerrain && selectedTool === 'terrain') {\n      const terrainSize = parseTerrainSize(selectedTerrain.size);\n      const brushMode = selectedTerrain.selectedBrushMode || 'rectangle';\n      const brushThickness = selectedTerrain.brushThickness || 20;\n      \n      if (brushMode === 'brush') {\n        // For brush mode, start freehand drawing\n        setIsDrawingTerrain(true);\n        setCurrentTerrainPath([pos]);\n        return;\n      } else if (brushMode === 'path' || selectedTerrain.brushType === 'path') {\n        // For path terrain, create immediately as single click creates a simple path\n        const pathLength = terrainSize.width > 1 ? terrainSize.width : 5; // Default path length\n        const pathPoints = [\n          pos,\n          { x: pos.x + metersToPixels(pathLength), y: pos.y }\n        ];\n        \n        const newTerrain: DrawingElement = {\n          id: Date.now(),\n          type: 'terrain',\n          x: pos.x,\n          y: pos.y,\n          pathPoints: pathPoints,\n          terrain: selectedTerrain,\n          brushType: 'path',\n          texture: selectedTerrain.texture,\n          realWorldWidth: brushThickness / 10, // Convert to meters\n          realWorldHeight: pathLength,\n        };\n        \n        elementsActions.set([...elements, newTerrain]);\n        onTerrainUsed();\n        toast.success(`${selectedTerrain.name} (caminho) adicionado ao mapa!`);\n        return;\n      } else {\n        // Start drawing rectangle or circle terrain\n        setIsDrawing(true);\n        setStartPos(pos);\n        \n        const terrainWidthPixels = metersToPixels(terrainSize.width);\n        const terrainHeightPixels = metersToPixels(terrainSize.height);\n        \n        const newTerrain: DrawingElement = {\n          id: Date.now() + Math.random(),\n          type: 'terrain',\n          x: pos.x,\n          y: pos.y,\n          width: brushMode === 'circle' ? terrainWidthPixels : terrainWidthPixels,\n          height: brushMode === 'circle' ? terrainHeightPixels : terrainHeightPixels,\n          radius: brushMode === 'circle' ? Math.min(terrainWidthPixels, terrainHeightPixels) / 2 : undefined,\n          realWorldWidth: terrainSize.width,\n          realWorldHeight: terrainSize.height,\n          terrain: selectedTerrain,\n          brushType: brushMode as 'rectangle' | 'circle',\n          texture: selectedTerrain.texture,\n        };\n        \n        setCurrentShape(newTerrain);\n        return;\n      }\n    }\n\n    // Start drawing shapes\n    if (selectedTool === 'rectangle' || selectedTool === 'circle') {\n      setIsDrawing(true);\n      setStartPos(pos);\n      \n      const newShape: DrawingElement = {\n        id: Date.now(),\n        type: selectedTool as 'rectangle' | 'circle',\n        x: pos.x,\n        y: pos.y,\n        width: 0,\n        height: 0,\n        radius: 0,\n      };\n      \n      setCurrentShape(newShape);\n    }\n  }, [selectedTool, selectedPlant, selectedTerrain, elements, snapToGrid, selectElement, clearSelection, onTerrainUsed, deleteElementAtPosition, findElementAtPosition, zoom, showGrid, isSpacePressed, panOffset, metersToPixels, parseTerrainSize, elementsActions, PIXELS_PER_METER, detectResizeHandle, onToolChange, isOverlapping, onStructureUsed, selectedStructure]);\n\nconst handleMouseMove = useCallback((e: React.MouseEvent) => {\n    // Calculate mouse position relative to the canvas viewport\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n    \n    const canvasX = e.clientX - rect.left;\n    const canvasY = e.clientY - rect.top;\n    \n    // Convert to world coordinates (account for pan and zoom)\n    const worldX = (canvasX - panOffset.x) / (zoom / 100);\n    const worldY = (canvasY - panOffset.y) / (zoom / 100);\n    \n    const rawPos = { x: worldX, y: worldY };\n    const pos = snapToGrid(rawPos, showGrid);\n\n    // Handle panning with optimized performance\n    if (isPanning) {\n      const deltaX = e.clientX - lastPanPoint.x;\n      const deltaY = e.clientY - lastPanPoint.y;\n      const newOffset = {\n        x: panOffset.x + deltaX,\n        y: panOffset.y + deltaY\n      };\n      schedulePanUpdate(newOffset.x, newOffset.y);\n      setLastPanPoint({ x: e.clientX, y: e.clientY });\n      return;\n    }\n\n    // Handle selection area\n    if (isSelecting && selectionArea) {\n      const newSelectionEnd = pos;\n      setSelectionEnd(newSelectionEnd);\n\n      const newSelectionArea = {\n        x: Math.min(selectionStart.x, newSelectionEnd.x),\n        y: Math.min(selectionStart.y, newSelectionEnd.y),\n        width: Math.abs(newSelectionEnd.x - selectionStart.x),\n        height: Math.abs(newSelectionEnd.y - selectionStart.y),\n      };\n\n      setSelectionArea(newSelectionArea);\n      return;\n    }\n\n    // Handle resizing elements\n    if (isResizing && resizeElement && resizeHandle) {\n      const deltaX = pos.x - resizeStartPos.x;\n      const deltaY = pos.y - resizeStartPos.y;\n      \n      const newBounds = { ...originalElementBounds };\n      \n      // Calculate new bounds based on resize handle\n      switch (resizeHandle) {\n        case 'nw':\n          newBounds.x = originalElementBounds.x + deltaX;\n          newBounds.y = originalElementBounds.y + deltaY;\n          newBounds.width = originalElementBounds.width - deltaX;\n          newBounds.height = originalElementBounds.height - deltaY;\n          break;\n        case 'ne':\n          newBounds.y = originalElementBounds.y + deltaY;\n          newBounds.width = originalElementBounds.width + deltaX;\n          newBounds.height = originalElementBounds.height - deltaY;\n          break;\n        case 'sw':\n          newBounds.x = originalElementBounds.x + deltaX;\n          newBounds.width = originalElementBounds.width - deltaX;\n          newBounds.height = originalElementBounds.height + deltaY;\n          break;\n        case 'se':\n          newBounds.width = originalElementBounds.width + deltaX;\n          newBounds.height = originalElementBounds.height + deltaY;\n          break;\n      }\n      \n      // Ensure minimum size\n      const minSize = 20;\n      newBounds.width = Math.max(newBounds.width, minSize);\n      newBounds.height = Math.max(newBounds.height, minSize);\n      \n      // Update the element\n      const updatedElements = elements.map(el => {\n        if (el.id === resizeElement.id) {\n          if (el.type === 'plant') {\n            // For plants, update the center position and scale the spacing\n            const newCenterX = newBounds.x + newBounds.width / 2;\n            const newCenterY = newBounds.y + newBounds.height / 2;\n            return { ...el, x: newCenterX, y: newCenterY };\n          } else if (el.type === 'terrain' && el.pathPoints && el.pathPoints.length > 0) {\n            // For terrain brush elements with path points\n            const originalBounds = originalElementBounds;\n            const scaleX = newBounds.width / originalBounds.width;\n            const scaleY = newBounds.height / originalBounds.height;\n            \n            // Scale and translate all path points\n            const updatedPathPoints = el.pathPoints.map(point => ({\n              x: newBounds.x + (point.x - originalBounds.x) * scaleX,\n              y: newBounds.y + (point.y - originalBounds.y) * scaleY\n            }));\n            \n            return {\n              ...el,\n              x: newBounds.x,\n              y: newBounds.y,\n              pathPoints: updatedPathPoints,\n              brushThickness: Math.max(2, (el.brushThickness || 8) * Math.min(scaleX, scaleY))\n            };\n          } else if (el.type === 'circle' || (el.type === 'terrain' && el.brushType === 'circle')) {\n            // For circles, update radius\n            const newRadius = Math.min(newBounds.width, newBounds.height) / 2;\n            return {\n              ...el,\n              x: newBounds.x,\n              y: newBounds.y,\n              radius: newRadius,\n              width: newRadius * 2,\n              height: newRadius * 2\n            };\n          } else {\n            // For rectangles and other terrain elements\n            return {\n              ...el,\n              x: newBounds.x,\n              y: newBounds.y,\n              width: newBounds.width,\n              height: newBounds.height\n            };\n          }\n        }\n        return el;\n      });\n      elementsActions.set(updatedElements);\n      return;\n    }\n\n    // Handle dragging elements with optimized performance\n    if (isDragging && dragElement) {\n      const newPos = snapToGrid({\n        x: pos.x - dragOffset.x,\n        y: pos.y - dragOffset.y\n      }, showGrid);\n      \n            \n      // Use optimized drag update for better performance\n      scheduleDragUpdate(dragElement.id, newPos.x, newPos.y);\n      return;\n    }\n\n    // Handle drawing terrain paths (trails, streams) and freehand brush\n    if (isDrawingTerrain && selectedTerrain) {\n      const brushThickness = selectedTerrain.brushThickness || 20;\n      \n      // Add point to current path with some distance threshold to avoid too many points\n      if (currentTerrainPath.length === 0 || \n          Math.sqrt(Math.pow(pos.x - currentTerrainPath[currentTerrainPath.length - 1].x, 2) + \n                   Math.pow(pos.y - currentTerrainPath[currentTerrainPath.length - 1].y, 2)) > 5) {\n        setCurrentTerrainPath(prev => [...prev, pos]);\n      }\n      return;\n    }\n\n    // Handle drawing new shapes (rectangles, circles, terrain areas)\n    if (!isDrawing || !currentShape) return;\n\n    const width = Math.abs(pos.x - startPos.x);\n    const height = Math.abs(pos.y - startPos.y);\n    \n    if (currentShape.brushType === 'circle' || currentShape.type === 'circle') {\n      const radius = Math.min(width, height) / 2;\n      const centerX = (startPos.x + pos.x) / 2;\n      const centerY = (startPos.y + pos.y) / 2;\n      const updatedShape: DrawingElement = {\n        ...currentShape,\n        x: centerX - radius,\n        y: centerY - radius,\n        radius: radius,\n        width: radius * 2,\n        height: radius * 2,\n      };\n      setCurrentShape(updatedShape);\n    } else {\n      const updatedShape: DrawingElement = {\n        ...currentShape,\n        x: Math.min(startPos.x, pos.x),\n        y: Math.min(startPos.y, pos.y),\n        width: width,\n        height: height,\n      };\n      setCurrentShape(updatedShape);\n    }\n  }, [isDragging, dragElement, dragOffset, isDrawing, currentShape, startPos, snapToGrid, zoom, showGrid, isPanning, lastPanPoint, panOffset, isDrawingTerrain, selectedTerrain, elements, elementsActions, isSelecting, selectionStart, selectionArea, isResizing, resizeElement, resizeHandle, resizeStartPos, originalElementBounds, currentTerrainPath, scheduleDragUpdate, schedulePanUpdate]);\n\n  const handleMouseUp = useCallback(() => {\n    if (isPanning) {\n      // Cancel any pending pan updates\n      if (panAnimationFrame.current) {\n        cancelAnimationFrame(panAnimationFrame.current);\n        panAnimationFrame.current = null;\n      }\n      \n      // Apply final pending update if any\n      if (pendingPanUpdate.current) {\n        const { x, y } = pendingPanUpdate.current;\n        setPanOffset({ x, y });\n        pendingPanUpdate.current = null;\n      }\n      \n      setIsPanning(false);\n    }\n\n    if (isResizing) {\n      setIsResizing(false);\n      setResizeHandle(null);\n      setResizeElement(null);\n      setResizeStartPos({ x: 0, y: 0 });\n      setOriginalElementBounds({ x: 0, y: 0, width: 0, height: 0 });\n    }\n\n    if (isSelecting) {\n      setIsSelecting(false);\n      if (selectionArea) {\n        toast.success('Área selecionada: ' + JSON.stringify(selectionArea));\n      }\n    }\n\n    if (isDragging) {\n      // Cancel any pending drag updates\n      if (dragAnimationFrame.current) {\n        cancelAnimationFrame(dragAnimationFrame.current);\n        dragAnimationFrame.current = null;\n      }\n      \n      // Apply final pending update if any\n      if (pendingDragUpdate.current) {\n        const { elementId, x, y } = pendingDragUpdate.current;\n        const updatedElements = elements.map(el =>\n          el.id === elementId ? { ...el, x, y } : el\n        );\n        elementsActions.set(updatedElements);\n        pendingDragUpdate.current = null;\n      }\n      \n      setIsDragging(false);\n      setDragElement(null);\n      setDragOffset({ x: 0, y: 0 });\n    }\n\n    // Finish drawing terrain path or freehand brush\n    if (isDrawingTerrain && currentTerrainPath.length > 1 && selectedTerrain) {\n      const brushThickness = selectedTerrain.brushThickness || 20;\n      \n      const newTerrain: DrawingElement = {\n        id: Date.now(),\n        type: 'terrain',\n        x: currentTerrainPath[0].x,\n        y: currentTerrainPath[0].y,\n        pathPoints: currentTerrainPath,\n        terrain: selectedTerrain,\n        brushType: 'path',\n        texture: selectedTerrain.texture,\n        realWorldWidth: brushThickness / 10, // Convert to meters\n        realWorldHeight: currentTerrainPath.length / 10, // Approximate length\n        brushThickness: brushThickness,\n      };\n      \n      elementsActions.set([...elements, newTerrain]);\n      onTerrainUsed();\n      setIsDrawingTerrain(false);\n      setCurrentTerrainPath([]);\n      \n      const brushMode = selectedTerrain.selectedBrushMode || 'brush';\n      toast.success(`${selectedTerrain.name} (${brushMode === 'brush' ? 'pincel' : 'trilha'}) adicionado ao mapa!`);\n    }\n\n    // Finish drawing terrain area\n    if (isDrawing && currentShape) {\n      const minSize = 10;\n      const isValidSize = (currentShape.width && currentShape.width > minSize) ||\n                         (currentShape.radius && currentShape.radius > minSize);\n      \n      if (isValidSize) {\n        elementsActions.set([...elements, currentShape]);\n        \n        if (currentShape.type === 'terrain') {\n          onTerrainUsed();\n          const realArea = (currentShape.realWorldWidth || 1) * (currentShape.realWorldHeight || 1);\n          toast.success(`${currentShape.terrain?.name} adicionado! (${realArea}m²)`);\n        } else {\n          toast.success(`${currentShape.type === 'rectangle' ? 'Retângulo' : 'Círculo'} criado!`);\n        }\n      }\n      setCurrentShape(null);\n    }\n    \n    setIsDrawing(false);\n  }, [isDragging, isDrawing, currentShape, isPanning, isDrawingTerrain, currentTerrainPath, selectedTerrain, onTerrainUsed, elements, elementsActions, isResizing, isSelecting, selectionArea, setPanOffset]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    const data = e.dataTransfer.getData('text/plain');\n    if (!data) return;\n\n    try {\n      const plantData = JSON.parse(data);\n      const rawPos = getMousePosition(e, canvasRef, zoom, panOffset);\n      const pos = snapToGrid(rawPos, showGrid);\n      \n      const newElement: DrawingElement = {\n        id: Date.now() + Math.random(),\n        type: 'plant',\n        x: pos.x,\n        y: pos.y,\n        plant: plantData,\n      };\n      \n      elementsActions.set([...elements, newElement]);\n      toast.success(`${plantData.name} adicionada via drag & drop!`);\n    } catch (error) {\n      console.error('Error parsing dropped data:', error);\n    }\n  }, [getMousePosition, snapToGrid, zoom, showGrid, panOffset, elements, elementsActions]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n  }, []);\n\n  // Touch events for mobile pan/zoom\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (e.touches.length === 2) {\n      setIsPanning(true);\n      const touch = e.touches[0];\n      setLastPanPoint({ x: touch.clientX, y: touch.clientY });\n    }\n  }, []);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (e.touches.length === 2 && isPanning) {\n      e.preventDefault();\n      const touch = e.touches[0];\n      const deltaX = touch.clientX - lastPanPoint.x;\n      const deltaY = touch.clientY - lastPanPoint.y;\n      setPanOffset(prev => ({\n        x: prev.x + deltaX,\n        y: prev.y + deltaY\n      }));\n      setLastPanPoint({ x: touch.clientX, y: touch.clientY });\n    }\n  }, [isPanning, lastPanPoint, setPanOffset]);\n\n  const handleTouchEnd = useCallback(() => {\n    setIsPanning(false);\n  }, []);\n  \n  // Handle wheel zoom\n  const handleWheel = useCallback((e: React.WheelEvent) => {\n    if (e.ctrlKey || e.metaKey) {\n      e.preventDefault();\n      \n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (!rect) return;\n      \n      // Get mouse position relative to canvas\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      // Calculate zoom with much slower speed\n      const delta = e.deltaY * -0.001; // Made 10x slower\n      const newZoom = Math.max(10, Math.min(400, zoom + delta * 2)); // Reduced multiplier\n      \n      if (newZoom !== zoom) {\n        // Calculate the world position under the mouse before and after zoom\n        const worldXBefore = (mouseX - panOffset.x) / (zoom / 100);\n        const worldYBefore = (mouseY - panOffset.y) / (zoom / 100);\n        \n        const worldXAfter = (mouseX - panOffset.x) / (newZoom / 100);\n        const worldYAfter = (mouseY - panOffset.y) / (newZoom / 100);\n        \n        // Adjust pan to keep the same world position under the mouse\n        setPanOffset({\n          x: panOffset.x + (worldXAfter - worldXBefore) * (newZoom / 100),\n          y: panOffset.y + (worldYAfter - worldYBefore) * (newZoom / 100),\n        });\n        \n        // Update zoom through the hook\n        if (delta > 0) {\n          zoomIn();\n        } else {\n          zoomOut();\n        }\n      }\n    }\n  }, [zoom, panOffset, zoomIn, zoomOut, setPanOffset]);\n\n  // Update canvas dimensions when the container resizes\n  useEffect(() => {\n    const updateCanvasDimensions = () => {\n      if (canvasRef.current) {\n        const rect = canvasRef.current.getBoundingClientRect();\n        setCanvasDimensions({ width: rect.width, height: rect.height });\n      }\n    };\n    \n    updateCanvasDimensions();\n    \n    const resizeObserver = new ResizeObserver(updateCanvasDimensions);\n    if (canvasRef.current) {\n      resizeObserver.observe(canvasRef.current);\n    }\n    \n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  \n  // Update canvas real size when canvasSize prop changes\n  useEffect(() => {\n    if (canvasSize) {\n      setCanvasRealSize(canvasSize);\n    }\n  }, [canvasSize]);\n  \n  // Enhanced keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Prevent shortcuts when typing in input fields\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      if (e.key === ' ') {\n        e.preventDefault();\n        setIsSpacePressed(true);\n      }\n      \n      // Delete/Backspace - delete selected elements\n      if (e.key === 'Delete' || e.key === 'Backspace') {\n        e.preventDefault();\n        deleteSelectedElements();\n      }\n      \n      // Escape - clear selection and cancel operations\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        clearSelection();\n        setCurrentShape(null);\n        setIsDrawing(false);\n        setIsDragging(false);\n        setIsPanning(false);\n        setIsDrawingTerrain(false);\n        setCurrentTerrainPath([]);\n        setIsResizing(false);\n        setResizeHandle(null);\n        setResizeElement(null);\n        onToolChange('select'); // Switch to select tool\n      }\n      \n      // G - toggle grid\n      if (e.key === 'g' || e.key === 'G') {\n        e.preventDefault();\n        setShowGrid(prev => {\n          const newState = !prev;\n          toast.success(newState ? \"Grade ativada\" : \"Grade desativada\");\n          return newState;\n        });\n      }\n      \n      // S - select tool\n      if (e.key === 's' || e.key === 'S') {\n        e.preventDefault();\n        onToolChange('select');\n        toast.info(\"Ferramenta Selecionar ativada\");\n      }\n      \n      // A - select area tool\n      if (e.key === 'a' || e.key === 'A') {\n        e.preventDefault();\n        if (!(e.ctrlKey || e.metaKey)) { // Only if not Ctrl+A\n          onToolChange('selectArea');\n          toast.info(\"Ferramenta de Seleção de Área ativada\");\n        }\n      }\n      \n      // R - rectangle tool\n      if (e.key === 'r' || e.key === 'R') {\n        e.preventDefault();\n        onToolChange('rectangle');\n        toast.info(\"Ferramenta Retângulo ativada\");\n      }\n      \n      // C - circle tool or copy\n      if (e.key === 'c' || e.key === 'C') {\n        e.preventDefault();\n        if (e.ctrlKey || e.metaKey) {\n          // Ctrl+C - copy\n          copySelectedElements();\n        } else {\n          // C - circle tool\n          onToolChange('circle');\n          toast.info(\"Ferramenta Círculo ativada\");\n        }\n      }\n      \n      // T - terrain tool\n      if (e.key === 't' || e.key === 'T') {\n        e.preventDefault();\n        onToolChange('terrain');\n        toast.info(\"Ferramenta Terreno ativada\");\n      }\n      \n      // D - delete tool\n      if (e.key === 'd' || e.key === 'D') {\n        e.preventDefault();\n        onToolChange('delete');\n        toast.info(\"Ferramenta Excluir ativada\");\n      }\n      \n      // Ctrl+A - select all\n      if ((e.ctrlKey || e.metaKey) && e.key === 'a') {\n        e.preventDefault();\n        const selectedElements = elements.map(el => ({ ...el, selected: true }));\n        elementsActions.set(selectedElements);\n        toast.success(\"Todos os elementos selecionados\");\n      }\n      \n      // Ctrl+Z - undo\n      if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {\n        e.preventDefault();\n        if (elementsActions.canUndo) {\n          elementsActions.undo();\n          toast.success(\"Ação desfeita\");\n        } else {\n          toast.info(\"Nada para desfazer\");\n        }\n      }\n      \n      // Ctrl+Y or Ctrl+Shift+Z - redo\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || (e.key === 'z' && e.shiftKey))) {\n        e.preventDefault();\n        if (elementsActions.canRedo) {\n          elementsActions.redo();\n          toast.success(\"Ação refeita\");\n        } else {\n          toast.info(\"Nada para refazer\");\n        }\n      }\n      \n      // Arrow keys - move selected element\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n        e.preventDefault();\n        const selectedElement = elements.find(el => el.selected);\n        if (selectedElement) {\n          const moveAmount = e.shiftKey ? 50 : 10; // Larger steps with Shift\n          let newX = selectedElement.x;\n          let newY = selectedElement.y;\n          \n          switch (e.key) {\n            case 'ArrowUp': newY -= moveAmount; break;\n            case 'ArrowDown': newY += moveAmount; break;\n            case 'ArrowLeft': newX -= moveAmount; break;\n            case 'ArrowRight': newX += moveAmount; break;\n          }\n          \n          const updatedElements = elements.map(el =>\n            el.id === selectedElement.id ? { ...el, x: newX, y: newY } : el\n          );\n          elementsActions.set(updatedElements);\n        }\n      }\n      \n      // Number keys for zoom\n      if (e.key >= '1' && e.key <= '9' && !e.ctrlKey && !e.metaKey) {\n        e.preventDefault();\n        const zoomLevel = parseInt(e.key) * 25; // 1=25%, 2=50%, etc.\n        if (zoomLevel >= 25 && zoomLevel <= 300) {\n          zoomToFit(); // Use zoom to fit for better UX\n          toast.info(`Zoom: ${zoomLevel}%`);\n        }\n      }\n      \n      // 0 - reset zoom\n      if (e.key === '0' && !e.ctrlKey && !e.metaKey) {\n        e.preventDefault();\n        resetZoom();\n        toast.info(\"Zoom resetado para 100%\");\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === ' ') {\n        setIsSpacePressed(false);\n        setIsPanning(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [deleteSelectedElements, clearSelection, copySelectedElements, onToolChange, elementsActions, resetZoom, zoomToFit, elements]);\n\n  const handleReset = useCallback(() => {\n    resetZoom();\n    elementsActions.reset([]);\n    setCurrentShape(null);\n    setIsDrawing(false);\n    setIsDragging(false);\n    setIsPanning(false);\n    clearSelection();\n    toast.success(\"Canvas resetado\");\n  }, [resetZoom, elementsActions, clearSelection]);\n\n  const getCursorStyle = () => {\n    if (isSpacePressed || isPanning) return 'cursor-grab';\n    if (selectedTool === 'select') return 'cursor-default';\n    if (selectedTool === 'selectArea') return 'cursor-crosshair';\n    if (selectedTool === 'delete') return 'cursor-pointer';\n    if (selectedPlant || selectedTerrain) return 'cursor-copy';\n    return 'cursor-crosshair';\n  };\n\n  return (\n    <div className=\"w-full h-full relative bg-gray-50 dark:bg-gray-950 overflow-hidden canvas-container\">\n      {/* Exportar Button - Top Right */}\n      <div className=\"absolute top-3 right-3 z-20\">\n        <ExportarButton\n          onExportCanvas={exportFullCanvasFunction}\n          onExportSelection={selectionArea ? exportSelectionAsPNG : undefined}\n          onExportHighRes={exportHighResolution}\n          hasSelection={!!selectionArea}\n          className=\"shadow-lg\"\n        />\n      </div>\n\n      {/* Canvas Area */}\n      <div\n        ref={canvasRef}\n        className={cn(\n          \"w-full h-full relative overflow-hidden\",\n          getCursorStyle()\n        )}\n        style={{\n          backgroundColor: showGrid ? 'transparent' : '#f9fafb',\n          backgroundImage: showGrid ? `\n            linear-gradient(rgba(107, 114, 128, 0.08) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(107, 114, 128, 0.08) 1px, transparent 1px),\n            linear-gradient(rgba(107, 114, 128, 0.04) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(107, 114, 128, 0.04) 1px, transparent 1px)\n          ` : 'none',\n          backgroundSize: showGrid ? `\n            ${GRID_SIZE_PIXELS * zoom / 100}px ${GRID_SIZE_PIXELS * zoom / 100}px,\n            ${GRID_SIZE_PIXELS * zoom / 100}px ${GRID_SIZE_PIXELS * zoom / 100}px,\n            ${GRID_SIZE_PIXELS * zoom / 200}px ${GRID_SIZE_PIXELS * zoom / 200}px,\n            ${GRID_SIZE_PIXELS * zoom / 200}px ${GRID_SIZE_PIXELS * zoom / 200}px\n          ` : 'none',\n          backgroundPosition: `\n            ${panOffset.x}px ${panOffset.y}px,\n            ${panOffset.x}px ${panOffset.y}px,\n            ${panOffset.x}px ${panOffset.y}px,\n            ${panOffset.x}px ${panOffset.y}px\n          `,\n        }}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onWheel={handleWheel}\n        data-canvas=\"true\"\n        tabIndex={0}\n      >\n        {/* Infinite Canvas Content Layer */}\n        <div \n          className=\"absolute\" \n          style={{\n            transform: `translate(${panOffset.x}px, ${panOffset.y}px) scale(${zoom / 100})`,\n            transformOrigin: '0 0',\n            width: '100%',\n            height: '100%',\n            willChange: 'transform',\n          }}\n        >\n          {/* Modern Working Area Indicator */}\n          <div \n            className=\"absolute border-2 border-dashed border-blue-300 dark:border-blue-700 bg-blue-50/20 dark:bg-blue-950/20 rounded-lg pointer-events-none\"\n            style={{\n              width: `${(canvasSize?.width || canvasRealSize.width) * PIXELS_PER_METER}px`,\n              height: `${(canvasSize?.height || canvasRealSize.height) * PIXELS_PER_METER}px`,\n              left: '50%',\n              top: '50%',\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            {/* Clean corner indicators */}\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full\"></div>\n            \n            {/* Clean working area info */}\n            <div className=\"absolute -top-6 left-0 bg-blue-500 dark:bg-blue-600 text-white text-xs px-2 py-1 rounded font-medium\">\n              {(canvasSize?.width || canvasRealSize.width)} × {(canvasSize?.height || canvasRealSize.height)}m\n            </div>\n            \n            {/* Simple center indicator */}\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1 h-1 bg-blue-400 dark:bg-blue-500 rounded-full\"></div>\n          </div>\n        \n        {/* Selection Area Visualization */}\n        {selectionArea && (\n          <div\n            className=\"absolute border-4 border-blue-500 bg-blue-300/30 dark:bg-blue-700/30 pointer-events-none z-20\"\n            style={{\n              left: selectionArea.x,\n              top: selectionArea.y,\n              width: selectionArea.width,\n              height: selectionArea.height,\n              boxShadow: '0 0 0 2px rgba(59, 130, 246, 0.5)',\n            }}\n          >\n            {/* Selection area corners */}\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-2 h-2 bg-blue-500 rounded-full\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-blue-500 rounded-full\"></div>\n            \n            {/* Selection info */}\n            <div className=\"absolute -top-8 left-0 bg-blue-500 text-white text-xs px-2 py-1 rounded whitespace-nowrap\">\n              {Math.round(selectionArea.width)} × {Math.round(selectionArea.height)} px\n            </div>\n          </div>\n        )}\n        \n          {/* Canvas Elements */}\n          {elements.map(element => (\n            <CanvasElement key={element.id} element={element} pixelsPerMeter={PIXELS_PER_METER} />\n          ))}\n          \n          {/* Current shape being drawn */}\n          {currentShape && <CanvasElement element={currentShape} pixelsPerMeter={PIXELS_PER_METER} />}\n        </div>\n\n        {/* Welcome message for empty canvas */}\n        {elements.length === 0 && !currentShape && <CanvasWelcome />}\n        \n        {/* Modern Scale Ruler */}\n        <div className=\"absolute bottom-3 left-3 bg-white/95 dark:bg-gray-900/95 backdrop-blur-efficient rounded-lg p-2 shadow-sm z-20\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Escala:</div>\n            <div \n              className=\"h-0.5 bg-blue-500 rounded\"\n              style={{ width: `${GRID_SIZE_PIXELS * zoom / 100}px` }}\n            />\n            <div className=\"text-xs font-medium text-blue-600 dark:text-blue-400\">\n              {GRID_SIZE_METERS}m\n            </div>\n          </div>\n        </div>\n        \n      </div>\n    </div>\n  );\n}));\n\nCanvas.displayName = \"Canvas\";\n",
      "size_bytes": 62943
    },
    "client/src/components/ErrorBoundary.tsx": {
      "content": "import React, { Component, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: string;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { \n      hasError: true, \n      error \n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    // Log error to external service in production\n    if (process.env.NODE_ENV === 'production') {\n      // logErrorToService(error, errorInfo);\n    }\n    \n    this.setState({\n      error,\n      errorInfo: errorInfo.componentStack\n    });\n  }\n\n  handleReset = (): void => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center p-4 bg-gray-50 dark:bg-gray-900\">\n          <div className=\"max-w-md w-full space-y-6\">\n            <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n              <AlertTitle className=\"text-red-800 dark:text-red-200\">\n                Oops! Algo deu errado\n              </AlertTitle>\n              <AlertDescription className=\"text-red-700 dark:text-red-300\">\n                A aplicação encontrou um erro inesperado. Por favor, tente recarregar a página.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-2\">\n              <Button \n                onClick={this.handleReset}\n                className=\"w-full\"\n                variant=\"outline\"\n              >\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Tentar Novamente\n              </Button>\n              \n              <Button \n                onClick={() => window.location.reload()}\n                className=\"w-full\"\n                variant=\"default\"\n              >\n                Recarregar Página\n              </Button>\n            </div>\n\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"mt-4 p-4 bg-gray-100 dark:bg-gray-800 rounded-md\">\n                <summary className=\"cursor-pointer font-medium text-sm text-gray-700 dark:text-gray-300\">\n                  Detalhes do Erro (Desenvolvimento)\n                </summary>\n                <pre className=\"mt-2 text-xs text-red-600 dark:text-red-400 overflow-auto\">\n                  {this.state.error.toString()}\n                  {this.state.errorInfo && (\n                    <>\n                      <br />\n                      <br />\n                      Stack Trace:\n                      <br />\n                      {this.state.errorInfo}\n                    </>\n                  )}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n",
      "size_bytes": 3519
    },
    "client/src/components/MobileNavigation.tsx": {
      "content": "import React, { memo, useCallback, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  MousePointer, \n  Square, \n  Circle, \n  Hand,\n  Palette,\n  Leaf,\n  Mountain,\n  Building,\n  Grid3X3,\n  Trash2,\n  Library,\n  Sparkles\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MobileNavigationProps {\n  selectedTool: string;\n  onToolSelect: (tool: string) => void;\n  activeLibrary: \"plants\" | \"terrain\" | \"structures\";\n  onLibraryChange: (library: \"plants\" | \"terrain\" | \"structures\") => void;\n  onShowLibrary?: () => void;\n}\n\nconst tools = [\n  { id: \"select\", icon: MousePointer, label: \"Selecionar\", color: \"bg-gradient-to-r from-blue-400 to-cyan-500\" },\n  { id: \"move\", icon: Hand, label: \"Navegar\", color: \"bg-gradient-to-r from-purple-400 to-pink-500\" },\n  { id: \"rectangle\", icon: Square, label: \"Retângulo\", color: \"bg-gradient-to-r from-orange-400 to-red-500\" },\n  { id: \"circle\", icon: Circle, label: \"Círculo\", color: \"bg-gradient-to-r from-pink-400 to-rose-500\" },\n  { id: \"terrain\", icon: Palette, label: \"Terreno\", color: \"bg-gradient-to-r from-green-400 to-emerald-500\" },\n  { id: \"grid\", icon: Grid3X3, label: \"Grade\", color: \"bg-gradient-to-r from-slate-400 to-gray-500\" },\n  { id: \"delete\", icon: Trash2, label: \"Excluir\", color: \"bg-gradient-to-r from-red-400 to-rose-500\" },\n];\n\nconst MobileToolButton = memo(({ tool, isSelected, onSelect }: {\n  tool: typeof tools[0];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(tool.id);\n  }, [tool.id, onSelect]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"flex-1 flex flex-col items-center gap-1 h-auto py-3 px-2 rounded-2xl transition-all duration-300 backdrop-blur-xl border touch-target\",\n        \"hover:scale-105\",\n        isSelected \n          ? `${tool.color} text-white shadow-lg border-white/20` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n    >\n      <tool.icon className=\"w-5 h-5\" />\n      <span className=\"text-xs font-semibold leading-none\">{tool.label}</span>\n      {isSelected && (\n        <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent rounded-2xl pointer-events-none\" />\n      )}\n    </Button>\n  );\n});\n\nMobileToolButton.displayName = \"MobileToolButton\";\n\nconst LibraryButton = memo(({ library, isActive, onSelect }: {\n  library: \"plants\" | \"terrain\" | \"structures\";\n  isActive: boolean;\n  onSelect: (library: \"plants\" | \"terrain\" | \"structures\") => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(library);\n  }, [library, onSelect]);\n\n  const config = {\n    plants: { Icon: Leaf, label: \"Plantas\", color: \"bg-gradient-to-r from-green-400 to-emerald-500\" },\n    terrain: { Icon: Mountain, label: \"Terreno\", color: \"bg-gradient-to-r from-orange-400 to-amber-500\" },\n    structures: { Icon: Building, label: \"Estruturas\", color: \"bg-gradient-to-r from-blue-400 to-indigo-500\" }\n  };\n\n  const { Icon, label, color } = config[library];\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"flex items-center gap-2 h-10 px-4 rounded-2xl transition-all duration-300 backdrop-blur-xl border font-semibold\",\n        \"hover:scale-105\",\n        isActive \n          ? `${color} text-white shadow-lg border-white/20` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n    >\n      <Icon className=\"w-4 h-4\" />\n      <span className=\"text-sm font-semibold\">{label}</span>\n    </Button>\n  );\n});\n\nLibraryButton.displayName = \"LibraryButton\";\n\nexport const MobileNavigation = memo(({ \n  selectedTool, \n  onToolSelect, \n  activeLibrary, \n  onLibraryChange,\n  onShowLibrary \n}: MobileNavigationProps) => {\n  const memoizedTools = useMemo(() => tools.map(tool => (\n    <MobileToolButton\n      key={tool.id}\n      tool={tool}\n      isSelected={selectedTool === tool.id}\n      onSelect={onToolSelect}\n    />\n  )), [selectedTool, onToolSelect]);\n\n  const memoizedLibraryButtons = useMemo(() => (\n    <>\n      <LibraryButton\n        library=\"plants\"\n        isActive={activeLibrary === \"plants\"}\n        onSelect={onLibraryChange}\n      />\n      <LibraryButton\n        library=\"terrain\"\n        isActive={activeLibrary === \"terrain\"}\n        onSelect={onLibraryChange}\n      />\n      <LibraryButton\n        library=\"structures\"\n        isActive={activeLibrary === \"structures\"}\n        onSelect={onLibraryChange}\n      />\n    </>\n  ), [activeLibrary, onLibraryChange]);\n\n  return (\n    <div className=\"bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-t border-white/20 dark:border-gray-700/20 contain-paint\">\n      <div className=\"safe-area-bottom\">\n        {/* Enhanced Library Selector */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-white/20 dark:border-gray-700/20\">\n          <div className=\"flex items-center gap-2\">\n            {memoizedLibraryButtons}\n          </div>\n          \n          {/* Show Library Button */}\n          {onShowLibrary && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onShowLibrary}\n              className=\"h-10 px-4 rounded-2xl transition-all duration-300 backdrop-blur-xl border font-semibold hover:scale-105 bg-gradient-to-r from-purple-400 to-pink-500 text-white shadow-lg border-white/20\"\n            >\n              <Library className=\"w-4 h-4 mr-2\" />\n              <span className=\"text-sm font-semibold\">Abrir</span>\n              <Sparkles className=\"w-3 h-3 ml-1\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Enhanced Tools Grid */}\n        <div className=\"flex items-center gap-2 px-3 py-3\">\n          {memoizedTools}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMobileNavigation.displayName = \"MobileNavigation\";",
      "size_bytes": 6107
    },
    "client/src/components/PlantLibrary.tsx": {
      "content": "import React, { useState, useMemo, memo, useCallback } from \"react\";\nimport { Search, Star, Leaf, Apple, Pill, Wheat, Carrot, Trees, Flower, Sprout } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useEnhancedSearch } from \"@/hooks/useEnhancedSearch\";\nimport { Plant as PlantType } from \"@/types/canvasTypes\";\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Consolidated Plant Categories with Icons\nconst PLANT_CATEGORIES = [\n  { id: \"all\", name: \"Todas\", icon: Leaf, color: \"bg-gradient-to-r from-emerald-400 to-green-500\" },\n  { id: \"favorites\", name: \"Favoritas\", icon: Star, color: \"bg-gradient-to-r from-yellow-400 to-orange-500\" },\n  { id: \"trees\", name: \"Árvores\", icon: Trees, color: \"bg-gradient-to-r from-green-600 to-emerald-700\" },\n  { id: \"fruits\", name: \"Frutíferas\", icon: Apple, color: \"bg-gradient-to-r from-red-400 to-pink-500\" },\n  { id: \"vegetables\", name: \"Hortaliças\", icon: Leaf, color: \"bg-gradient-to-r from-green-400 to-lime-500\" },\n  { id: \"herbs\", name: \"Ervas\", icon: Trees, color: \"bg-gradient-to-r from-teal-400 to-cyan-500\" },\n  { id: \"flowers\", name: \"Flores\", icon: Flower, color: \"bg-gradient-to-r from-purple-400 to-pink-500\" },\n  { id: \"medicinal\", name: \"Medicinais\", icon: Pill, color: \"bg-gradient-to-r from-blue-400 to-indigo-500\" },\n  { id: \"grains\", name: \"Grãos\", icon: Wheat, color: \"bg-gradient-to-r from-amber-400 to-yellow-500\" },\n  { id: \"roots\", name: \"Raízes\", icon: Carrot, color: \"bg-gradient-to-r from-orange-400 to-red-500\" },\n  { id: \"shrubs\", name: \"Arbustos\", icon: Trees, color: \"bg-gradient-to-r from-emerald-500 to-green-600\" },\n  { id: \"cover_crops\", name: \"Adubação Verde\", icon: Sprout, color: \"bg-gradient-to-r from-lime-400 to-green-500\" },\n] as const;\n\n// Consolidated and Enhanced Plants Data\nconst PLANTS_DATA: PlantType[] = [\n  // Trees (Árvores)\n  {\n    id: \"tree-1\",\n    name: \"Eucalipto\",\n    category: \"trees\",\n    spacing: \"3x3m\",\n    color: \"#047857\",\n    icon: \"🌳\",\n    description: \"Árvore de crescimento rápido, usada para madeira e quebra-vento\",\n  },\n  {\n    id: \"tree-2\",\n    name: \"Ipê Amarelo\",\n    category: \"trees\",\n    spacing: \"5x5m\",\n    color: \"#fbbf24\",\n    icon: \"🌳\",\n    description: \"Árvore nativa ornamental com flores amarelas\",\n  },\n  {\n    id: \"tree-3\",\n    name: \"Pau-Brasil\",\n    category: \"trees\",\n    spacing: \"4x4m\",\n    color: \"#b91c1c\",\n    icon: \"🌳\",\n    description: \"Árvore nativa símbolo do Brasil\",\n  },\n  {\n    id: \"tree-4\",\n    name: \"Jatobá\",\n    category: \"trees\",\n    spacing: \"6x6m\",\n    color: \"#92400e\",\n    icon: \"🌳\",\n    description: \"Árvore nativa de madeira nobre\",\n  },\n  {\n    id: \"tree-5\",\n    name: \"Cedro\",\n    category: \"trees\",\n    spacing: \"5x5m\",\n    color: \"#7c2d12\",\n    icon: \"🌲\",\n    description: \"Árvore de madeira aromática e resistente\",\n  },\n\n  // Fruit Trees (Frutíferas)\n  {\n    id: \"fruit-1\",\n    name: \"Abacateiro\",\n    category: \"fruits\",\n    spacing: \"8x8m\",\n    color: \"#65a30d\",\n    icon: \"🥑\",\n    description: \"Árvore frutífera de abacate\",\n  },\n  {\n    id: \"fruit-2\",\n    name: \"Mangueira\",\n    category: \"fruits\",\n    spacing: \"10x10m\",\n    color: \"#facc15\",\n    icon: \"🥭\",\n    description: \"Árvore frutífera tropical de manga\",\n  },\n  {\n    id: \"fruit-3\",\n    name: \"Laranjeira\",\n    category: \"fruits\",\n    spacing: \"4x4m\",\n    color: \"#fb923c\",\n    icon: \"🍊\",\n    description: \"Árvore cítrica produtora de laranjas\",\n  },\n  {\n    id: \"fruit-4\",\n    name: \"Limoeiro\",\n    category: \"fruits\",\n    spacing: \"3x3m\",\n    color: \"#fde047\",\n    icon: \"🍋\",\n    description: \"Árvore cítrica produtora de limões\",\n  },\n  {\n    id: \"fruit-5\",\n    name: \"Bananeira\",\n    category: \"fruits\",\n    spacing: \"3x3m\",\n    color: \"#facc15\",\n    icon: \"🍌\",\n    description: \"Planta tropical produtora de bananas\",\n  },\n  {\n    id: \"fruit-6\",\n    name: \"Mamoeiro\",\n    category: \"fruits\",\n    spacing: \"2x2m\",\n    color: \"#fb923c\",\n    icon: \"🍈\",\n    description: \"Árvore de crescimento rápido produtora de mamão\",\n  },\n  {\n    id: \"fruit-7\",\n    name: \"Goiabeira\",\n    category: \"fruits\",\n    spacing: \"5x5m\",\n    color: \"#ec4899\",\n    icon: \"🍐\",\n    description: \"Árvore frutífera tropical de goiaba\",\n  },\n  {\n    id: \"fruit-8\",\n    name: \"Aceroleira\",\n    category: \"fruits\",\n    spacing: \"3x3m\",\n    color: \"#dc2626\",\n    icon: \"🍒\",\n    description: \"Arbusto produtor de acerola rica em vitamina C\",\n  },\n  {\n    id: \"fruit-9\",\n    name: \"Jabuticabeira\",\n    category: \"fruits\",\n    spacing: \"4x4m\",\n    color: \"#4c1d95\",\n    icon: \"🫐\",\n    description: \"Árvore nativa com frutos no tronco\",\n  },\n  {\n    id: \"fruit-10\",\n    name: \"Pitangueira\",\n    category: \"fruits\",\n    spacing: \"3x3m\",\n    color: \"#dc2626\",\n    icon: \"🍒\",\n    description: \"Arbusto nativo com frutos vermelhos\",\n  },\n  {\n    id: \"fruit-11\",\n    name: \"Morango\",\n    category: \"fruits\",\n    spacing: \"30x25cm\",\n    color: \"#dc2626\",\n    icon: \"🍓\",\n    description: \"Fruta rasteira doce\"\n  },\n  {\n    id: \"fruit-12\",\n    name: \"Limão\",\n    category: \"fruits\",\n    spacing: \"5x5m\",\n    color: \"#eab308\",\n    icon: \"🍋\",\n    description: \"Cítrico ácido versátil\"\n  },\n\n  // Vegetables (Hortaliças)\n  {\n    id: \"veg-1\",\n    name: \"Tomate\",\n    category: \"vegetables\",\n    spacing: \"60x40cm\",\n    color: \"#ef4444\",\n    icon: \"🍅\",\n    description: \"Rico em licopeno\"\n  },\n  {\n    id: \"veg-2\",\n    name: \"Alface\",\n    category: \"vegetables\",\n    spacing: \"30x30cm\",\n    color: \"#22c55e\",\n    icon: \"🥬\",\n    description: \"Folhosa de crescimento rápido\"\n  },\n  {\n    id: \"veg-3\",\n    name: \"Abóbora\",\n    category: \"vegetables\",\n    spacing: \"2x2m\",\n    color: \"#f97316\",\n    icon: \"🎃\",\n    description: \"Trepadeira produtiva\"\n  },\n  {\n    id: \"veg-4\",\n    name: \"Cebola\",\n    category: \"vegetables\",\n    spacing: \"15x10cm\",\n    color: \"#e11d48\",\n    icon: \"🧅\",\n    description: \"Bulbo aromático essencial\"\n  },\n  {\n    id: \"veg-5\",\n    name: \"Pimentão\",\n    category: \"vegetables\",\n    spacing: \"50x40cm\",\n    color: \"#ef4444\",\n    icon: \"🫑\",\n    description: \"Fruto rico em vitamina C\"\n  },\n\n  // Roots (Raízes)\n  {\n    id: \"root-1\",\n    name: \"Cenoura\",\n    category: \"roots\",\n    spacing: \"20x15cm\",\n    color: \"#f97316\",\n    icon: \"🥕\",\n    description: \"Rica em betacaroteno\"\n  },\n  {\n    id: \"root-2\",\n    name: \"Batata\",\n    category: \"roots\",\n    spacing: \"40x30cm\",\n    color: \"#a3a3a3\",\n    icon: \"🥔\",\n    description: \"Tubérculo energético\"\n  },\n  {\n    id: \"root-3\",\n    name: \"Mandioca\",\n    category: \"roots\",\n    spacing: \"1x1m\",\n    color: \"#a16207\",\n    icon: \"🥔\",\n    description: \"Raiz rica em carboidratos\"\n  },\n\n  // Grains (Grãos)\n  {\n    id: \"grain-1\",\n    name: \"Milho\",\n    category: \"grains\",\n    spacing: \"80x30cm\",\n    color: \"#eab308\",\n    icon: \"🌽\",\n    description: \"Cereal básico nutritivo\"\n  },\n  {\n    id: \"grain-2\",\n    name: \"Feijão\",\n    category: \"grains\",\n    spacing: \"30x10cm\",\n    color: \"#7c2d12\",\n    icon: \"🫘\",\n    description: \"Leguminosa rica em proteína\"\n  },\n  {\n    id: \"grain-3\",\n    name: \"Arroz\",\n    category: \"grains\",\n    spacing: \"20x20cm\",\n    color: \"#f5f5f4\",\n    icon: \"🌾\",\n    description: \"Cereal aquático básico\"\n  },\n\n  // Medicinal (Medicinais)\n  {\n    id: \"med-1\",\n    name: \"Hortelã\",\n    category: \"medicinal\",\n    spacing: \"25x25cm\",\n    color: \"#10b981\",\n    icon: \"🌿\",\n    description: \"Planta aromática medicinal\"\n  },\n  {\n    id: \"med-2\",\n    name: \"Alecrim\",\n    category: \"medicinal\",\n    spacing: \"50x50cm\",\n    color: \"#059669\",\n    icon: \"🌿\",\n    description: \"Erva aromática antioxidante\"\n  },\n  {\n    id: \"med-3\",\n    name: \"Camomila\",\n    category: \"medicinal\",\n    spacing: \"20x20cm\",\n    color: \"#fbbf24\",\n    icon: \"🌼\",\n    description: \"Flor calmante medicinal\"\n  },\n  {\n    id: \"med-4\",\n    name: \"Gengibre\",\n    category: \"medicinal\",\n    spacing: \"40x30cm\",\n    color: \"#d97706\",\n    icon: \"🫚\",\n    description: \"Rizoma anti-inflamatório\"\n  },\n];\n\ninterface PlantLibraryProps {\n  selectedPlant: PlantType | null;\n  onPlantSelect: (plant: PlantType | null) => void;\n}\n\nconst PlantCard = memo(({ plant, isSelected, onSelect }: {\n  plant: PlantType;\n  isSelected: boolean;\n  onSelect: (plant: PlantType) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(plant);\n  }, [plant, onSelect]);\n\n  const handleDragStart = useCallback((e: React.DragEvent) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify(plant));\n    e.dataTransfer.effectAllowed = 'copy';\n  }, [plant]);\n\n  return (\n    <div\n      className={cn(\n        \"group relative overflow-hidden rounded-2xl border backdrop-blur-xl transition-all duration-300 cursor-pointer\",\n        \"bg-white/70 dark:bg-gray-900/70 border-white/20 dark:border-gray-800/20\",\n        \"hover:bg-white/90 dark:hover:bg-gray-800/90 hover:scale-[1.02] hover:shadow-2xl hover:shadow-green-500/10\",\n        isSelected && \"bg-gradient-to-br from-green-50/90 to-emerald-50/90 dark:from-green-950/90 dark:to-emerald-950/90\",\n        isSelected && \"ring-2 ring-green-400/60 dark:ring-green-600/60 shadow-2xl shadow-green-500/20 scale-[1.02]\"\n      )}\n      onClick={handleClick}\n      draggable\n      onDragStart={handleDragStart}\n    >\n      {/* Glass morphism background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 to-transparent dark:from-gray-700/10 pointer-events-none\" />\n      \n      <div className=\"relative p-4\">\n        <div className=\"flex items-center gap-4\">\n          <div \n            className=\"flex items-center justify-center w-14 h-14 rounded-2xl text-xl shadow-lg transition-all duration-300 group-hover:scale-110\"\n            style={{ \n              backgroundColor: `${plant.color}15`,\n              boxShadow: `0 8px 32px ${plant.color}20`,\n              border: `1px solid ${plant.color}20`\n            }}\n          >\n            {plant.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100 truncate\">\n                {plant.name}\n              </h3>\n              <Badge \n                variant=\"secondary\" \n                className=\"text-xs px-2 py-1 h-auto rounded-full bg-green-100/80 dark:bg-green-900/50 border-green-200/60 dark:border-green-800/60 backdrop-blur-sm\"\n              >\n                {PLANT_CATEGORIES.find(cat => cat.id === plant.category)?.name || plant.category}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400 truncate mb-2\">\n              {plant.description}\n            </p>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-500\">\n                Espaçamento: {plant.spacing}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Selection glow effect */}\n      {isSelected && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-green-400/5 to-emerald-400/10 rounded-2xl pointer-events-none\" />\n      )}\n    </div>\n  );\n});\n\nPlantCard.displayName = \"PlantCard\";\n\nconst CategoryButton = memo(({ category, isSelected, onSelect }: {\n  category: typeof PLANT_CATEGORIES[number];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(category.id);\n  }, [category.id, onSelect]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"h-11 px-4 text-xs font-semibold rounded-2xl transition-all duration-300 backdrop-blur-xl border\",\n        \"hover:scale-105 hover:shadow-lg\",\n        isSelected \n          ? `${category.color} text-white shadow-lg border-white/20 hover:shadow-xl` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n    >\n      <category.icon className=\"w-4 h-4 mr-2\" />\n      {category.name}\n    </Button>\n  );\n});\n\nCategoryButton.displayName = \"CategoryButton\";\n\nexport const PlantLibrary = memo(({ selectedPlant, onPlantSelect }: PlantLibraryProps) => {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const { searchTerm, setSearchTerm, searchResults } = useEnhancedSearch(PLANTS_DATA, {\n    searchFields: ['name', 'description'],\n    debounceMs: 200\n  });\n\n  const filteredPlants = useMemo(() => {\n    let plants = searchTerm ? searchResults : PLANTS_DATA;\n    \n    if (selectedCategory !== \"all\") {\n      plants = plants.filter(plant => plant.category === selectedCategory);\n    }\n    \n    return plants;\n  }, [searchTerm, searchResults, selectedCategory]);\n\n  const handlePlantSelect = useCallback((plant: PlantType) => {\n    onPlantSelect(selectedPlant?.id === plant.id ? null : plant);\n  }, [selectedPlant?.id, onPlantSelect]);\n\n  const memoizedCategories = useMemo(() => PLANT_CATEGORIES.map(category => (\n    <CategoryButton\n      key={category.id}\n      category={category}\n      isSelected={selectedCategory === category.id}\n      onSelect={setSelectedCategory}\n    />\n  )), [selectedCategory]);\n\n  const memoizedPlants = useMemo(() => filteredPlants.map(plant => (\n    <PlantCard\n      key={plant.id}\n      plant={plant}\n      isSelected={selectedPlant?.id === plant.id}\n      onSelect={handlePlantSelect}\n    />\n  )), [filteredPlants, selectedPlant?.id, handlePlantSelect]);\n\n  return (\n    <div className=\"flex flex-col h-full bg-gradient-to-br from-green-50/50 via-white/50 to-emerald-50/50 dark:from-gray-900/50 dark:via-gray-900/50 dark:to-gray-800/50\">\n      {/* Header with Glass Morphism */}\n      <div className=\"sticky top-0 z-20 p-4 border-b border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-2xl bg-gradient-to-br from-green-400 to-emerald-500 flex items-center justify-center shadow-lg\">\n              <Leaf className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent dark:from-green-400 dark:to-emerald-400\">\n              Biblioteca de Plantas\n            </h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse shadow-lg shadow-green-400/50\"></div>\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 font-medium\">{PLANTS_DATA.length} plantas</span>\n          </div>\n        </div>\n        \n        {/* Search with Glass Morphism */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <Input\n            placeholder=\"Buscar plantas...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-12 h-12 text-sm rounded-2xl bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl border-white/20 dark:border-gray-700/20 focus:border-green-400/60 dark:focus:border-green-600/60 focus:ring-2 focus:ring-green-200/50 dark:focus:ring-green-800/50 transition-all duration-200\"\n          />\n        </div>\n\n        {/* Categories */}\n        <div className=\"flex flex-wrap gap-2\">\n          {memoizedCategories}\n        </div>\n      </div>\n\n      {/* Virtualized Plants List */}\n      <div className=\"flex-1 overflow-hidden\">\n        <AutoSizer>\n          {({ height, width }) => (\n            <List\n              height={height}\n              width={width}\n              rowCount={filteredPlants.length}\n              rowHeight={80} // Adjust based on card height\n              rowRenderer={({ index, key, style }) => {\n                const plant = filteredPlants[index];\n                return (\n                  <div key={key} style={style} className=\"px-4\">\n                    <PlantCard\n                      plant={plant}\n                      isSelected={selectedPlant?.id === plant.id}\n                      onSelect={handlePlantSelect}\n                    />\n                  </div>\n                );\n              }}\n              noRowsRenderer={() => (\n                <div className=\"text-center py-16\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-green-100/80 to-emerald-100/80 dark:from-green-900/20 dark:to-emerald-900/20 flex items-center justify-center backdrop-blur-xl border border-white/20 dark:border-gray-700/20\">\n                    <Leaf className=\"w-12 h-12 text-green-500 dark:text-green-400\" />\n                  </div>\n                  <p className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">\n                    Nenhuma planta encontrada\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Tente ajustar os filtros ou buscar por outro termo\n                  </p>\n                </div>\n              )}\n            />\n          )}\n        </AutoSizer>\n      </div>\n\n      {/* Selected Plant Info with Glass Morphism */}\n      {selectedPlant && (\n        <div className=\"p-4 border-t border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n          <div className=\"flex items-center gap-4 p-3 rounded-2xl bg-gradient-to-r from-green-50/60 to-emerald-50/60 dark:from-green-950/60 dark:to-emerald-950/60 border border-white/20 dark:border-gray-700/20\">\n            <div \n              className=\"w-12 h-12 rounded-2xl flex items-center justify-center text-lg shadow-lg\"\n              style={{ \n                backgroundColor: `${selectedPlant.color}15`,\n                boxShadow: `0 4px 16px ${selectedPlant.color}20`,\n                border: `1px solid ${selectedPlant.color}20`\n              }}\n            >\n              {selectedPlant.icon}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\">\n                {selectedPlant.name}\n              </h3>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                {selectedPlant.description}\n              </p>\n              <p className=\"text-xs font-medium text-green-600 dark:text-green-400\">\n                Espaçamento: {selectedPlant.spacing}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nPlantLibrary.displayName = \"PlantLibrary\";",
      "size_bytes": 18872
    },
    "client/src/components/StructureLibrary.tsx": {
      "content": "import React, { useState, useMemo, useCallback } from 'react';\nimport { Structure as StructureType } from '@/types/canvasTypes';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Search, Building, Home, Zap, Recycle, TreePine, Route, Settings, Droplets } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Consolidated and Enhanced Structures Data\nconst STRUCTURES_DATA: StructureType[] = [\n  // Água (Water structures)\n  {\n    id: 'cisterna',\n    name: 'Cisterna',\n    category: 'Água',\n    icon: '💧',\n    color: '#4A90E2',\n    size: { width: 3, height: 3 },\n    description: 'Cisterna para captação e armazenamento de água da chuva'\n  },\n  {\n    id: 'caixa-dagua',\n    name: 'Caixa d\\'água',\n    category: 'Água',\n    icon: '🚰',\n    color: '#5BA3F5',\n    size: { width: 2, height: 2 },\n    description: 'Reservatório elevado para distribuição de água'\n  },\n  {\n    id: 'poco',\n    name: 'Poço',\n    category: 'Água',\n    icon: '🕳️',\n    color: '#2E86DE',\n    size: { width: 1.5, height: 1.5 },\n    description: 'Poço artesiano ou cacimba para captação de água subterrânea'\n  },\n  {\n    id: 'lago-artificial',\n    name: 'Lago artificial',\n    category: 'Água',\n    icon: '🏞️',\n    color: '#3498DB',\n    size: { width: 10, height: 8 },\n    description: 'Lago artificial para irrigação e criação de peixes'\n  },\n  \n  // Edificações (Buildings)\n  {\n    id: 'casa-principal',\n    name: 'Casa principal',\n    category: 'Edificações',\n    icon: '🏠',\n    color: '#8B6F47',\n    size: { width: 8, height: 10 },\n    description: 'Residência principal da propriedade'\n  },\n  {\n    id: 'galpao',\n    name: 'Galpão',\n    category: 'Edificações',\n    icon: '🏚️',\n    color: '#A0826D',\n    size: { width: 12, height: 8 },\n    description: 'Galpão para armazenamento de equipamentos e produção'\n  },\n  {\n    id: 'estufa',\n    name: 'Estufa',\n    category: 'Edificações',\n    icon: '🏭',\n    color: '#90EE90',\n    size: { width: 6, height: 4 },\n    description: 'Estufa para cultivo protegido'\n  },\n  {\n    id: 'galinheiro',\n    name: 'Galinheiro',\n    category: 'Edificações',\n    icon: '🐓',\n    color: '#CD853F',\n    size: { width: 4, height: 3 },\n    description: 'Estrutura para criação de galinhas'\n  },\n  {\n    id: 'celeiro',\n    name: 'Celeiro',\n    category: 'Edificações',\n    icon: '🏘️',\n    color: '#D2691E',\n    size: { width: 6, height: 6 },\n    description: 'Armazém para grãos e produtos agrícolas'\n  },\n  {\n    id: 'barracao',\n    name: 'Barracão',\n    category: 'Edificações',\n    icon: '🏭',\n    color: '#78716c',\n    size: { width: 6, height: 4 },\n    description: 'Armazenamento de ferramentas e equipamentos'\n  },\n  \n  // Energia (Energy)\n  {\n    id: 'painel-solar',\n    name: 'Painel solar',\n    category: 'Energia',\n    icon: '☀️',\n    color: '#FFD700',\n    size: { width: 2, height: 1 },\n    description: 'Painel fotovoltaico para geração de energia solar'\n  },\n  {\n    id: 'turbina-eolica',\n    name: 'Turbina eólica',\n    category: 'Energia',\n    icon: '💨',\n    color: '#87CEEB',\n    size: { width: 1, height: 8 },\n    description: 'Turbina para geração de energia eólica'\n  },\n  {\n    id: 'biodigestor',\n    name: 'Biodigestor',\n    category: 'Energia',\n    icon: '♻️',\n    color: '#228B22',\n    size: { width: 3, height: 3 },\n    description: 'Sistema para produção de biogás e biofertilizante'\n  },\n  \n  // Compostagem (Composting)\n  {\n    id: 'composteira',\n    name: 'Composteira',\n    category: 'Compostagem',\n    icon: '🌱',\n    color: '#8B4513',\n    size: { width: 2, height: 2 },\n    description: 'Estrutura para compostagem de resíduos orgânicos'\n  },\n  {\n    id: 'minhocario',\n    name: 'Minhocário',\n    category: 'Compostagem',\n    icon: '🪱',\n    color: '#654321',\n    size: { width: 1.5, height: 1.5 },\n    description: 'Sistema de vermicompostagem'\n  },\n  {\n    id: 'leira-compostagem',\n    name: 'Leira de compostagem',\n    category: 'Compostagem',\n    icon: '🏔️',\n    color: '#8B7355',\n    size: { width: 4, height: 1.5 },\n    description: 'Leira para compostagem em grande escala'\n  },\n  \n  // Cercas e Divisórias (Fences and Divisions)\n  {\n    id: 'cerca-viva',\n    name: 'Cerca viva',\n    category: 'Cercas',\n    icon: '🌳',\n    color: '#228B22',\n    size: { width: 0.5, height: 2 },\n    description: 'Cerca viva com plantas nativas'\n  },\n  {\n    id: 'cerca-madeira',\n    name: 'Cerca de madeira',\n    category: 'Cercas',\n    icon: '🪵',\n    color: '#8B4513',\n    size: { width: 0.3, height: 1.5 },\n    description: 'Cerca tradicional de madeira'\n  },\n  {\n    id: 'cerca-eletrica',\n    name: 'Cerca Elétrica',\n    category: 'Cercas',\n    icon: '⚡',\n    color: '#fbbf24',\n    size: { width: 0.3, height: 1.5 },\n    description: 'Cerca eletrificada para proteção'\n  },\n  {\n    id: 'portao',\n    name: 'Portão',\n    category: 'Cercas',\n    icon: '🚪',\n    color: '#696969',\n    size: { width: 3, height: 2 },\n    description: 'Portão de entrada'\n  },\n  \n  // Caminhos (Paths)\n  {\n    id: 'trilha-pedra',\n    name: 'Trilha de pedra',\n    category: 'Caminhos',\n    icon: '🪨',\n    color: '#808080',\n    size: { width: 1, height: 1 },\n    description: 'Caminho com pedras naturais'\n  },\n  {\n    id: 'caminho-madeira',\n    name: 'Caminho de madeira',\n    category: 'Caminhos',\n    icon: '🪜',\n    color: '#A0522D',\n    size: { width: 1, height: 1 },\n    description: 'Deck ou caminho de madeira'\n  },\n  {\n    id: 'estrada-terra',\n    name: 'Estrada de terra',\n    category: 'Caminhos',\n    icon: '🛤️',\n    color: '#D2691E',\n    size: { width: 3, height: 1 },\n    description: 'Estrada de terra batida'\n  },\n  \n  // Infraestrutura (Infrastructure)\n  {\n    id: 'ponte',\n    name: 'Ponte',\n    category: 'Infraestrutura',\n    icon: '🌉',\n    color: '#708090',\n    size: { width: 2, height: 4 },\n    description: 'Ponte sobre curso d\\'água'\n  },\n  {\n    id: 'pergolado',\n    name: 'Pergolado',\n    category: 'Infraestrutura',\n    icon: '🏛️',\n    color: '#8B7D6B',\n    size: { width: 4, height: 3 },\n    description: 'Estrutura de sombreamento'\n  },\n  {\n    id: 'banco-jardim',\n    name: 'Banco de jardim',\n    category: 'Infraestrutura',\n    icon: '🪑',\n    color: '#8B4513',\n    size: { width: 1.5, height: 0.5 },\n    description: 'Banco para área de descanso'\n  },\n  {\n    id: 'forno-lenha',\n    name: 'Forno a lenha',\n    category: 'Infraestrutura',\n    icon: '🔥',\n    color: '#B22222',\n    size: { width: 2, height: 2 },\n    description: 'Forno tradicional a lenha'\n  },\n  \n  // Irrigação (Irrigation)\n  {\n    id: 'aspersor',\n    name: 'Aspersor',\n    category: 'Irrigação',\n    icon: '💦',\n    color: '#4169E1',\n    size: { width: 0.5, height: 0.5 },\n    description: 'Aspersor para irrigação'\n  },\n  {\n    id: 'gotejador',\n    name: 'Gotejador',\n    category: 'Irrigação',\n    icon: '💧',\n    color: '#1E90FF',\n    size: { width: 0.3, height: 0.3 },\n    description: 'Sistema de irrigação por gotejamento'\n  },\n  {\n    id: 'canal-irrigacao',\n    name: 'Canal de irrigação',\n    category: 'Irrigação',\n    icon: '〰️',\n    color: '#4682B4',\n    size: { width: 0.5, height: 10 },\n    description: 'Canal para condução de água'\n  },\n  {\n    id: 'valvula-irrigacao',\n    name: 'Válvula de irrigação',\n    category: 'Irrigação',\n    icon: '🔧',\n    color: '#696969',\n    size: { width: 0.5, height: 0.5 },\n    description: 'Válvula de controle de irrigação'\n  }\n];\n\n// Enhanced categories with colors and icons\nconst STRUCTURE_CATEGORIES = [\n  { id: 'all', name: 'Todas', icon: Building, color: 'bg-gradient-to-r from-slate-400 to-gray-500' },\n  { id: 'Água', name: 'Água', icon: Droplets, color: 'bg-gradient-to-r from-blue-400 to-cyan-500' },\n  { id: 'Edificações', name: 'Edificações', icon: Home, color: 'bg-gradient-to-r from-amber-400 to-orange-500' },\n  { id: 'Energia', name: 'Energia', icon: Zap, color: 'bg-gradient-to-r from-yellow-400 to-orange-500' },\n  { id: 'Compostagem', name: 'Compostagem', icon: Recycle, color: 'bg-gradient-to-r from-green-400 to-emerald-500' },\n  { id: 'Cercas', name: 'Cercas', icon: TreePine, color: 'bg-gradient-to-r from-green-500 to-emerald-600' },\n  { id: 'Caminhos', name: 'Caminhos', icon: Route, color: 'bg-gradient-to-r from-stone-400 to-slate-500' },\n  { id: 'Infraestrutura', name: 'Infraestrutura', icon: Settings, color: 'bg-gradient-to-r from-purple-400 to-pink-500' },\n  { id: 'Irrigação', name: 'Irrigação', icon: Droplets, color: 'bg-gradient-to-r from-blue-500 to-indigo-600' },\n] as const;\n\ninterface StructureLibraryProps {\n  selectedStructure?: StructureType | null;\n  onStructureSelect: (structure: StructureType) => void;\n  className?: string;\n}\n\nconst StructureCard: React.FC<{\n  structure: StructureType;\n  isSelected: boolean;\n  onClick: () => void;\n}> = ({ structure, isSelected, onClick }) => {\n  const handleDragStart = useCallback((e: React.DragEvent) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify(structure));\n    e.dataTransfer.effectAllowed = 'copy';\n  }, [structure]);\n\n  return (\n    <Card \n      className={cn(\n        \"group relative overflow-hidden rounded-2xl border backdrop-blur-xl transition-all duration-300 cursor-pointer\",\n        \"bg-white/70 dark:bg-gray-900/70 border-white/20 dark:border-gray-800/20\",\n        \"hover:bg-white/90 dark:hover:bg-gray-800/90 hover:scale-[1.02] hover:shadow-2xl hover:shadow-blue-500/10\",\n        isSelected && \"bg-gradient-to-br from-blue-50/90 to-indigo-50/90 dark:from-blue-950/90 dark:to-indigo-950/90\",\n        isSelected && \"ring-2 ring-blue-400/60 dark:ring-blue-600/60 shadow-2xl shadow-blue-500/20 scale-[1.02]\"\n      )}\n      onClick={onClick}\n      draggable\n      onDragStart={handleDragStart}\n    >\n      {/* Glass morphism background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 to-transparent dark:from-gray-700/10 pointer-events-none\" />\n      \n      <CardContent className=\"relative p-4\">\n        <div className=\"flex items-center gap-4\">\n          <div \n            className=\"w-14 h-14 rounded-2xl flex items-center justify-center text-white font-medium text-lg shrink-0 shadow-lg transition-all duration-300 group-hover:scale-110\"\n            style={{ \n              backgroundColor: structure.color,\n              boxShadow: `0 8px 32px ${structure.color}30`,\n              border: `1px solid ${structure.color}20`\n            }}\n          >\n            {structure.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100 truncate\">\n                {structure.name}\n              </h3>\n              <Badge \n                variant=\"secondary\" \n                className=\"text-xs px-2 py-1 h-auto rounded-full bg-blue-100/80 dark:bg-blue-900/50 border-blue-200/60 dark:border-blue-800/60 backdrop-blur-sm\"\n              >\n                {structure.category}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400 line-clamp-2 mb-2\">\n              {structure.description}\n            </p>\n            <div className=\"flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400\">\n              <span className=\"font-medium\">\n                {structure.size.width}m × {structure.size.height}m\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      \n      {/* Selection glow effect */}\n      {isSelected && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400/5 to-indigo-400/10 rounded-2xl pointer-events-none\" />\n      )}\n    </Card>\n  );\n};\n\nconst CategoryButton = ({ category, isSelected, onSelect }: {\n  category: typeof STRUCTURE_CATEGORIES[number];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(category.id);\n  }, [category.id, onSelect]);\n\n  const count = useMemo(() => {\n    if (category.id === 'all') return STRUCTURES_DATA.length;\n    return STRUCTURES_DATA.filter(s => s.category === category.id).length;\n  }, [category.id]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"h-11 px-4 text-xs font-semibold rounded-2xl transition-all duration-300 backdrop-blur-xl border\",\n        \"hover:scale-105 hover:shadow-lg\",\n        isSelected \n          ? `${category.color} text-white shadow-lg border-white/20 hover:shadow-xl` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n    >\n      <category.icon className=\"w-4 h-4 mr-2\" />\n      {category.name}\n      {count > 0 && (\n        <Badge variant=\"secondary\" className=\"ml-2 px-1.5 py-0.5 text-[10px] h-5 rounded-full bg-white/20 border-white/20\">\n          {count}\n        </Badge>\n      )}\n    </Button>\n  );\n};\n\nexport const StructureLibrary: React.FC<StructureLibraryProps> = ({\n  selectedStructure,\n  onStructureSelect,\n  className\n}) => {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const searchResults = useMemo(() => {\n    if (!searchTerm) return STRUCTURES_DATA;\n    \n    const term = searchTerm.toLowerCase();\n    return STRUCTURES_DATA.filter(structure => \n      structure.name.toLowerCase().includes(term) ||\n      structure.description.toLowerCase().includes(term) ||\n      structure.category.toLowerCase().includes(term)\n    );\n  }, [searchTerm]);\n  \n  const isSearching = searchTerm.length > 0;\n\n  const filteredStructures = useMemo(() => {\n    let filtered = searchResults;\n    \n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(structure => structure.category === selectedCategory);\n    }\n    \n    return filtered;\n  }, [searchResults, selectedCategory]);\n\n  const handleStructureClick = useCallback((structure: StructureType) => {\n    onStructureSelect(structure);\n  }, [onStructureSelect]);\n\n  const handleCategoryChange = useCallback((category: string) => {\n    setSelectedCategory(category);\n  }, []);\n\n  return (\n    <div className={cn(\"flex flex-col h-full bg-gradient-to-br from-blue-50/50 via-white/50 to-indigo-50/50 dark:from-gray-900/50 dark:via-gray-900/50 dark:to-gray-800/50\", className)}>\n      {/* Header with Glass Morphism */}\n      <div className=\"sticky top-0 z-20 p-4 border-b border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-2xl bg-gradient-to-br from-blue-400 to-indigo-500 flex items-center justify-center shadow-lg\">\n              <Building className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent dark:from-blue-400 dark:to-indigo-400\">\n              Biblioteca de Estruturas\n            </h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse shadow-lg shadow-blue-400/50\"></div>\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 font-medium\">{STRUCTURES_DATA.length} estruturas</span>\n          </div>\n        </div>\n        \n        {/* Search with Glass Morphism */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Buscar estruturas...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-12 h-12 text-sm rounded-2xl bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl border-white/20 dark:border-gray-700/20 focus:border-blue-400/60 dark:focus:border-blue-600/60 focus:ring-2 focus:ring-blue-200/50 dark:focus:ring-blue-800/50 transition-all duration-200\"\n          />\n        </div>\n\n        {/* Categories */}\n        <div className=\"flex flex-wrap gap-2\">\n          {STRUCTURE_CATEGORIES.map(category => (\n            <CategoryButton\n              key={category.id}\n              category={category}\n              isSelected={selectedCategory === category.id}\n              onSelect={handleCategoryChange}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Structure Grid */}\n      <div className=\"flex-1\">\n        <ScrollArea className=\"h-full overflow-y-auto\">\n          <div className=\"p-4 space-y-3\">\n            {filteredStructures.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <div className=\"w-24 h-24 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-blue-100/80 to-indigo-100/80 dark:from-blue-900/20 dark:to-indigo-900/20 flex items-center justify-center backdrop-blur-xl border border-white/20 dark:border-gray-700/20\">\n                  <Building className=\"w-12 h-12 text-blue-500 dark:text-blue-400\" />\n                </div>\n                <p className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">\n                  {isSearching ? 'Nenhuma estrutura encontrada' : 'Nenhuma estrutura disponível'}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {isSearching ? 'Tente ajustar os filtros ou buscar por outro termo' : 'Adicione estruturas para começar'}\n                </p>\n              </div>\n            ) : (\n              filteredStructures.map(structure => (\n                <StructureCard\n                  key={structure.id}\n                  structure={structure}\n                  isSelected={selectedStructure?.id === structure.id}\n                  onClick={() => handleStructureClick(structure)}\n                />\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Selected Structure Info with Glass Morphism */}\n      {selectedStructure && (\n        <div className=\"p-4 border-t border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n          <div className=\"flex items-center gap-4 p-3 rounded-2xl bg-gradient-to-r from-blue-50/60 to-indigo-50/60 dark:from-blue-950/60 dark:to-indigo-950/60 border border-white/20 dark:border-gray-700/20\">\n            <div \n              className=\"w-12 h-12 rounded-2xl flex items-center justify-center text-white font-medium text-lg shadow-lg\"\n              style={{ \n                backgroundColor: selectedStructure.color,\n                boxShadow: `0 4px 16px ${selectedStructure.color}30`,\n                border: `1px solid ${selectedStructure.color}20`\n              }}\n            >\n              {selectedStructure.icon}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\">\n                {selectedStructure.name}\n              </h3>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                {selectedStructure.description}\n              </p>\n              <div className=\"flex items-center gap-2 text-xs\">\n                <span className=\"font-medium text-blue-600 dark:text-blue-400\">\n                  Dimensões: {selectedStructure.size.width}m × {selectedStructure.size.height}m\n                </span>\n                <span className=\"text-gray-500\">•</span>\n                <span className=\"font-medium text-blue-600 dark:text-blue-400\">\n                  Categoria: {selectedStructure.category}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StructureLibrary;",
      "size_bytes": 20103
    },
    "client/src/components/TerrainLibrary.tsx": {
      "content": "import React, { useState, useMemo, memo, useCallback } from \"react\";\nimport { Search, Mountain, Droplets, Wheat, Trees, Route, Square, Shield, Sparkles } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\nimport { useEnhancedSearch } from \"@/hooks/useEnhancedSearch\";\nimport { Terrain as TerrainType } from \"@/types/canvasTypes\";\n\n// Consolidated Terrain Categories with Modern Icons\nconst TERRAIN_CATEGORIES = [\n  { id: \"all\", name: \"Todos\", icon: Mountain, color: \"bg-gradient-to-r from-slate-400 to-gray-500\" },\n  { id: \"cultivation\", name: \"Cultivo\", icon: Wheat, color: \"bg-gradient-to-r from-amber-400 to-orange-500\" },\n  { id: \"water\", name: \"Água\", icon: Droplets, color: \"bg-gradient-to-r from-blue-400 to-cyan-500\" },\n  { id: \"natural\", name: \"Natural\", icon: Trees, color: \"bg-gradient-to-r from-green-400 to-emerald-500\" },\n  { id: \"paths\", name: \"Caminhos\", icon: Route, color: \"bg-gradient-to-r from-stone-400 to-slate-500\" },\n  { id: \"zones\", name: \"Zonas\", icon: Square, color: \"bg-gradient-to-r from-purple-400 to-pink-500\" },\n  { id: \"protection\", name: \"Proteção\", icon: Shield, color: \"bg-gradient-to-r from-red-400 to-rose-500\" },\n  { id: \"favorites\", name: \"Favoritos\", icon: Sparkles, color: \"bg-gradient-to-r from-yellow-400 to-orange-500\" },\n] as const;\n\n// Consolidated and Enhanced Terrain Data\nconst TERRAIN_DATA: TerrainType[] = [\n  // Cultivo (Cultivation)\n  {\n    id: \"campo-cultivo\",\n    name: \"Campo de cultivo\",\n    category: \"cultivation\",\n    color: \"#8B4513\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"🌾\",\n    description: \"Área preparada para plantio geral\"\n  },\n  {\n    id: \"canteiro-elevado\",\n    name: \"Canteiro elevado\",\n    category: \"cultivation\",\n    color: \"#654321\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"📦\",\n    description: \"Canteiro elevado para hortaliças e ervas\"\n  },\n  {\n    id: \"horta-mandala\",\n    name: \"Horta mandala\",\n    category: \"cultivation\",\n    color: \"#228B22\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"🌸\",\n    description: \"Design circular permacultural\"\n  },\n  {\n    id: \"espiral-ervas\",\n    name: \"Espiral de ervas\",\n    category: \"cultivation\",\n    color: \"#32CD32\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"🌿\",\n    description: \"Estrutura espiral para ervas aromáticas\"\n  },\n  {\n    id: \"terracos\",\n    name: \"Terraços\",\n    category: \"cultivation\",\n    color: \"#8B7D6B\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"🏔️\",\n    description: \"Terraços para cultivo em declive\"\n  },\n  {\n    id: \"leiras\",\n    name: \"Leiras\",\n    category: \"cultivation\",\n    color: \"#A0522D\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"cultivation\",\n    icon: \"🟫\",\n    description: \"Leiras elevadas para drenagem\"\n  },\n\n  // Água (Water)\n  {\n    id: \"lago\",\n    name: \"Lago\",\n    category: \"water\",\n    color: \"#1E90FF\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"🌊\",\n    description: \"Corpo d'água natural ou artificial\"\n  },\n  {\n    id: \"brejo\",\n    name: \"Brejo\",\n    category: \"water\",\n    color: \"#4682B4\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"🏞️\",\n    description: \"Área alagada para filtragem natural\"\n  },\n  {\n    id: \"rio\",\n    name: \"Rio\",\n    category: \"water\",\n    color: \"#4169E1\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"🏞️\",\n    description: \"Curso d'água corrente\"\n  },\n  {\n    id: \"acude\",\n    name: \"Açude\",\n    category: \"water\",\n    color: \"#5F9EA0\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"🛁\",\n    description: \"Reservatório de água\"\n  },\n  {\n    id: \"bacia-retencao\",\n    name: \"Bacia de retenção\",\n    category: \"water\",\n    color: \"#6495ED\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"💧\",\n    description: \"Área para captação de água pluvial\"\n  },\n  {\n    id: \"swale\",\n    name: \"Swale\",\n    category: \"water\",\n    color: \"#87CEEB\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"〰️\",\n    description: \"Valeta de infiltração permacultural\"\n  },\n  {\n    id: \"poco-artesiano\",\n    name: \"Poço Artesiano\",\n    category: \"water\",\n    color: \"#1e40af\",\n    pattern: \"solid\",\n    size: \"1x1m\",\n    texture: \"water\",\n    icon: \"🕳️\",\n    description: \"Fonte de água subterrânea\"\n  },\n  {\n    id: \"reservatorio\",\n    name: \"Reservatório\",\n    category: \"water\",\n    color: \"#0ea5e9\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"water\",\n    icon: \"🛁\",\n    description: \"Reserva de água para irrigação\"\n  },\n\n  // Natural (Natural areas)\n  {\n    id: \"mata-nativa\",\n    name: \"Mata nativa\",\n    category: \"natural\",\n    color: \"#006400\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"forest\",\n    icon: \"🌳\",\n    description: \"Floresta nativa preservada\"\n  },\n  {\n    id: \"bosque\",\n    name: \"Bosque\",\n    category: \"natural\",\n    color: \"#228B22\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"forest\",\n    icon: \"🌲\",\n    description: \"Área arborizada menos densa\"\n  },\n  {\n    id: \"pasto\",\n    name: \"Pasto\",\n    category: \"natural\",\n    color: \"#90EE90\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"grass\",\n    icon: \"🌿\",\n    description: \"Área de pastagem\"\n  },\n  {\n    id: \"campo-nativo\",\n    name: \"Campo nativo\",\n    category: \"natural\",\n    color: \"#9ACD32\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"grass\",\n    icon: \"🌱\",\n    description: \"Vegetação campestre natural\"\n  },\n  {\n    id: \"area-regeneracao\",\n    name: \"Área em regeneração\",\n    category: \"natural\",\n    color: \"#6B8E23\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"grass\",\n    icon: \"🌱\",\n    description: \"Área em processo de recuperação\"\n  },\n  {\n    id: \"saf\",\n    name: \"Sistema agroflorestal\",\n    category: \"natural\",\n    color: \"#556B2F\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"forest\",\n    icon: \"🌳\",\n    description: \"Sistema agroflorestal integrado\"\n  },\n  {\n    id: \"area-sombreada\",\n    name: \"Área Sombreada\",\n    category: \"natural\",\n    color: \"#065f46\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"grass\",\n    icon: \"🌳\",\n    description: \"Área coberta por árvores\"\n  },\n  {\n    id: \"pedreira\",\n    name: \"Pedreira\",\n    category: \"natural\",\n    color: \"#6b7280\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"rock\",\n    icon: \"🪨\",\n    description: \"Área rochosa natural\"\n  },\n\n  // Caminhos (Paths)\n  {\n    id: \"trilha\",\n    name: \"Trilha\",\n    category: \"paths\",\n    color: \"#D2691E\",\n    pattern: \"solid\",\n    size: \"1.5m largura\",\n    texture: \"path\",\n    icon: \"🥾\",\n    description: \"Caminho estreito de terra\"\n  },\n  {\n    id: \"estrada-acesso\",\n    name: \"Estrada de acesso\",\n    category: \"paths\",\n    color: \"#A0522D\",\n    pattern: \"solid\",\n    size: \"4m largura\",\n    texture: \"path\",\n    icon: \"🛤️\",\n    description: \"Via principal de acesso\"\n  },\n  {\n    id: \"caminho-pedestre\",\n    name: \"Caminho pedestre\",\n    category: \"paths\",\n    color: \"#BC8F8F\",\n    pattern: \"solid\",\n    size: \"2m largura\",\n    texture: \"path\",\n    icon: \"🚶\",\n    description: \"Passagem para pedestres\"\n  },\n  {\n    id: \"carreador\",\n    name: \"Carreador\",\n    category: \"paths\",\n    color: \"#8B7355\",\n    pattern: \"solid\",\n    size: \"3m largura\",\n    texture: \"path\",\n    icon: \"🚜\",\n    description: \"Caminho para veículos agrícolas\"\n  },\n  {\n    id: \"trilha-principal\",\n    name: \"Trilha Principal\",\n    category: \"paths\",\n    color: \"#a3a3a3\",\n    pattern: \"solid\",\n    size: \"2m largura\",\n    texture: \"path\",\n    icon: \"🛤️\",\n    description: \"Caminho principal para circulação\"\n  },\n  {\n    id: \"estrada-terra\",\n    name: \"Estrada de Terra\",\n    category: \"paths\",\n    color: \"#d97706\",\n    pattern: \"solid\",\n    size: \"3m largura\",\n    texture: \"path\",\n    icon: \"🛣️\",\n    description: \"Estrada principal de acesso\"\n  },\n\n  // Zonas (Zones)\n  {\n    id: \"zona-1\",\n    name: \"Zona 1 - Intensiva\",\n    category: \"zones\",\n    color: \"#FF6B6B\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🏠\",\n    description: \"Área de uso intensivo próxima à casa\"\n  },\n  {\n    id: \"zona-2\",\n    name: \"Zona 2 - Cultivo\",\n    category: \"zones\",\n    color: \"#FFE66D\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🌱\",\n    description: \"Área de cultivo semi-intensivo\"\n  },\n  {\n    id: \"zona-3\",\n    name: \"Zona 3 - Produção\",\n    category: \"zones\",\n    color: \"#95E1D3\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🚜\",\n    description: \"Produção extensiva e pasto\"\n  },\n  {\n    id: \"zona-4\",\n    name: \"Zona 4 - Silvicultura\",\n    category: \"zones\",\n    color: \"#A8E6CF\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🌲\",\n    description: \"Área de manejo florestal\"\n  },\n  {\n    id: \"zona-5\",\n    name: \"Zona 5 - Silvestre\",\n    category: \"zones\",\n    color: \"#C7CEEA\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🦋\",\n    description: \"Área silvestre sem intervenção\"\n  },\n  {\n    id: \"area-social\",\n    name: \"Área social\",\n    category: \"zones\",\n    color: \"#FFB6C1\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"🎪\",\n    description: \"Espaço para eventos e convivência\"\n  },\n  {\n    id: \"area-compostagem\",\n    name: \"Área de compostagem\",\n    category: \"zones\",\n    color: \"#8B4513\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"zone\",\n    icon: \"♻️\",\n    description: \"Zona dedicada à compostagem\"\n  },\n\n  // Proteção (Protection)\n  {\n    id: \"quebra-vento\",\n    name: \"Quebra-vento\",\n    category: \"protection\",\n    color: \"#2F4F4F\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"protection\",\n    icon: \"🌬️\",\n    description: \"Barreira contra ventos fortes\"\n  },\n  {\n    id: \"faixa-protecao\",\n    name: \"Faixa de proteção\",\n    category: \"protection\",\n    color: \"#708090\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"protection\",\n    icon: \"🛡️\",\n    description: \"Área de proteção ambiental\"\n  },\n  {\n    id: \"aceiro\",\n    name: \"Aceiro\",\n    category: \"protection\",\n    color: \"#F5DEB3\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"protection\",\n    icon: \"🔥\",\n    description: \"Faixa limpa contra incêndios\"\n  },\n  {\n    id: \"zona-amortecimento\",\n    name: \"Zona de amortecimento\",\n    category: \"protection\",\n    color: \"#778899\",\n    pattern: \"solid\",\n    size: \"variável\",\n    texture: \"protection\",\n    icon: \"🛡️\",\n    description: \"Área de transição e proteção\"\n  }\n];\n\nconst BRUSH_MODES = [\n  { id: \"rectangle\", name: \"Retângulo\", icon: \"⬜\", description: \"Forma retangular\", color: \"bg-gradient-to-r from-blue-400 to-indigo-500\" },\n  { id: \"circle\", name: \"Círculo\", icon: \"⭕\", description: \"Forma circular\", color: \"bg-gradient-to-r from-purple-400 to-pink-500\" },\n  { id: \"brush\", name: \"Pincel\", icon: \"🖌️\", description: \"Desenho livre\", color: \"bg-gradient-to-r from-orange-400 to-red-500\" },\n] as const;\n\ninterface TerrainLibraryProps {\n  selectedTerrain: TerrainType | null;\n  onTerrainSelect: (terrain: TerrainType | null) => void;\n}\n\nconst TerrainCard = memo(({ terrain, isSelected, onSelect }: {\n  terrain: TerrainType;\n  isSelected: boolean;\n  onSelect: (terrain: TerrainType) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(terrain);\n  }, [terrain, onSelect]);\n\n  const handleDragStart = useCallback((e: React.DragEvent) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify(terrain));\n    e.dataTransfer.effectAllowed = 'copy';\n  }, [terrain]);\n\n  return (\n    <div\n      className={cn(\n        \"group relative overflow-hidden rounded-2xl border backdrop-blur-xl transition-all duration-300 cursor-pointer\",\n        \"bg-white/70 dark:bg-gray-900/70 border-white/20 dark:border-gray-800/20\",\n        \"hover:bg-white/90 dark:hover:bg-gray-800/90 hover:scale-[1.02] hover:shadow-2xl hover:shadow-orange-500/10\",\n        isSelected && \"bg-gradient-to-br from-orange-50/90 to-amber-50/90 dark:from-orange-950/90 dark:to-amber-950/90\",\n        isSelected && \"ring-2 ring-orange-400/60 dark:ring-orange-600/60 shadow-2xl shadow-orange-500/20 scale-[1.02]\"\n      )}\n      onClick={handleClick}\n      draggable\n      onDragStart={handleDragStart}\n    >\n      {/* Glass morphism background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 to-transparent dark:from-gray-700/10 pointer-events-none\" />\n      \n      <div className=\"relative p-4\">\n        <div className=\"flex items-center gap-4\">\n          <div \n            className=\"flex items-center justify-center w-14 h-14 rounded-2xl text-xl shadow-lg transition-all duration-300 group-hover:scale-110\"\n            style={{ \n              backgroundColor: `${terrain.color}15`,\n              boxShadow: `0 8px 32px ${terrain.color}20`,\n              border: `1px solid ${terrain.color}20`\n            }}\n          >\n            {terrain.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100 truncate\">\n                {terrain.name}\n              </h3>\n              <Badge \n                variant=\"secondary\" \n                className=\"text-xs px-2 py-1 h-auto rounded-full bg-orange-100/80 dark:bg-orange-900/50 border-orange-200/60 dark:border-orange-800/60 backdrop-blur-sm\"\n              >\n                {terrain.size}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400 truncate mb-2\">\n              {terrain.description}\n            </p>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-500\">\n                Textura: {terrain.texture}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Selection glow effect */}\n      {isSelected && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/5 to-amber-400/10 rounded-2xl pointer-events-none\" />\n      )}\n    </div>\n  );\n});\n\nTerrainCard.displayName = \"TerrainCard\";\n\nconst CategoryButton = memo(({ category, isSelected, onSelect }: {\n  category: typeof TERRAIN_CATEGORIES[number];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(category.id);\n  }, [category.id, onSelect]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"h-11 px-4 text-xs font-semibold rounded-2xl transition-all duration-300 backdrop-blur-xl border\",\n        \"hover:scale-105 hover:shadow-lg\",\n        isSelected \n          ? `${category.color} text-white shadow-lg border-white/20 hover:shadow-xl` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n    >\n      <category.icon className=\"w-4 h-4 mr-2\" />\n      {category.name}\n    </Button>\n  );\n});\n\nCategoryButton.displayName = \"CategoryButton\";\n\nconst BrushModeButton = memo(({ mode, isSelected, onSelect }: {\n  mode: typeof BRUSH_MODES[number];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n}) => {\n  const handleClick = useCallback(() => {\n    onSelect(mode.id);\n  }, [mode.id, onSelect]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={handleClick}\n      className={cn(\n        \"h-10 px-4 text-xs font-semibold rounded-2xl transition-all duration-300 backdrop-blur-xl border\",\n        \"hover:scale-105 hover:shadow-lg\",\n        isSelected \n          ? `${mode.color} text-white shadow-lg border-white/20 hover:shadow-xl` \n          : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\"\n      )}\n      title={mode.description}\n    >\n      <span className=\"mr-2\">{mode.icon}</span>\n      {mode.name}\n    </Button>\n  );\n});\n\nBrushModeButton.displayName = \"BrushModeButton\";\n\nexport const TerrainLibrary = memo(({ selectedTerrain, onTerrainSelect }: TerrainLibraryProps) => {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedBrushMode, setSelectedBrushMode] = useState(\"rectangle\");\n  const [brushThickness, setBrushThickness] = useState([20]);\n  const { searchTerm, setSearchTerm, searchResults } = useEnhancedSearch(TERRAIN_DATA, {\n    searchFields: ['name', 'description'],\n    debounceMs: 200\n  });\n\n  const filteredTerrains = useMemo(() => {\n    let terrains = searchTerm ? searchResults : TERRAIN_DATA;\n    \n    if (selectedCategory !== \"all\") {\n      terrains = terrains.filter(terrain => terrain.category === selectedCategory);\n    }\n    \n    return terrains;\n  }, [searchTerm, searchResults, selectedCategory]);\n\n  const handleTerrainSelect = useCallback((terrain: TerrainType) => {\n    const isCurrentlySelected = selectedTerrain?.id === terrain.id;\n    const terrainWithSettings = isCurrentlySelected ? null : {\n      ...terrain,\n      selectedBrushMode,\n      brushThickness: brushThickness[0],\n      supportedModes: [\"rectangle\", \"circle\", \"brush\"]\n    };\n    onTerrainSelect(terrainWithSettings);\n  }, [selectedTerrain?.id, onTerrainSelect, selectedBrushMode, brushThickness]);\n\n  const memoizedCategories = useMemo(() => TERRAIN_CATEGORIES.map(category => (\n    <CategoryButton\n      key={category.id}\n      category={category}\n      isSelected={selectedCategory === category.id}\n      onSelect={setSelectedCategory}\n    />\n  )), [selectedCategory]);\n\n  const memoizedBrushModes = useMemo(() => BRUSH_MODES.map(mode => (\n    <BrushModeButton\n      key={mode.id}\n      mode={mode}\n      isSelected={selectedBrushMode === mode.id}\n      onSelect={setSelectedBrushMode}\n    />\n  )), [selectedBrushMode]);\n\n  const memoizedTerrains = useMemo(() => filteredTerrains.map(terrain => (\n    <TerrainCard\n      key={terrain.id}\n      terrain={terrain}\n      isSelected={selectedTerrain?.id === terrain.id}\n      onSelect={handleTerrainSelect}\n    />\n  )), [filteredTerrains, selectedTerrain?.id, handleTerrainSelect]);\n\n  return (\n    <div className=\"flex flex-col h-full bg-gradient-to-br from-orange-50/50 via-white/50 to-amber-50/50 dark:from-gray-900/50 dark:via-gray-900/50 dark:to-gray-800/50\">\n      {/* Header with Glass Morphism */}\n      <div className=\"sticky top-0 z-20 p-4 border-b border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-2xl bg-gradient-to-br from-orange-400 to-amber-500 flex items-center justify-center shadow-lg\">\n              <Mountain className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-xl font-bold bg-gradient-to-r from-orange-600 to-amber-600 bg-clip-text text-transparent dark:from-orange-400 dark:to-amber-400\">\n              Biblioteca de Terreno\n            </h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-pulse shadow-lg shadow-orange-400/50\"></div>\n            <span className=\"text-xs text-gray-500 dark:text-gray-400 font-medium\">{TERRAIN_DATA.length} terrenos</span>\n          </div>\n        </div>\n        \n        {/* Search with Glass Morphism */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <Input\n            placeholder=\"Buscar terrenos...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-12 h-12 text-sm rounded-2xl bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl border-white/20 dark:border-gray-700/20 focus:border-orange-400/60 dark:focus:border-orange-600/60 focus:ring-2 focus:ring-orange-200/50 dark:focus:ring-orange-800/50 transition-all duration-200\"\n          />\n        </div>\n\n        {/* Categories */}\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {memoizedCategories}\n        </div>\n\n        {/* Enhanced Brush Settings with Glass Morphism */}\n        <div className=\"space-y-4 p-4 rounded-2xl bg-white/40 dark:bg-gray-800/40 backdrop-blur-xl border border-white/20 dark:border-gray-700/20\">\n          <div>\n            <Label className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3 block\">\n              Modo de Aplicação\n            </Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {memoizedBrushModes}\n            </div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n              Todos os terrenos suportam todos os modos de aplicação\n            </p>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3 block\">\n              Espessura do Pincel: {brushThickness[0]}px\n            </Label>\n            <div className=\"px-2\">\n              <Slider\n                value={brushThickness}\n                onValueChange={setBrushThickness}\n                max={100}\n                min={5}\n                step={5}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-2\">\n              <span>Fino (5px)</span>\n              <span>Grosso (100px)</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Terrains List */}\n      <ScrollArea className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-4 space-y-3\">\n          {memoizedTerrains.length > 0 ? (\n            memoizedTerrains\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-orange-100/80 to-amber-100/80 dark:from-orange-900/20 dark:to-amber-900/20 flex items-center justify-center backdrop-blur-xl border border-white/20 dark:border-gray-700/20\">\n                <Mountain className=\"w-12 h-12 text-orange-500 dark:text-orange-400\" />\n              </div>\n              <p className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2\">\n                Nenhum terreno encontrado\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                Tente ajustar os filtros ou buscar por outro termo\n              </p>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Selected Terrain Info with Glass Morphism */}\n      {selectedTerrain && (\n        <div className=\"p-4 border-t border-white/20 dark:border-gray-700/20 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl\">\n          <div className=\"flex items-center gap-4 p-3 rounded-2xl bg-gradient-to-r from-orange-50/60 to-amber-50/60 dark:from-orange-950/60 dark:to-amber-950/60 border border-white/20 dark:border-gray-700/20\">\n            <div \n              className=\"w-12 h-12 rounded-2xl flex items-center justify-center text-lg shadow-lg\"\n              style={{ \n                backgroundColor: `${selectedTerrain.color}15`,\n                boxShadow: `0 4px 16px ${selectedTerrain.color}20`,\n                border: `1px solid ${selectedTerrain.color}20`\n              }}\n            >\n              {selectedTerrain.icon}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\">\n                {selectedTerrain.name}\n              </h3>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                {selectedTerrain.description}\n              </p>\n              <div className=\"flex flex-wrap gap-2 text-xs\">\n                <span className=\"font-medium text-orange-600 dark:text-orange-400\">\n                  Modo: {selectedBrushMode}\n                </span>\n                <span className=\"text-gray-500\">•</span>\n                <span className=\"font-medium text-orange-600 dark:text-orange-400\">\n                  Tamanho: {selectedTerrain.size}\n                </span>\n                <span className=\"text-gray-500\">•</span>\n                <span className=\"font-medium text-orange-600 dark:text-orange-400\">\n                  Espessura: {brushThickness[0]}px\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nTerrainLibrary.displayName = \"TerrainLibrary\";",
      "size_bytes": 25353
    },
    "client/src/components/ThemeProvider.tsx": {
      "content": "\nimport { useEffect, useState } from \"react\";\nimport { ThemeContext, type Theme } from \"@/hooks/useTheme\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"agroecologia-theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"agroecologia-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n",
      "size_bytes": 831
    },
    "client/src/components/UnifiedToolbar.tsx": {
      "content": "import React, { memo, useCallback, useMemo, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  MousePointer, \n  Square, \n  Circle, \n  Move, \n  RotateCw, \n  Trash2,\n  Grid3X3,\n  Ruler,\n  Hand,\n  Copy,\n  Palette,\n  Undo,\n  Redo,\n  Download,\n  Share2,\n  Save,\n  Sprout,\n  Settings,\n  Sun,\n  Moon,\n  Sparkles,\n  BarChart,\n  Upload\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"@/hooks/useTheme\";\nimport { toast } from \"sonner\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@radix-ui/react-tooltip\";\n\nimport { CanvasRef } from \"../types/canvasTypes\";\n\ninterface UnifiedToolbarProps {\n  selectedTool: string;\n  onToolSelect: (tool: string) => void;\n  onUndo: () => void;\n  onRedo: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n  canvasSize: { width: number; height: number };\n  onCanvasSizeChange: (size: { width: number; height: number }) => void;\n  canvasRef: React.RefObject<CanvasRef>;\n}\n\nconst tools = [\n  { \n    id: \"select\", \n    icon: MousePointer, \n    label: \"Selecionar\", \n    description: \"Selecione e mova elementos\",\n    category: \"selection\",\n    color: \"bg-gradient-to-r from-blue-400 to-cyan-500\"\n  },\n  { \n    id: \"move\", \n    icon: Hand, \n    label: \"Navegar\", \n    description: \"Navegue pelo canvas\",\n    category: \"navigation\",\n    color: \"bg-gradient-to-r from-purple-400 to-pink-500\"\n  },\n  { \n    id: \"rectangle\", \n    icon: Square, \n    label: \"Retângulo\", \n    description: \"Desenhe retângulos\",\n    category: \"shapes\",\n    color: \"bg-gradient-to-r from-orange-400 to-red-500\"\n  },\n  { \n    id: \"circle\", \n    icon: Circle, \n    label: \"Círculo\", \n    description: \"Desenhe círculos\",\n    category: \"shapes\",\n    color: \"bg-gradient-to-r from-pink-400 to-rose-500\"\n  },\n  { \n    id: \"terrain\", \n    icon: Palette, \n    label: \"Terreno\", \n    description: \"Pinte texturas\",\n    category: \"terrain\",\n    color: \"bg-gradient-to-r from-green-400 to-emerald-500\"\n  },\n];\n\nconst utilityTools = [\n  { id: \"grid\", icon: Grid3X3, label: \"Grade\", description: \"Alternar grade (G)\", color: \"bg-gradient-to-r from-slate-400 to-gray-500\" },\n  { id: \"copy\", icon: Copy, label: \"Copiar\", description: \"Copiar elementos (Ctrl+C)\", color: \"bg-gradient-to-r from-indigo-400 to-purple-500\" },\n  { id: \"rotate\", icon: RotateCw, label: \"Rotacionar\", description: \"Rotacionar elementos (R)\", color: \"bg-gradient-to-r from-teal-400 to-cyan-500\" },\n  { id: \"delete\", icon: Trash2, label: \"Excluir\", description: \"Remover elementos (Del)\", color: \"bg-gradient-to-r from-red-400 to-rose-500\" },\n];\n\nconst ToolButton = memo(({ tool, isSelected, onSelect, isUtility = false }: {\n  tool: typeof tools[0] | typeof utilityTools[0];\n  isSelected: boolean;\n  onSelect: (id: string) => void;\n  isUtility?: boolean;\n}) => (\n  <TooltipProvider>\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => onSelect(tool.id)}\n          className={cn(\n            \"relative h-12 px-4 rounded-2xl transition-all duration-300 backdrop-blur-xl border font-semibold\",\n            \"hover:scale-105 hover:shadow-lg\",\n            isSelected \n              ? `${tool.color} text-white shadow-lg border-white/20 hover:shadow-xl` \n              : \"bg-white/60 dark:bg-gray-800/60 text-gray-700 dark:text-gray-300 border-white/20 dark:border-gray-700/20 hover:bg-white/80 dark:hover:bg-gray-700/80\",\n            isUtility && \"h-10 px-3 text-xs\"\n          )}\n          aria-label={tool.label}\n        >\n          <tool.icon className={cn(\n            \"w-4 h-4\",\n            !isUtility && \"mr-2\"\n          )} />\n          {!isUtility && (\n            <span className=\"text-sm font-semibold\">{tool.label}</span>\n          )}\n          {isSelected && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent rounded-2xl pointer-events-none\" />\n          )}\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent side=\"bottom\" className=\"bg-gray-800 text-white p-2 rounded-md text-sm\">\n        {tool.description}\n      </TooltipContent>\n    </Tooltip>\n  </TooltipProvider>\n));\n\nToolButton.displayName = \"ToolButton\";\n\nexport const UnifiedToolbar = memo(({ \n  selectedTool, \n  onToolSelect, \n  onUndo, \n  onRedo, \n  canUndo, \n  canRedo,\n  canvasSize,\n  onCanvasSizeChange\n}: UnifiedToolbarProps) => {\n  const { theme, toggleTheme } = useTheme();\n  const [showAnalytics, setShowAnalytics] = useState(false);\n\n  const handleExport = useCallback(() => {\n    const canvasElement = document.querySelector('[data-canvas=\"true\"]') as HTMLElement;\n    if (!canvasElement) {\n      toast.error(\"Canvas não encontrado para exportação\");\n      return;\n    }\n\n    import('html2canvas').then(({ default: html2canvas }) => {\n      toast.info('Preparando exportação...', { duration: 2000 });\n      \n      html2canvas(canvasElement, {\n        backgroundColor: '#fafbfc',\n        scale: 2,\n        logging: false,\n        allowTaint: true,\n        useCORS: true,\n        removeContainer: true,\n        ignoreElements: (element) => {\n          return element.classList.contains('ignore-export') ||\n                 element.tagName === 'SCRIPT' ||\n                 element.tagName === 'STYLE';\n        }\n      }).then(canvas => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            toast.error('Erro ao gerar imagem');\n            return;\n          }\n          \n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `agroecologia-canvas-${Date.now()}.png`;\n          link.style.display = 'none';\n          \n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          \n          URL.revokeObjectURL(url);\n          \n          toast.success('Canvas exportado com sucesso!');\n        }, 'image/png', 0.9);\n      }).catch((error) => {\n        console.error('Export error:', error);\n        toast.error('Erro ao exportar canvas');\n      });\n    }).catch((error) => {\n      console.error('Failed to load html2canvas:', error);\n      toast.error('Erro ao carregar biblioteca de exportação');\n    });\n  }, []);\n\n  const handleSave = useCallback(() => {\n    const projectData = {\n      timestamp: new Date().toISOString(),\n      canvasSize,\n      version: \"2.0\",\n      theme,\n      elements: canvasRef.current?.getState() || []\n    };\n    localStorage.setItem('agroecologia-project', JSON.stringify(projectData));\n    toast.success(\"Projeto salvo com sucesso!\", {\n      description: \"Seus dados foram salvos localmente\"\n    });\n  }, [canvasSize, theme]);\n\n  const handleLoad = useCallback(() => {\n    const savedData = localStorage.getItem('agroecologia-project');\n    if (savedData) {\n      const parsed = JSON.parse(savedData);\n      onCanvasSizeChange(parsed.canvasSize);\n      // set theme if needed\n      canvasRef.current?.setState(parsed.elements || []);\n      toast.success(\"Projeto carregado com sucesso!\");\n    } else {\n      toast.info(\"Nenhum projeto salvo encontrado\");\n    }\n  }, [onCanvasSizeChange]);\n\n  const handleShare = useCallback(() => {\n    if (navigator.share) {\n      navigator.share({\n        title: 'Meu Projeto Agroecológico',\n        text: 'Confira meu planejamento agrícola sustentável',\n        url: window.location.href\n      }).catch(() => toast.info(\"Compartilhamento cancelado\"));\n    } else {\n      navigator.clipboard.writeText(window.location.href);\n      toast.success(\"Link copiado para a área de transferência!\");\n    }\n  }, []);\n\n  const handleCanvasSizeChange = useCallback((field: 'width' | 'height', value: string) => {\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue) && numValue > 0) {\n      onCanvasSizeChange({\n        ...canvasSize,\n        [field]: numValue\n      });\n    }\n  }, [canvasSize, onCanvasSizeChange]);\n\n  const memoizedTools = useMemo(() => tools.map(tool => (\n    <ToolButton\n      key={tool.id}\n      tool={tool}\n      isSelected={selectedTool === tool.id}\n      onSelect={onToolSelect}\n    />\n  )), [selectedTool, onToolSelect]);\n\n  const memoizedUtilityTools = useMemo(() => utilityTools.map(tool => (\n    <ToolButton\n      key={tool.id}\n      tool={tool}\n      isSelected={selectedTool === tool.id}\n      onSelect={onToolSelect}\n      isUtility\n    />\n  )), [selectedTool, onToolSelect]);\n\n  const handleOpenAnalytics = useCallback(() => {\n    setShowAnalytics(true);\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-between h-16 px-6 bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-b border-white/20 dark:border-gray-700/20\">\n      {/* Left: Logo & Brand */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center justify-center w-10 h-10 rounded-2xl bg-gradient-to-br from-green-400 to-emerald-500 shadow-lg\">\n            <Sprout className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"hidden sm:block\">\n            <h1 className=\"text-lg font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent dark:from-green-400 dark:to-emerald-400\">\n              Agroecologia\n            </h1>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 font-medium\">\n              Planejamento Sustentável\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Center: Tools */}\n      <div className=\"flex items-center gap-3\">\n        {/* Main Tools */}\n        <div className=\"flex items-center gap-2 p-2 bg-white/40 dark:bg-gray-800/40 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/20\">\n          {memoizedTools}\n        </div>\n\n        <Separator orientation=\"vertical\" className=\"h-8 mx-2 bg-white/20 dark:bg-gray-700/20\" />\n\n        {/* Utility Tools */}\n        <div className=\"flex items-center gap-2 p-2 bg-white/40 dark:bg-gray-800/40 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/20\">\n          {memoizedUtilityTools}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleOpenAnalytics}\n            className=\"h-10 w-10 p-0 rounded-xl transition-all duration-300 backdrop-blur-xl hover:bg-indigo-100 dark:hover:bg-indigo-900/50 hover:scale-105 text-indigo-600 dark:text-indigo-400\"\n            title=\"Ver estatísticas\"\n          >\n            <BarChart className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <Separator orientation=\"vertical\" className=\"h-8 mx-2 bg-white/20 dark:bg-gray-700/20\" />\n\n        {/* History */}\n        <div className=\"flex items-center gap-2 p-2 bg-white/40 dark:bg-gray-800/40 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/20\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onUndo}\n            disabled={!canUndo}\n            className={cn(\n              \"h-10 w-10 p-0 rounded-xl transition-all duration-300 backdrop-blur-xl\",\n              canUndo \n                ? \"hover:bg-blue-100 dark:hover:bg-blue-900/50 hover:scale-105 text-blue-600 dark:text-blue-400\" \n                : \"text-gray-400 dark:text-gray-600\"\n            )}\n            title=\"Desfazer (Ctrl+Z)\"\n          >\n            <Undo className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onRedo}\n            disabled={!canRedo}\n            className={cn(\n              \"h-10 w-10 p-0 rounded-xl transition-all duration-300 backdrop-blur-xl\",\n              canRedo \n                ? \"hover:bg-blue-100 dark:hover:bg-blue-900/50 hover:scale-105 text-blue-600 dark:text-blue-400\" \n                : \"text-gray-400 dark:text-gray-600\"\n            )}\n            title=\"Refazer (Ctrl+Y)\"\n          >\n            <Redo className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Right: Canvas Settings & Actions */}\n      <div className=\"flex items-center gap-3\">\n        {/* Canvas Size */}\n        <div className=\"hidden lg:flex items-center gap-3 text-sm p-3 bg-white/40 dark:bg-gray-800/40 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/20\">\n          <Label htmlFor=\"canvas-width\" className=\"text-xs font-semibold text-gray-600 dark:text-gray-400\">\n            Tamanho:\n          </Label>\n          <Input\n            id=\"canvas-width\"\n            type=\"number\"\n            value={canvasSize.width}\n            onChange={(e) => handleCanvasSizeChange('width', e.target.value)}\n            className=\"w-16 h-8 text-xs rounded-lg bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl border-white/20 dark:border-gray-700/20 focus:border-blue-400/60 dark:focus:border-blue-600/60\"\n            min=\"1\"\n            max=\"200\"\n          />\n          <span className=\"text-xs text-gray-500 font-medium\">×</span>\n          <Input\n            id=\"canvas-height\"\n            type=\"number\"\n            value={canvasSize.height}\n            onChange={(e) => handleCanvasSizeChange('height', e.target.value)}\n            className=\"w-16 h-8 text-xs rounded-lg bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl border-white/20 dark:border-gray-700/20 focus:border-blue-400/60 dark:focus:border-blue-600/60\"\n            min=\"1\"\n            max=\"200\"\n          />\n          <span className=\"text-xs text-gray-500 font-medium\">m</span>\n        </div>\n\n        <Separator orientation=\"vertical\" className=\"h-8 bg-white/20 dark:bg-gray-700/20\" />\n\n        {/* Theme Toggle */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleTheme}\n          className=\"h-10 w-10 p-0 rounded-xl transition-all duration-300 backdrop-blur-xl hover:bg-yellow-100 dark:hover:bg-yellow-900/50 hover:scale-105 text-yellow-600 dark:text-yellow-400\"\n          title=\"Alternar tema\"\n        >\n          {theme === \"light\" ? (\n            <Moon className=\"w-4 h-4\" />\n          ) : (\n            <Sun className=\"w-4 h-4\" />\n          )}\n        </Button>\n\n        {/* Actions */}\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleSave}\n            className=\"h-10 px-4 rounded-xl transition-all duration-300 backdrop-blur-xl hover:bg-green-100 dark:hover:bg-green-900/50 hover:scale-105 text-green-600 dark:text-green-400 border border-white/20 dark:border-gray-700/20\"\n            title=\"Salvar projeto\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline text-sm font-semibold\">Salvar</span>\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLoad}\n            className=\"h-10 px-4 rounded-xl transition-all duration-300 backdrop-blur-xl hover:bg-blue-100 dark:hover:bg-blue-900/50 hover:scale-105 text-blue-600 dark:text-blue-400 border border-white/20 dark:border-gray-700/20\"\n            title=\"Carregar projeto\"\n          >\n            <Upload className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline text-sm font-semibold\">Carregar</span>\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleShare}\n            className=\"h-10 px-4 rounded-xl transition-all duration-300 backdrop-blur-xl hover:bg-blue-100 dark:hover:bg-blue-900/50 hover:scale-105 text-blue-600 dark:text-blue-400 border border-white/20 dark:border-gray-700/20\"\n            title=\"Compartilhar\"\n          >\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline text-sm font-semibold\">Compartilhar</span>\n          </Button>\n\n          <Button\n            onClick={handleExport}\n            size=\"sm\"\n            className=\"h-10 px-4 rounded-xl transition-all duration-300 backdrop-blur-xl hover:scale-105 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white shadow-lg border border-white/20\"\n            title=\"Exportar PNG\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline text-sm font-semibold\">Exportar</span>\n            <Sparkles className=\"w-3 h-3 ml-1 animate-pulse\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nUnifiedToolbar.displayName = \"UnifiedToolbar\";",
      "size_bytes": 16575
    },
    "client/src/components/WelcomeModal.tsx": {
      "content": "\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sprout, Mouse, Download, Palette } from \"lucide-react\";\n\ninterface WelcomeModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport const WelcomeModal = ({ open, onClose }: WelcomeModalProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"flex items-center justify-center w-12 h-12 rounded-xl nature-gradient\">\n              <Sprout className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-xl\">Bem-vindo ao Agroecologia Desenhada!</DialogTitle>\n              <DialogDescription>\n                Crie mapas de plantio sustentáveis de forma visual e intuitiva\n              </DialogDescription>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"grid gap-3\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"mt-0.5\">\n                <Mouse className=\"w-5 h-5 text-accent\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-sm\">1. Selecione suas plantas</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  Browse through our library of native and sustainable plants\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <div className=\"mt-0.5\">\n                <Palette className=\"w-5 h-5 text-accent\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-sm\">2. Desenhe sua área</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  Use ferramentas para delimitar terrenos e organizar plantios\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <div className=\"mt-0.5\">\n                <Download className=\"w-5 h-5 text-accent\" />\n              </div>\n              <div>\n                <h4 className=\"font-medium text-sm\">3. Exporte seu projeto</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  Baixe como PNG em alta qualidade para implementação\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-muted/50 p-3 rounded-lg\">\n            <p className=\"text-xs text-muted-foreground text-center\">\n              💡 <strong>Dica:</strong> Comece selecionando plantas da biblioteca ao lado \n              e clique no canvas para posicioná-las em sua área de cultivo.\n            </p>\n          </div>\n\n          <Button \n            onClick={onClose} \n            className=\"w-full nature-gradient text-white border-0\"\n          >\n            Começar a Desenhar\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
      "size_bytes": 3149
    },
    "client/src/hooks/use-mobile.tsx": {
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "size_bytes": 565
    },
    "client/src/hooks/use-toast.ts": {
      "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "size_bytes": 3895
    },
    "client/src/hooks/useCanvasEvents.ts": {
      "content": "\nimport { useCallback } from \"react\";\nimport { Plant, Terrain } from '../types/canvasTypes';\nimport { calculatePixelsPerMeter } from '../utils/canvasCoordinates';\nimport { CANVAS_CONSTANTS } from '../utils/canvasConstants';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface DrawingElement {\n  id: number;\n  type: 'plant' | 'terrain' | 'rectangle' | 'circle';\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  radius?: number;\n  plant?: Plant;\n  terrain?: Terrain;\n  selected?: boolean;\n  rotation?: number;\n  // Real-world size in meters (for terrain elements)\n  realWorldWidth?: number;\n  realWorldHeight?: number;\n  // Terrain brush properties\n  brushType?: 'rectangle' | 'circle' | 'path';\n  texture?: string;\n  // Path points for trail-like terrains\n  pathPoints?: { x: number; y: number }[];\n  // Brush properties\n  selectedBrushMode?: 'rectangle' | 'circle' | 'brush';\n  brushThickness?: number;\n}\n\nexport const useCanvasEvents = () => {\n  const getMousePosition = useCallback((\n    e: React.MouseEvent | MouseEvent | DragEvent | React.TouchEvent,\n    canvasRef: React.RefObject<HTMLDivElement>,\n    zoom: number,\n    panOffset: { x: number; y: number } = { x: 0, y: 0 }\n  ): Position => {\n    if (!canvasRef.current) return { x: 0, y: 0 };\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const scale = zoom / 100;\n    \n    let clientX: number, clientY: number;\n    \n    if ('touches' in e && e.touches.length > 0) {\n      clientX = e.touches[0].clientX;\n      clientY = e.touches[0].clientY;\n    } else if ('clientX' in e) {\n      clientX = e.clientX;\n      clientY = e.clientY;\n    } else {\n      return { x: 0, y: 0 };\n    }\n    \n    return {\n      x: (clientX - rect.left - panOffset.x) / scale,\n      y: (clientY - rect.top - panOffset.y) / scale\n    };\n  }, []);\n\n  const snapToGrid = useCallback((pos: Position, showGrid: boolean): Position => {\n    if (!showGrid) return pos;\n    const gridSize = 10; // 1 meter grid for precise placement\n    return {\n      x: Math.round(pos.x / gridSize) * gridSize,\n      y: Math.round(pos.y / gridSize) * gridSize\n    };\n  }, []);\n\n  const isPointInElement = useCallback((pos: Position, element: DrawingElement): boolean => {\n    // Consider margins around elements for selection\n    const marginSize = 10; // 10px margin\n\n    if (element.type === 'plant') {\n      // Parse plant spacing to get actual dimensions\n      const parsePlantSpacing = (spacing: string) => {\n        // Use consistent calculation with canvas component\n        const PIXELS_PER_METER = calculatePixelsPerMeter(\n          CANVAS_CONSTANTS.DEFAULT_CANVAS_DIMENSIONS,\n          CANVAS_CONSTANTS.DEFAULT_CANVAS_REAL_SIZE\n        );\n        \n        if (spacing.includes('x')) {\n          const match = spacing.match(/(\\d+(?:\\.\\d+)?)x(\\d+(?:\\.\\d+)?)/);\n          if (match) {\n            const width = parseFloat(match[1]);\n            const height = parseFloat(match[2]);\n            return { width: width * PIXELS_PER_METER, height: height * PIXELS_PER_METER };\n          }\n        }\n        \n        const singleMatch = spacing.match(/(\\d+(?:\\.\\d+)?)(cm|m)/);\n        if (singleMatch) {\n          const value = parseFloat(singleMatch[1]);\n          const unit = singleMatch[2];\n          const meters = unit === 'cm' ? value / 100 : value;\n          const pixels = meters * PIXELS_PER_METER;\n          return { width: pixels, height: pixels };\n        }\n        \n        return { width: 40, height: 40 };\n      };\n      \n      const plantSize = parsePlantSpacing(element.plant?.spacing || '1x1m');\n      const plantLeft = element.x - plantSize.width / 2 - marginSize;\n      const plantTop = element.y - plantSize.height / 2 - marginSize;\n      \n      return pos.x >= plantLeft && pos.x <= plantLeft + plantSize.width + (marginSize * 2) &&\n             pos.y >= plantTop && pos.y <= plantTop + plantSize.height + (marginSize * 2);\n    } else if (element.type === 'terrain') {\n      // Handle path-based terrain (trails, streams)\n      if (element.brushType === 'path' && element.pathPoints) {\n        for (let i = 0; i < element.pathPoints.length - 1; i++) {\n          const p1 = element.pathPoints[i];\n          const p2 = element.pathPoints[i + 1];\n          const distance = distanceFromPointToLine(pos, p1, p2);\n          if (distance <= 6) return true; // 6px tolerance for path selection\n        }\n        return false;\n      }\n      \n      // Handle area-based terrain (rectangle/circle)\n      if (element.brushType === 'circle') {\n        const centerX = element.x + (element.width || 0) / 2;\n        const centerY = element.y + (element.height || 0) / 2;\n        const radius = (element.width || 0) / 2;\n        const distance = Math.sqrt(\n          Math.pow(pos.x - centerX, 2) + Math.pow(pos.y - centerY, 2)\n        );\n        return distance <= radius;\n      } else {\n        // Rectangle terrain\n        const width = element.width || 40;\n        const height = element.height || 40;\n        return pos.x >= element.x - marginSize && pos.x <= element.x + width + marginSize &&\n               pos.y >= element.y - marginSize && pos.y <= element.y + height + marginSize;\n      }\n    } else if (element.type === 'rectangle') {\n      return pos.x >= element.x - marginSize && pos.x <= element.x + (element.width || 0) + marginSize &&\n             pos.y >= element.y - marginSize && pos.y <= element.y + (element.height || 0) + marginSize;\n    } else if (element.type === 'circle') {\n      const centerX = element.x + (element.radius || 0);\n      const centerY = element.y + (element.radius || 0);\n      const distance = Math.sqrt(\n        Math.pow(pos.x - centerX, 2) + Math.pow(pos.y - centerY, 2)\n      );\n      return distance <= (element.radius || 0) + marginSize;\n    }\n    return false;\n  }, []);\n\n  // Helper function to calculate distance from point to line segment\n  const distanceFromPointToLine = (point: Position, lineStart: Position, lineEnd: Position): number => {\n    const A = point.x - lineStart.x;\n    const B = point.y - lineStart.y;\n    const C = lineEnd.x - lineStart.x;\n    const D = lineEnd.y - lineStart.y;\n\n    const dot = A * C + B * D;\n    const lenSq = C * C + D * D;\n    \n    if (lenSq === 0) return Math.sqrt(A * A + B * B);\n    \n    let param = dot / lenSq;\n    param = Math.max(0, Math.min(1, param));\n    \n    const xx = lineStart.x + param * C;\n    const yy = lineStart.y + param * D;\n    \n    const dx = point.x - xx;\n    const dy = point.y - yy;\n    \n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  const findElementAtPosition = useCallback((\n    pos: Position, \n    elements: DrawingElement[]\n  ): DrawingElement | null => {\n    return elements\n      .slice()\n      .reverse()\n      .find(element => isPointInElement(pos, element)) || null;\n  }, [isPointInElement]);\n\n  return {\n    getMousePosition,\n    snapToGrid,\n    isPointInElement,\n    findElementAtPosition\n  };\n};\n",
      "size_bytes": 6890
    },
    "client/src/hooks/useCanvasZoom.tsx": {
      "content": "import { useState, useCallback, useRef, useEffect } from 'react';\n\ninterface ZoomState {\n  zoom: number;\n  panOffset: { x: number; y: number };\n  isDragging: boolean;\n  isPanning: boolean;\n}\n\ninterface ZoomControls {\n  zoom: number;\n  panOffset: { x: number; y: number };\n  zoomIn: () => void;\n  zoomOut: () => void;\n  zoomToFit: () => void;\n  resetZoom: () => void;\n  setZoom: (zoom: number) => void;\n  setPanOffset: (offset: { x: number; y: number }) => void;\n  handleWheel: (e: WheelEvent) => void;\n  handlePinch: (e: TouchEvent) => void;\n  handleTouchStart: (e: TouchEvent) => void;\n  handleTouchMove: (e: TouchEvent) => void;\n  handleTouchEnd: (e: TouchEvent) => void;\n  zoomLevel: string;\n  canZoomIn: boolean;\n  canZoomOut: boolean;\n}\n\ninterface UseCanvasZoomOptions {\n  minZoom?: number;\n  maxZoom?: number;\n  zoomStep?: number;\n  canvasRef?: React.RefObject<HTMLElement>;\n  onZoomChange?: (zoom: number) => void;\n}\n\nexport function useCanvasZoom({\n  minZoom = 25,\n  maxZoom = 400,\n  zoomStep = 25,\n  canvasRef,\n  onZoomChange,\n}: UseCanvasZoomOptions = {}): ZoomControls {\n  const [state, setState] = useState<ZoomState>({\n    zoom: 100,\n    panOffset: { x: 0, y: 0 },\n    isDragging: false,\n    isPanning: false,\n  });\n\n  const lastTouchRef = useRef<{ distance: number; center: { x: number; y: number } } | null>(null);\n  const touchStartRef = useRef<{ x: number; y: number } | null>(null);\n\n  const zoomIn = useCallback(() => {\n    setState(prev => {\n      const newZoom = Math.min(prev.zoom + zoomStep, maxZoom);\n      onZoomChange?.(newZoom);\n      return { ...prev, zoom: newZoom };\n    });\n  }, [zoomStep, maxZoom, onZoomChange]);\n\n  const zoomOut = useCallback(() => {\n    setState(prev => {\n      const newZoom = Math.max(prev.zoom - zoomStep, minZoom);\n      onZoomChange?.(newZoom);\n      return { ...prev, zoom: newZoom };\n    });\n  }, [zoomStep, minZoom, onZoomChange]);\n\n  const setZoom = useCallback((zoom: number) => {\n    const clampedZoom = Math.min(Math.max(zoom, minZoom), maxZoom);\n    setState(prev => ({ ...prev, zoom: clampedZoom }));\n    onZoomChange?.(clampedZoom);\n  }, [minZoom, maxZoom, onZoomChange]);\n\n  const setPanOffset = useCallback((offset: { x: number; y: number }) => {\n    setState(prev => ({ ...prev, panOffset: offset }));\n  }, []);\n\n  const zoomToFit = useCallback(() => {\n    if (!canvasRef?.current) {\n      setZoom(100);\n      setPanOffset({ x: 0, y: 0 });\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const container = canvas.parentElement;\n    if (!container) return;\n\n    const containerRect = container.getBoundingClientRect();\n    const canvasElements = canvas.querySelectorAll('[data-canvas-element=\"true\"]');\n    \n    if (canvasElements.length === 0) {\n      setZoom(100);\n      setPanOffset({ x: 0, y: 0 });\n      return;\n    }\n\n    // Calculate bounding box of all elements\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n    \n    canvasElements.forEach(element => {\n      const rect = element.getBoundingClientRect();\n      const canvasRect = canvas.getBoundingClientRect();\n      const x = rect.left - canvasRect.left;\n      const y = rect.top - canvasRect.top;\n      \n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x + rect.width);\n      maxY = Math.max(maxY, y + rect.height);\n    });\n\n    if (minX === Infinity) {\n      setZoom(100);\n      setPanOffset({ x: 0, y: 0 });\n      return;\n    }\n\n    const contentWidth = maxX - minX;\n    const contentHeight = maxY - minY;\n    const contentCenterX = minX + contentWidth / 2;\n    const contentCenterY = minY + contentHeight / 2;\n\n    // Calculate zoom to fit with padding\n    const padding = 50;\n    const zoomX = (containerRect.width - padding * 2) / contentWidth * 100;\n    const zoomY = (containerRect.height - padding * 2) / contentHeight * 100;\n    const fitZoom = Math.min(zoomX, zoomY, maxZoom);\n\n    // Calculate pan to center\n    const containerCenterX = containerRect.width / 2;\n    const containerCenterY = containerRect.height / 2;\n    const offsetX = containerCenterX - contentCenterX;\n    const offsetY = containerCenterY - contentCenterY;\n\n    setZoom(fitZoom);\n    setPanOffset({ x: offsetX, y: offsetY });\n  }, [canvasRef, setZoom, setPanOffset, maxZoom]);\n\n  const resetZoom = useCallback(() => {\n    setZoom(100);\n    setPanOffset({ x: 0, y: 0 });\n  }, [setZoom, setPanOffset]);\n\n  const handleWheel = useCallback((e: WheelEvent) => {\n    e.preventDefault();\n    \n    if (e.ctrlKey || e.metaKey) {\n      // Zoom\n      const delta = e.deltaY > 0 ? -zoomStep : zoomStep;\n      setState(prev => {\n        const newZoom = Math.min(Math.max(prev.zoom + delta, minZoom), maxZoom);\n        onZoomChange?.(newZoom);\n        return { ...prev, zoom: newZoom };\n      });\n    } else {\n      // Pan\n      setState(prev => ({\n        ...prev,\n        panOffset: {\n          x: prev.panOffset.x - e.deltaX,\n          y: prev.panOffset.y - e.deltaY,\n        },\n      }));\n    }\n  }, [zoomStep, minZoom, maxZoom, onZoomChange]);\n\n  const getTouchDistance = (touches: TouchList) => {\n    const touch1 = touches[0];\n    const touch2 = touches[1];\n    return Math.sqrt(\n      Math.pow(touch2.clientX - touch1.clientX, 2) +\n      Math.pow(touch2.clientY - touch1.clientY, 2)\n    );\n  };\n\n  const getTouchCenter = (touches: TouchList) => {\n    const touch1 = touches[0];\n    const touch2 = touches[1];\n    return {\n      x: (touch1.clientX + touch2.clientX) / 2,\n      y: (touch1.clientY + touch2.clientY) / 2,\n    };\n  };\n\n  const handleTouchStart = useCallback((e: TouchEvent) => {\n    if (e.touches.length === 2) {\n      e.preventDefault();\n      const distance = getTouchDistance(e.touches);\n      const center = getTouchCenter(e.touches);\n      lastTouchRef.current = { distance, center };\n      setState(prev => ({ ...prev, isPanning: true }));\n    } else if (e.touches.length === 1) {\n      const touch = e.touches[0];\n      touchStartRef.current = { x: touch.clientX, y: touch.clientY };\n    }\n  }, []);\n\n  const handleTouchMove = useCallback((e: TouchEvent) => {\n    if (e.touches.length === 2 && lastTouchRef.current) {\n      e.preventDefault();\n      const distance = getTouchDistance(e.touches);\n      const center = getTouchCenter(e.touches);\n      \n      // Zoom based on distance change\n      const scale = distance / lastTouchRef.current.distance;\n      const deltaZoom = (scale - 1) * 50; // Sensitivity adjustment\n      \n      setState(prev => {\n        const newZoom = Math.min(Math.max(prev.zoom + deltaZoom, minZoom), maxZoom);\n        onZoomChange?.(newZoom);\n        \n        // Pan based on center movement\n        const panDeltaX = center.x - lastTouchRef.current!.center.x;\n        const panDeltaY = center.y - lastTouchRef.current!.center.y;\n        \n        return {\n          ...prev,\n          zoom: newZoom,\n          panOffset: {\n            x: prev.panOffset.x + panDeltaX,\n            y: prev.panOffset.y + panDeltaY,\n          },\n        };\n      });\n      \n      lastTouchRef.current = { distance, center };\n    } else if (e.touches.length === 1 && touchStartRef.current && state.isPanning) {\n      // Single finger pan\n      const touch = e.touches[0];\n      const deltaX = touch.clientX - touchStartRef.current.x;\n      const deltaY = touch.clientY - touchStartRef.current.y;\n      \n      setState(prev => ({\n        ...prev,\n        panOffset: {\n          x: prev.panOffset.x + deltaX,\n          y: prev.panOffset.y + deltaY,\n        },\n      }));\n      \n      touchStartRef.current = { x: touch.clientX, y: touch.clientY };\n    }\n  }, [state.isPanning, minZoom, maxZoom, onZoomChange]);\n\n  const handleTouchEnd = useCallback((e: TouchEvent) => {\n    if (e.touches.length < 2) {\n      lastTouchRef.current = null;\n      setState(prev => ({ ...prev, isPanning: false }));\n    }\n    if (e.touches.length === 0) {\n      touchStartRef.current = null;\n    }\n  }, []);\n\n  const handlePinch = useCallback((e: TouchEvent) => {\n    // This is handled in handleTouchMove for better integration\n    e.preventDefault();\n  }, []);\n\n  // Add wheel event listener to canvas\n  useEffect(() => {\n    const canvas = canvasRef?.current;\n    if (!canvas) return;\n\n    canvas.addEventListener('wheel', handleWheel, { passive: false });\n    canvas.addEventListener('touchstart', handleTouchStart, { passive: false });\n    canvas.addEventListener('touchmove', handleTouchMove, { passive: false });\n    canvas.addEventListener('touchend', handleTouchEnd, { passive: false });\n\n    return () => {\n      canvas.removeEventListener('wheel', handleWheel);\n      canvas.removeEventListener('touchstart', handleTouchStart);\n      canvas.removeEventListener('touchmove', handleTouchMove);\n      canvas.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [canvasRef, handleWheel, handleTouchStart, handleTouchMove, handleTouchEnd]);\n\n  const zoomLevel = `${Math.round(state.zoom)}%`;\n  const canZoomIn = state.zoom < maxZoom;\n  const canZoomOut = state.zoom > minZoom;\n\n  return {\n    zoom: state.zoom,\n    panOffset: state.panOffset,\n    zoomIn,\n    zoomOut,\n    zoomToFit,\n    resetZoom,\n    setZoom,\n    setPanOffset,\n    handleWheel,\n    handlePinch,\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n    zoomLevel,\n    canZoomIn,\n    canZoomOut,\n  };\n}",
      "size_bytes": 9288
    },
    "client/src/hooks/useEnhancedSearch.tsx": {
      "content": "import { useState, useMemo, useCallback } from 'react';\n\ninterface SearchOptions {\n  caseSensitive?: boolean;\n  searchFields?: string[];\n  debounceMs?: number;\n  minLength?: number;\n}\n\ninterface SearchResult<T> {\n  items: T[];\n  query: string;\n  hasResults: boolean;\n  resultCount: number;\n  isSearching: boolean;\n}\n\nexport function useEnhancedSearch<T>(\n  items: T[],\n  options: SearchOptions = {}\n): [string, (query: string) => void, SearchResult<T>] {\n  const {\n    caseSensitive = false,\n    searchFields = [],\n    debounceMs = 300,\n    minLength = 0,\n  } = options;\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedQuery, setDebouncedQuery] = useState('');\n  const [isDebouncing, setIsDebouncing] = useState(false);\n\n  // Debounced search implementation\n  const updateQuery = useCallback((query: string) => {\n    setSearchQuery(query);\n    \n    if (debounceMs > 0) {\n      setIsDebouncing(true);\n      const timeoutId = setTimeout(() => {\n        setDebouncedQuery(query);\n        setIsDebouncing(false);\n      }, debounceMs);\n      \n      return () => clearTimeout(timeoutId);\n    } else {\n      setDebouncedQuery(query);\n    }\n  }, [debounceMs]);\n\n  // Enhanced search logic\n  const searchResult = useMemo((): SearchResult<T> => {\n    const query = debouncedQuery.trim();\n    \n    // Return all items if query is too short\n    if (query.length < minLength) {\n      return {\n        items,\n        query,\n        hasResults: true,\n        resultCount: items.length,\n        isSearching: false,\n      };\n    }\n\n    const searchTerm = caseSensitive ? query : query.toLowerCase();\n    \n    const filteredItems = items.filter((item) => {\n      // If no specific fields specified, search all string properties\n      if (searchFields.length === 0) {\n        return searchInAllFields(item, searchTerm, caseSensitive);\n      }\n      \n      // Search in specified fields\n      return searchFields.some(field => {\n        const value = getNestedValue(item, field);\n        if (typeof value === 'string') {\n          const searchValue = caseSensitive ? value : value.toLowerCase();\n          return searchValue.includes(searchTerm);\n        }\n        return false;\n      });\n    });\n\n    return {\n      items: filteredItems,\n      query,\n      hasResults: filteredItems.length > 0,\n      resultCount: filteredItems.length,\n      isSearching: isDebouncing,\n    };\n  }, [items, debouncedQuery, searchFields, caseSensitive, minLength, isDebouncing]);\n\n  return [searchQuery, updateQuery, searchResult];\n}\n\n// Helper function to search in all string fields of an object\nfunction searchInAllFields(item: unknown, searchTerm: string, caseSensitive: boolean): boolean {\n  if (typeof item === 'string') {\n    const value = caseSensitive ? item : item.toLowerCase();\n    return value.includes(searchTerm);\n  }\n  \n  if (typeof item === 'object' && item !== null) {\n    return Object.values(item).some(value => \n      searchInAllFields(value, searchTerm, caseSensitive)\n    );\n  }\n  \n  return false;\n}\n\n// Helper function to get nested object values by dot notation\nfunction getNestedValue(obj: unknown, path: string): unknown {\n  return path.split('.').reduce((current, key) => {\n    return current && typeof current === 'object' ? current[key] : undefined;\n  }, obj);\n}\n\n// Hook for search with highlighting\nexport function useSearchWithHighlight<T>(\n  items: T[],\n  options: SearchOptions & { highlightClassName?: string } = {}\n) {\n  const { highlightClassName = 'bg-yellow-200 dark:bg-yellow-900' } = options;\n  const [query, setQuery, result] = useEnhancedSearch(items, options);\n\n  const highlightText = useCallback((text: string, query: string): string => {\n    if (!query || !text) return text;\n    \n    const searchTerm = options.caseSensitive ? query : query.toLowerCase();\n    const textToSearch = options.caseSensitive ? text : text.toLowerCase();\n    \n    if (!textToSearch.includes(searchTerm)) return text;\n    \n    // Create regex for case-insensitive highlighting\n    const regex = new RegExp(`(${escapeRegExp(query)})`, options.caseSensitive ? 'g' : 'gi');\n    \n    return text.replace(regex, `<span class=\"${highlightClassName}\">$1</span>`);\n  }, [options.caseSensitive, highlightClassName]);\n\n  return {\n    query,\n    setQuery,\n    result,\n    highlightText,\n  };\n}\n\n// Helper function to escape special regex characters\nfunction escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n// Hook for fuzzy search (more advanced matching)\nexport function useFuzzySearch<T>(\n  items: T[],\n  options: SearchOptions & { \n    threshold?: number;\n    includeScore?: boolean;\n  } = {}\n) {\n  const { threshold = 0.6, includeScore = false } = options;\n  const [query, setQuery] = useState('');\n\n  const searchResult = useMemo(() => {\n    if (!query.trim()) {\n      return {\n        items,\n        query,\n        hasResults: true,\n        resultCount: items.length,\n        isSearching: false,\n      };\n    }\n\n    const searchTerm = options.caseSensitive ? query : query.toLowerCase();\n    const results = items\n      .map(item => {\n        const score = calculateFuzzyScore(item, searchTerm, options);\n        return { item, score };\n      })\n      .filter(({ score }) => score >= threshold)\n      .sort((a, b) => b.score - a.score);\n\n    return {\n      items: includeScore ? results : results.map(r => r.item),\n      query,\n      hasResults: results.length > 0,\n      resultCount: results.length,\n      isSearching: false,\n    };\n  }, [items, query, options, threshold, includeScore]);\n\n  return [query, setQuery, searchResult] as const;\n}\n\n// Simple fuzzy matching score calculation\nfunction calculateFuzzyScore(item: unknown, searchTerm: string, options: SearchOptions): number {\n  const searchFields = options.searchFields || [];\n  let maxScore = 0;\n\n  if (searchFields.length === 0) {\n    maxScore = Math.max(maxScore, fuzzyMatchScore(JSON.stringify(item), searchTerm));\n  } else {\n    searchFields.forEach(field => {\n      const value = getNestedValue(item, field);\n      if (typeof value === 'string') {\n        const fieldValue = options.caseSensitive ? value : value.toLowerCase();\n        maxScore = Math.max(maxScore, fuzzyMatchScore(fieldValue, searchTerm));\n      }\n    });\n  }\n\n  return maxScore;\n}\n\n// Calculate fuzzy match score between two strings\nfunction fuzzyMatchScore(text: string, pattern: string): number {\n  if (pattern.length === 0) return 1;\n  if (text.length === 0) return 0;\n\n  let score = 0;\n  let patternIndex = 0;\n  let previousIndexInText = -1;\n\n  for (let textIndex = 0; textIndex < text.length; textIndex++) {\n    if (patternIndex < pattern.length && text[textIndex] === pattern[patternIndex]) {\n      score += 1;\n      \n      // Bonus for consecutive matches\n      if (previousIndexInText + 1 === textIndex) {\n        score += 0.5;\n      }\n      \n      previousIndexInText = textIndex;\n      patternIndex++;\n    }\n  }\n\n  // Normalize score\n  const matchRatio = patternIndex / pattern.length;\n  const lengthRatio = pattern.length / text.length;\n  \n  return matchRatio * lengthRatio;\n}",
      "size_bytes": 7079
    },
    "client/src/hooks/useResponsive.tsx": {
      "content": "import { useState, useEffect } from 'react';\n\n// Enhanced responsive breakpoints with better large screen support\nconst breakpoints = {\n  xs: 0,\n  sm: 640,\n  md: 768,\n  lg: 1024,\n  xl: 1280,\n  '2xl': 1536,\n  '3xl': 1920,\n  '4xl': 2560,\n} as const;\n\ntype Breakpoint = keyof typeof breakpoints;\n\ninterface ResponsiveValues {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isLargeDesktop: boolean;\n  isUltraWide: boolean;\n  screenWidth: number;\n  screenHeight: number;\n  orientation: 'portrait' | 'landscape';\n  currentBreakpoint: Breakpoint;\n  isTouch: boolean;\n  aspectRatio: number;\n  devicePixelRatio: number;\n  isHighDensity: boolean;\n}\n\nexport function useResponsive(): ResponsiveValues {\n  const [values, setValues] = useState<ResponsiveValues>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        isMobile: false,\n        isTablet: false,\n        isDesktop: true,\n        isLargeDesktop: false,\n        isUltraWide: false,\n        screenWidth: 1024,\n        screenHeight: 768,\n        orientation: 'landscape',\n        currentBreakpoint: 'lg',\n        isTouch: false,\n        aspectRatio: 1.33,\n        devicePixelRatio: 1,\n        isHighDensity: false,\n      };\n    }\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const aspectRatio = width / height;\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    \n    return {\n      isMobile: width < breakpoints.md,\n      isTablet: width >= breakpoints.md && width < breakpoints.lg,\n      isDesktop: width >= breakpoints.lg && width < breakpoints['3xl'],\n      isLargeDesktop: width >= breakpoints['3xl'] && width < breakpoints['4xl'],\n      isUltraWide: width >= breakpoints['4xl'],\n      screenWidth: width,\n      screenHeight: height,\n      orientation: width > height ? 'landscape' : 'portrait',\n      currentBreakpoint: getCurrentBreakpoint(width),\n      isTouch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,\n      aspectRatio,\n      devicePixelRatio,\n      isHighDensity: devicePixelRatio > 1.5,\n    };\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const aspectRatio = width / height;\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      \n      setValues({\n        isMobile: width < breakpoints.md,\n        isTablet: width >= breakpoints.md && width < breakpoints.lg,\n        isDesktop: width >= breakpoints.lg && width < breakpoints['3xl'],\n        isLargeDesktop: width >= breakpoints['3xl'] && width < breakpoints['4xl'],\n        isUltraWide: width >= breakpoints['4xl'],\n        screenWidth: width,\n        screenHeight: height,\n        orientation: width > height ? 'landscape' : 'portrait',\n        currentBreakpoint: getCurrentBreakpoint(width),\n        isTouch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,\n        aspectRatio,\n        devicePixelRatio,\n        isHighDensity: devicePixelRatio > 1.5,\n      });\n    };\n\n    const handleOrientationChange = () => {\n      // Delay to ensure viewport has updated\n      setTimeout(handleResize, 100);\n    };\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', handleOrientationChange);\n    \n    // Handle dynamic viewport height changes on mobile\n    const setVH = () => {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    };\n    \n    setVH();\n    window.addEventListener('resize', setVH);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleOrientationChange);\n      window.removeEventListener('resize', setVH);\n    };\n  }, []);\n\n  return values;\n}\n\nfunction getCurrentBreakpoint(width: number): Breakpoint {\n  if (width >= breakpoints['4xl']) return '4xl';\n  if (width >= breakpoints['3xl']) return '3xl';\n  if (width >= breakpoints['2xl']) return '2xl';\n  if (width >= breakpoints.xl) return 'xl';\n  if (width >= breakpoints.lg) return 'lg';\n  if (width >= breakpoints.md) return 'md';\n  if (width >= breakpoints.sm) return 'sm';\n  return 'xs';\n}\n\n// Hook for checking specific breakpoints\nexport function useBreakpoint(breakpoint: Breakpoint): boolean {\n  const { currentBreakpoint } = useResponsive();\n  const breakpointOrder: Breakpoint[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl'];\n  \n  const currentIndex = breakpointOrder.indexOf(currentBreakpoint);\n  const targetIndex = breakpointOrder.indexOf(breakpoint);\n  \n  return currentIndex >= targetIndex;\n}\n\n// Hook for viewport-aware sizing\nexport function useViewportSize() {\n  const [size, setSize] = useState(() => ({\n    width: typeof window !== 'undefined' ? window.innerWidth : 1024,\n    height: typeof window !== 'undefined' ? window.innerHeight : 768,\n    vw: typeof window !== 'undefined' ? window.innerWidth / 100 : 10.24,\n    vh: typeof window !== 'undefined' ? window.innerHeight / 100 : 7.68,\n  }));\n\n  useEffect(() => {\n    const updateSize = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        vw: window.innerWidth / 100,\n        vh: window.innerHeight / 100,\n      });\n    };\n\n    window.addEventListener('resize', updateSize);\n    window.addEventListener('orientationchange', updateSize);\n    \n    return () => {\n      window.removeEventListener('resize', updateSize);\n      window.removeEventListener('orientationchange', updateSize);\n    };\n  }, []);\n\n  return size;\n}",
      "size_bytes": 5537
    },
    "client/src/hooks/useTheme.ts": {
      "content": "import { createContext, useContext } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\nexport type { Theme, ThemeContextType };\n",
      "size_bytes": 474
    },
    "client/src/hooks/useUndoRedo.tsx": {
      "content": "import { useState, useCallback, useRef } from 'react';\n\ninterface UndoRedoState<T> {\n  past: T[];\n  present: T;\n  future: T[];\n}\n\ninterface UndoRedoActions {\n  canUndo: boolean;\n  canRedo: boolean;\n  undo: () => void;\n  redo: () => void;\n  set: (newState: T) => void;\n  reset: (initialState: T) => void;\n  clear: () => void;\n}\n\ninterface UndoRedoOptions {\n  maxHistorySize?: number;\n  debounceMs?: number;\n  ignoreIdenticalStates?: boolean;\n}\n\nexport function useUndoRedo<T>(\n  initialState: T,\n  options: UndoRedoOptions = {}\n): [T, UndoRedoActions] {\n  const {\n    maxHistorySize = 50,\n    debounceMs = 500,\n    ignoreIdenticalStates = true,\n  } = options;\n\n  const [state, setState] = useState<UndoRedoState<T>>({\n    past: [],\n    present: initialState,\n    future: [],\n  });\n\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const pendingStateRef = useRef<T | null>(null);\n\n  const addToHistory = useCallback((newState: T) => {\n    setState(currentState => {\n      // Ignore identical states if option is enabled\n      if (ignoreIdenticalStates && JSON.stringify(currentState.present) === JSON.stringify(newState)) {\n        return currentState;\n      }\n\n      const newPast = [...currentState.past, currentState.present];\n      \n      // Limit history size\n      if (newPast.length > maxHistorySize) {\n        newPast.shift();\n      }\n\n      return {\n        past: newPast,\n        present: newState,\n        future: [], // Clear future when new state is added\n      };\n    });\n  }, [maxHistorySize, ignoreIdenticalStates]);\n\n  const set = useCallback((newState: T) => {\n    if (debounceMs > 0) {\n      // Store the new state temporarily\n      pendingStateRef.current = newState;\n      \n      // Clear existing timeout\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      \n      // Set new timeout\n      timeoutRef.current = setTimeout(() => {\n        if (pendingStateRef.current !== null) {\n          addToHistory(pendingStateRef.current);\n          pendingStateRef.current = null;\n        }\n      }, debounceMs);\n      \n      // Update present state immediately for UI responsiveness\n      setState(currentState => ({\n        ...currentState,\n        present: newState,\n      }));\n    } else {\n      addToHistory(newState);\n    }\n  }, [debounceMs, addToHistory]);\n\n  const undo = useCallback(() => {\n    setState(currentState => {\n      if (currentState.past.length === 0) {\n        return currentState;\n      }\n\n      const previous = currentState.past[currentState.past.length - 1];\n      const newPast = currentState.past.slice(0, currentState.past.length - 1);\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [currentState.present, ...currentState.future],\n      };\n    });\n  }, []);\n\n  const redo = useCallback(() => {\n    setState(currentState => {\n      if (currentState.future.length === 0) {\n        return currentState;\n      }\n\n      const next = currentState.future[0];\n      const newFuture = currentState.future.slice(1);\n\n      return {\n        past: [...currentState.past, currentState.present],\n        present: next,\n        future: newFuture,\n      };\n    });\n  }, []);\n\n  const reset = useCallback((newInitialState: T) => {\n    setState({\n      past: [],\n      present: newInitialState,\n      future: [],\n    });\n  }, []);\n\n  const clear = useCallback(() => {\n    setState(currentState => ({\n      past: [],\n      present: currentState.present,\n      future: [],\n    }));\n  }, []);\n\n  // Cleanup timeout on unmount\n  const cleanup = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  // Auto-cleanup effect would go here if this were used in a component\n  // For now, we'll rely on the consuming component to call cleanup if needed\n\n  const actions: UndoRedoActions = {\n    canUndo: state.past.length > 0,\n    canRedo: state.future.length > 0,\n    undo,\n    redo,\n    set,\n    reset,\n    clear,\n  };\n\n  return [state.present, actions];\n}\n\n// Hook for managing canvas state with undo/redo\nexport function useCanvasHistory<T>(initialElements: T[], options?: UndoRedoOptions) {\n  const [elements, actions] = useUndoRedo(initialElements, options);\n\n  const addElement = useCallback((element: T) => {\n    actions.set([...elements, element]);\n  }, [elements, actions]);\n\n  const removeElement = useCallback((predicate: (element: T) => boolean) => {\n    actions.set(elements.filter(el => !predicate(el)));\n  }, [elements, actions]);\n\n  const updateElement = useCallback((predicate: (element: T) => boolean, updater: (element: T) => T) => {\n    actions.set(elements.map(el => predicate(el) ? updater(el) : el));\n  }, [elements, actions]);\n\n  const replaceElements = useCallback((newElements: T[]) => {\n    actions.set(newElements);\n  }, [actions]);\n\n  return {\n    elements,\n    addElement,\n    removeElement,\n    updateElement,\n    replaceElements,\n    ...actions,\n  };\n}",
      "size_bytes": 4963
    },
    "client/src/lib/form-utils.ts": {
      "content": "import * as React from \"react\";\nimport {\n  FieldPath,\n  FieldValues,\n  useFormContext,\n} from \"react-hook-form\";\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nexport const FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n);\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nexport const FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n);\n\nexport const useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n",
      "size_bytes": 1165
    },
    "client/src/lib/sidebar-utils.ts": {
      "content": "import * as React from \"react\";\n\nexport const SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nexport const FAVORITES_COOKIE_NAME = \"sidebar:favorites\";\nexport const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nexport const SIDEBAR_WIDTH = \"20rem\";\nexport const SIDEBAR_WIDTH_MOBILE = \"18rem\";\nexport const SIDEBAR_WIDTH_ICON = \"4rem\";\nexport const SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\n// Cookie utilities\nexport const getCookie = (name: string): string | null => {\n  if (typeof document === 'undefined') return null;\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop()?.split(';').shift() || null;\n  return null;\n};\n\nexport const setCookie = (name: string, value: string, maxAge: number = SIDEBAR_COOKIE_MAX_AGE) => {\n  if (typeof document === 'undefined') return;\n  document.cookie = `${name}=${value}; path=/; max-age=${maxAge}; SameSite=Lax; Secure`;\n};\n\nexport type SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n  // Favorites functionality\n  favorites: string[];\n  addToFavorites: (id: string) => void;\n  removeFromFavorites: (id: string) => void;\n  isFavorite: (id: string) => boolean;\n};\n\nexport const SidebarContext = React.createContext<SidebarContext | null>(null);\n\nexport function useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n",
      "size_bytes": 1615
    },
    "client/src/lib/toast.ts": {
      "content": "export { toast } from \"sonner\";\n",
      "size_bytes": 32
    },
    "client/src/lib/ui-variants.ts": {
      "content": "import { cva } from \"class-variance-authority\";\n\nexport const badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport const toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport const navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n);\n",
      "size_bytes": 3129
    },
    "client/src/lib/utils.ts": {
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "size_bytes": 166
    },
    "client/src/pages/Index.tsx": {
      "content": "import React, { useState, useCallback, useMemo, memo, useRef } from \"react\";\nimport { Plant, Terrain, Structure } from \"@/types/canvasTypes\";\nimport { UnifiedToolbar } from \"@/components/UnifiedToolbar\";\nimport { PlantLibrary } from \"@/components/PlantLibrary\";\nimport { Canvas, CanvasRef } from \"@/components/Canvas\";\nimport { WelcomeModal } from \"@/components/WelcomeModal\";\nimport { TerrainLibrary } from \"@/components/TerrainLibrary\";\nimport { MobileNavigation } from \"@/components/MobileNavigation\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { StructureLibrary } from \"@/components/StructureLibrary\";\nimport { useResponsive } from \"@/hooks/useResponsive\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ChevronLeft, ChevronRight, Leaf, Mountain, Building, Sparkles, X } from \"lucide-react\";\nimport Joyride, { STATUS } from 'react-joyride';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst MemoizedCanvas = memo(Canvas);\nconst MemoizedPlantLibrary = memo(PlantLibrary);\nconst MemoizedTerrainLibrary = memo(TerrainLibrary);\nconst MemoizedStructuresLibrary = memo(StructureLibrary);\n\nconst Index = () => {\n  const [selectedStructure, setSelectedStructure] = useState<Structure | null>(null);\n  const [selectedTool, setSelectedTool] = useState<string>(\"select\");\n  const [selectedPlant, setSelectedPlant] = useState<Plant | null>(null);\n  const [selectedTerrain, setSelectedTerrain] = useState<Terrain | null>(null);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const [activeLibrary, setActiveLibrary] = useState<\"plants\" | \"terrain\" | \"structures\">(\"plants\");\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [canvasSize, setCanvasSize] = useState({ width: 50, height: 30 });\n  const [showMobileLibrary, setShowMobileLibrary] = useState(false);\n  const canvasRef = useRef<CanvasRef>(null);\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n  const [runTour, setRunTour] = useState(false);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n\n  const analyticsData = useMemo(() => {\n    const elements = canvasRef.current?.getState() || [];\n    const plantCount = elements.filter(e => e.type === 'plant').length;\n    const terrainArea = elements.filter(e => e.type === 'terrain').reduce((sum, e) => sum + (e.realWorldWidth * e.realWorldHeight), 0);\n    const structureCount = elements.filter(e => e.type === 'structure').length;\n    \n    return [\n      { name: 'Plantas', value: plantCount, color: '#22c55e' },\n      { name: 'Terreno (m²)', value: Math.round(terrainArea), color: '#f59e0b' },\n      { name: 'Estruturas', value: structureCount, color: '#3b82f6' },\n    ];\n  }, []);\n\n  const tourSteps = [\n    {\n      target: '.layout-container',\n      content: 'Bem-vindo ao Agroecologia Planner! Vamos fazer um tour rápido.',\n    },\n    {\n      target: '.unified-toolbar',\n      content: 'Esta é a barra de ferramentas principal. Aqui você seleciona ferramentas como selecionar, desenhar formas e mais.',\n    },\n    {\n      target: '.canvas-area',\n      content: 'Esta é a área do canvas onde você cria seu planejamento. Use o mouse para interagir.',\n    },\n    {\n      target: '.sidebar',\n      content: 'Aqui está a biblioteca de itens. Selecione plantas, terrenos ou estruturas para adicionar ao canvas.',\n    },\n    {\n      target: '.export-button',\n      content: 'Quando terminar, use este botão para exportar seu projeto como imagem.',\n    },\n  ];\n\n  const { isMobile, isTablet } = useResponsive();\n  const isCompact = isMobile || isTablet;\n\n  const handleExportCanvas = useCallback(() => {\n    if (canvasRef.current) {\n      canvasRef.current.exportFullCanvas();\n    }\n  }, []);\n\n  const handleToolSelect = useCallback((tool: string) => {\n    setSelectedTool(tool);\n    if (tool === \"terrain\") {\n      setActiveLibrary(\"terrain\");\n    } else if (tool === \"select\" || tool === \"rectangle\" || tool === \"circle\") {\n      setActiveLibrary(\"plants\");\n    }\n  }, []);\n\n  const handleLibraryChange = useCallback((library: \"plants\" | \"terrain\" | \"structures\") => {\n    setActiveLibrary(library);\n    if (library === \"terrain\" && selectedTool !== \"terrain\") {\n      setSelectedTool(\"terrain\");\n    } else if (library === \"plants\" && selectedTool === \"terrain\") {\n      setSelectedTool(\"select\");\n    } else if (library === \"structures\" && selectedTool === \"terrain\") {\n      setSelectedTool(\"select\");\n    }\n    \n    // Show mobile library when changing library on mobile\n    if (isCompact) {\n      setShowMobileLibrary(true);\n    }\n  }, [selectedTool, isCompact]);\n\n  const handlePlantUsed = useCallback(() => {\n    if (isCompact) {\n      setShowMobileLibrary(false);\n    }\n  }, [isCompact]);\n\n  const handleTerrainUsed = useCallback(() => {\n    if (isCompact) {\n      setShowMobileLibrary(false);\n    }\n  }, [isCompact]);\n\n  const handleStructureUsed = useCallback(() => {\n    if (isCompact) {\n      setShowMobileLibrary(false);\n    }\n  }, [isCompact]);\n\n  const handleWelcomeClose = useCallback(() => {\n    setShowWelcome(false);\n    setRunTour(true);\n  }, []);\n  \n  const handleCanvasSizeChange = useCallback((size: { width: number; height: number }) => {\n    setCanvasSize(size);\n  }, []);\n\n  const toggleSidebar = useCallback(() => {\n    setSidebarCollapsed(prev => !prev);\n  }, []);\n\n  const toggleMobileLibrary = useCallback(() => {\n    setShowMobileLibrary(prev => !prev);\n  }, []);\n\n  const closeMobileLibrary = useCallback(() => {\n    setShowMobileLibrary(false);\n  }, []);\n\n  // Memoized sidebar content with enhanced styling\n  const sidebarContent = useMemo(() => (\n    <div className=\"h-full flex flex-col\">\n      <Tabs \n        value={activeLibrary} \n        onValueChange={(value) => handleLibraryChange(value as \"plants\" | \"terrain\" | \"structures\")} \n        className=\"flex-1 flex flex-col\"\n      >\n        <div className=\"sticky top-0 z-10 mx-4 mt-4 mb-2 space-y-3 bg-gradient-to-b from-white/90 to-transparent dark:from-gray-900/90 backdrop-blur-xl pt-2 pb-4 rounded-2xl\">\n          {/* Enhanced Tab Navigation */}\n          <div className=\"space-y-2\">\n            <TabsList className=\"grid w-full grid-cols-2 h-12 bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-lg border border-white/20 dark:border-gray-700/20 rounded-2xl p-1\">\n              <TabsTrigger \n                value=\"plants\" \n                className=\"flex items-center gap-2 text-sm font-semibold rounded-xl h-10 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-400 data-[state=active]:to-emerald-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n              >\n                <Leaf className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Plantas</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"terrain\" \n                className=\"flex items-center gap-2 text-sm font-semibold rounded-xl h-10 data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-400 data-[state=active]:to-amber-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n              >\n                <Mountain className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Terreno</span>\n              </TabsTrigger>\n            </TabsList>\n            \n            <div className=\"flex justify-center\">\n              <TabsList className=\"w-48 h-12 bg-white/60 dark:bg-gray-800/60 backdrop-blur-xl shadow-lg border border-white/20 dark:border-gray-700/20 rounded-2xl p-1\">\n                <TabsTrigger \n                  value=\"structures\" \n                  className=\"flex items-center gap-2 text-sm font-semibold rounded-xl h-10 w-full data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-400 data-[state=active]:to-indigo-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n                >\n                  <Building className=\"h-4 w-4\" />\n                  <span>Estruturas</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n          </div>\n        </div>\n\n        <TabsContent value=\"plants\" className=\"flex-1 mt-0\">\n          <MemoizedPlantLibrary \n            selectedPlant={selectedPlant}\n            onPlantSelect={setSelectedPlant}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"terrain\" className=\"flex-1 mt-0\">\n          <MemoizedTerrainLibrary \n            selectedTerrain={selectedTerrain}\n            onTerrainSelect={setSelectedTerrain}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"structures\" className=\"flex-1 mt-0\">\n          <MemoizedStructuresLibrary\n            selectedStructure={selectedStructure}\n            onStructureSelect={setSelectedStructure}\n            className=\"flex-1\"\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  ), [activeLibrary, selectedPlant, selectedTerrain, selectedStructure, handleLibraryChange]);\n\n  // Enhanced mobile library modal\n  const mobileLibraryModal = useMemo(() => (\n    <div className={cn(\n      \"fixed inset-0 z-50 transition-all duration-300\",\n      showMobileLibrary ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n    )}>\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/30 backdrop-blur-sm\"\n        onClick={closeMobileLibrary}\n      />\n      \n      {/* Modal */}\n      <div className={cn(\n        \"absolute inset-x-4 top-4 bottom-4 bg-white/90 dark:bg-gray-900/90 backdrop-blur-xl rounded-3xl border border-white/20 dark:border-gray-700/20 shadow-2xl transition-all duration-300\",\n        showMobileLibrary ? \"scale-100 translate-y-0\" : \"scale-95 translate-y-8\"\n      )}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-white/20 dark:border-gray-700/20\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 rounded-xl bg-gradient-to-br from-green-400 to-emerald-500 flex items-center justify-center\">\n              <Sparkles className=\"w-4 h-4 text-white\" />\n            </div>\n            <h2 className=\"text-lg font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent dark:from-green-400 dark:to-emerald-400\">\n              Bibliotecas\n            </h2>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={closeMobileLibrary}\n            className=\"h-10 w-10 p-0 rounded-xl hover:bg-red-100 dark:hover:bg-red-900/50 text-red-500 dark:text-red-400\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {sidebarContent}\n        </div>\n      </div>\n    </div>\n  ), [showMobileLibrary, sidebarContent, closeMobileLibrary]);\n\n  return (\n    <ThemeProvider>\n      <div className=\"h-screen flex flex-col overflow-hidden layout-container\">\n        {/* Enhanced Unified Toolbar */}\n        <UnifiedToolbar \n          selectedTool={selectedTool}\n          onToolSelect={handleToolSelect}\n          onUndo={() => canvasRef.current?.undo()}\n          onRedo={() => canvasRef.current?.redo()}\n          canUndo={canUndo}\n          canRedo={canRedo}\n          canvasSize={canvasSize}\n          onCanvasSizeChange={handleCanvasSizeChange}\n        />\n\n        {/* Main Content with Glass Morphism */}\n        <div className=\"flex-1 flex min-h-0 relative\">\n          {/* Canvas with enhanced styling */}\n          <div className=\"flex-1 relative canvas-area\">\n            <Canvas \n              ref={canvasRef}\n              selectedTool={selectedTool}\n              selectedPlant={selectedPlant}\n              selectedTerrain={selectedTerrain}\n              selectedStructure={selectedStructure}\n              onPlantUsed={handlePlantUsed}\n              onTerrainUsed={handleTerrainUsed}\n              onStructureUsed={handleStructureUsed}\n              onToolChange={handleToolSelect}\n              canvasSize={canvasSize}\n              onCanvasSizeChange={handleCanvasSizeChange}\n              onHistoryChange={(cu, cr) => {\n                setCanUndo(cu);\n                setCanRedo(cr);\n              }}\n            />\n          </div>\n\n          {/* Enhanced Desktop Sidebar */}\n          {!isCompact && (\n            <div className={cn(\n              \"sidebar transition-all duration-500 ease-in-out relative\",\n              \"bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl shadow-2xl\",\n              \"border-l border-white/20 dark:border-gray-700/20\",\n              \"max-w-[400px] min-w-0\",\n              sidebarCollapsed ? \"w-0 overflow-hidden\" : \"w-96\"\n            )}>\n              {/* Enhanced Sidebar Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleSidebar}\n                className={cn(\n                  \"absolute top-6 z-20 h-12 w-12 rounded-2xl transition-all duration-300\",\n                  \"bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl\",\n                  \"border border-white/20 dark:border-gray-700/20 shadow-lg\",\n                  \"hover:shadow-xl hover:scale-110 hover:bg-white/90 dark:hover:bg-gray-700/90\",\n                  sidebarCollapsed ? \"-left-6\" : \"left-6\"\n                )}\n              >\n                {sidebarCollapsed ? (\n                  <ChevronLeft className=\"h-5 w-5\" />\n                ) : (\n                  <ChevronRight className=\"h-5 w-5\" />\n                )}\n              </Button>\n\n              {/* Sidebar Content */}\n              {!sidebarCollapsed && (\n                <div className=\"h-full pt-4\">\n                  {sidebarContent}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Enhanced Mobile Navigation */}\n        {isCompact && (\n          <MobileNavigation\n            selectedTool={selectedTool}\n            onToolSelect={handleToolSelect}\n            activeLibrary={activeLibrary}\n            onLibraryChange={handleLibraryChange}\n            onShowLibrary={toggleMobileLibrary}\n          />\n        )}\n\n        {/* Mobile Library Modal */}\n        {isCompact && mobileLibraryModal}\n\n        {/* Enhanced Welcome Modal */}\n        <WelcomeModal \n          open={showWelcome}\n          onClose={handleWelcomeClose}\n        />\n\n        {/* Analytics Dialog */}\n        <Dialog open={showAnalytics} onOpenChange={setShowAnalytics}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Estatísticas do Projeto</DialogTitle>\n            </DialogHeader>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analyticsData}>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"#8884d8\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </DialogContent>\n        </Dialog>\n\n        {/* Guided Tour */}\n        <Joyride\n          steps={tourSteps}\n          run={runTour}\n          continuous\n          showProgress\n          showSkipButton\n          callback={(data) => {\n            const { status } = data;\n            if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\n              setRunTour(false);\n            }\n          }}\n          styles={{\n            options: {\n              primaryColor: '#10b981',\n            }\n          }}\n        />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default memo(Index);",
      "size_bytes": 15828
    },
    "client/src/pages/NotFound.tsx": {
      "content": "import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n",
      "size_bytes": 739
    },
    "client/src/types/canvasTypes.ts": {
      "content": "import { Point, Dimensions } from '@/utils/canvasCoordinates';\nimport { CanvasTool, ElementType, BrushType, ResizeHandle } from '@/utils/canvasConstants';\n\n// Plant interface\nexport interface Plant {\n  id: string;\n  name: string;\n  icon: string;\n  spacing: string;\n  season?: string;\n  category: string;\n  color?: string;\n  description?: string;\n  difficulty?: string;\n  waterNeeds?: string;\n  [key: string]: unknown;\n}\n\n// Terrain interface\nexport interface Terrain {\n  id: string;\n  name: string;\n  icon?: string;\n  color: string;\n  pattern?: string;\n  category: string;\n  description?: string;\n  selectedBrushMode?: 'rectangle' | 'circle' | 'brush';\n  brushThickness?: number;\n  brushType?: BrushType;\n  [key: string]: unknown;\n}\n\n// Structure interface\nexport interface Structure {\n  id: string;\n  name: string;\n  category: string;\n  icon: string;\n  color: string;\n  size: { width: number; height: number };\n  description: string;\n  [key: string]: unknown;\n}\n\n// Drawing element interface\nexport interface DrawingElement {\n  id: number;\n  type: ElementType;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  radius?: number;\n  plant?: Plant;\n  terrain?: Terrain;\n  structure?: Structure;\n  selected?: boolean;\n  rotation?: number;\n  // Real-world size in meters (for terrain elements)\n  realWorldWidth?: number;\n  realWorldHeight?: number;\n  // Terrain brush properties\n  brushType?: BrushType;\n  texture?: string;\n  // Path points for trail-like terrains\n  pathPoints?: Point[];\n  // Brush properties\n  selectedBrushMode?: 'rectangle' | 'circle' | 'brush';\n  brushThickness?: number;\n}\n\n// Canvas state interfaces\nexport interface CanvasState {\n  elements: DrawingElement[];\n  selectedTool: CanvasTool;\n  selectedPlant: Plant | null;\n  selectedTerrain: Terrain | null;\n  selectedStructure: Structure | null;\n  zoom: number;\n  panOffset: Point;\n  showGrid: boolean;\n  canvasDimensions: Dimensions;\n  canvasRealSize: Dimensions;\n}\n\nexport interface InteractionState {\n  isDrawing: boolean;\n  isDragging: boolean;\n  isPanning: boolean;\n  isSpacePressed: boolean;\n  isResizing: boolean;\n  isDrawingTerrain: boolean;\n  dragElement: DrawingElement | null;\n  currentShape: DrawingElement | null;\n  startPos: Point;\n  dragOffset: Point;\n  lastPanPoint: Point;\n  currentTerrainPath: Point[];\n  resizeHandle: ResizeHandle | null;\n  resizeElement: DrawingElement | null;\n  resizeStartPos: Point;\n  originalElementBounds: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport interface CanvasProps {\n  selectedTool: string;\n  selectedPlant: Plant | null;\n  selectedTerrain: Terrain | null;\n  selectedStructure?: Structure | null;\n  onPlantUsed: () => void;\n  onTerrainUsed: () => void;\n  onStructureUsed?: () => void;\n  onToolChange: (tool: string) => void;\n  canvasSize?: Dimensions;\n  onCanvasSizeChange?: (size: Dimensions) => void;\n  onHistoryChange?: (canUndo: boolean, canRedo: boolean) => void;\n}\n\n// Event handler types\nexport type MouseEventHandler = (e: React.MouseEvent) => void;\nexport type TouchEventHandler = (e: React.TouchEvent) => void;\nexport type DragEventHandler = (e: React.DragEvent) => void;\n\n// Canvas context interface for state management\nexport interface CanvasContextType {\n  // State\n  canvasState: CanvasState;\n  interactionState: InteractionState;\n  \n  // Actions\n  updateCanvasState: (updates: Partial<CanvasState>) => void;\n  updateInteractionState: (updates: Partial<InteractionState>) => void;\n  \n  // Element operations\n  addElement: (element: DrawingElement) => void;\n  updateElement: (id: number, updates: Partial<DrawingElement>) => void;\n  removeElement: (id: number) => void;\n  selectElement: (id: number) => void;\n  clearSelection: () => void;\n  \n  // Tool operations\n  setTool: (tool: CanvasTool) => void;\n  setPlant: (plant: Plant | null) => void;\n  setTerrain: (terrain: Terrain | null) => void;\n  \n  // View operations\n  setZoom: (zoom: number) => void;\n  setPanOffset: (offset: Point) => void;\n  toggleGrid: () => void;\n  \n  // Undo/Redo\n  undo: () => void;\n  redo: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n}\n\n// Utility type for element bounds\nexport interface ElementBounds {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  centerX: number;\n  centerY: number;\n}\n\n// Utility type for collision detection\nexport interface CollisionBox {\n  left: number;\n  top: number;\n  right: number;\n  bottom: number;\n}\n\n// Canvas tool configuration\nexport interface ToolConfig {\n  cursor: string;\n  requiresSelection?: boolean;\n  allowsMultiSelect?: boolean;\n  showHandles?: boolean;\n}\n\n// Export all types for use in other components\nexport type {\n  Point,\n  Dimensions,\n  CanvasTool,\n  ElementType,\n  BrushType,\n  ResizeHandle\n};\n",
      "size_bytes": 4731
    },
    "client/src/utils/canvasConstants.ts": {
      "content": "// Canvas Constants and Configuration\nexport const CANVAS_CONSTANTS = {\n  // Grid and measurements\n  GRID_SIZE_METERS: 2, // Each grid square = 2m x 2m\n  \n  // UI measurements\n  HANDLE_SIZE: 8, // Size of resize handles in pixels\n  MIN_ELEMENT_SIZE: 20, // Minimum size for elements in pixels\n  MIN_SHAPE_SIZE: 10, // Minimum size for drawn shapes\n  \n  // Canvas boundaries\n  DEFAULT_CANVAS_REAL_SIZE: { width: 50, height: 30 }, // meters\n  DEFAULT_CANVAS_DIMENSIONS: { width: 1000, height: 800 }, // pixels\n  \n  // Zoom settings\n  ZOOM_SETTINGS: {\n    MOBILE: { min: 25, max: 200, step: 15 },\n    TABLET: { min: 25, max: 200, step: 15 },\n    DESKTOP: { min: 10, max: 300, step: 15 },\n    LARGE_DESKTOP: { min: 10, max: 400, step: 10 },\n    ULTRA_WIDE: { min: 10, max: 400, step: 10 }\n  },\n  \n  // Tool cursors\n  CURSORS: {\n    select: 'cursor-default',\n    delete: 'cursor-pointer',\n    plant: 'cursor-copy',\n    terrain: 'cursor-copy',\n    rectangle: 'cursor-crosshair',\n    circle: 'cursor-crosshair',\n    panning: 'cursor-grab',\n    grabbing: 'cursor-grabbing'\n  },\n  \n  // Drawing settings\n  TERRAIN_BRUSH: {\n    DEFAULT_THICKNESS: 20,\n    PATH_DISTANCE_THRESHOLD: 5, // Minimum distance between path points\n    DEFAULT_PATH_LENGTH: 5 // Default path length for terrain\n  },\n  \n  // Animation and transitions\n  TRANSITIONS: {\n    ZOOM_DURATION: 200,\n    PAN_DURATION: 200,\n    SELECTION_DURATION: 200\n  },\n  \n  // Toast durations\n  TOAST_DURATION: {\n    SUCCESS: 2000,\n    ERROR: 3000,\n    INFO: 1000\n  },\n  \n  // Performance settings\n  PERFORMANCE: {\n    UNDO_HISTORY_SIZE: 50,\n    DEBOUNCE_MS: 300,\n    VIEWPORT_BUFFER: 100 // Extra pixels around viewport for rendering\n  }\n} as const;\n\n// Tool types\nexport type CanvasTool = 'select' | 'rectangle' | 'circle' | 'delete' | 'terrain';\n\n// Canvas modes\nexport type CanvasMode = 'drawing' | 'selecting' | 'dragging' | 'resizing' | 'panning';\n\n// Brush types for terrain\nexport type BrushType = 'rectangle' | 'circle' | 'path' | 'brush';\n\n// Element types\nexport type ElementType = 'plant' | 'terrain' | 'rectangle' | 'circle';\n\n// Resize handle positions\nexport type ResizeHandle = 'nw' | 'ne' | 'sw' | 'se';\n\n// Keyboard shortcuts mapping\nexport const KEYBOARD_SHORTCUTS = {\n  // Tools\n  's': 'select',\n  'r': 'rectangle', \n  'c': 'circle',\n  't': 'terrain',\n  'd': 'delete',\n  \n  // Actions\n  'g': 'toggleGrid',\n  'Escape': 'cancel',\n  'Delete': 'deleteSelected',\n  'Backspace': 'deleteSelected',\n  \n  // Zoom\n  '0': 'resetZoom',\n  '1': '25%',\n  '2': '50%',\n  '3': '75%',\n  '4': '100%',\n  '5': '125%',\n  '6': '150%',\n  '7': '175%',\n  '8': '200%',\n  '9': '225%',\n  \n  // Copy/Paste\n  'c+ctrl': 'copy',\n  'c+meta': 'copy',\n  \n  // Undo/Redo\n  'z+ctrl': 'undo',\n  'z+meta': 'undo',\n  'y+ctrl': 'redo',\n  'y+meta': 'redo',\n  'z+ctrl+shift': 'redo',\n  'z+meta+shift': 'redo',\n  \n  // Select all\n  'a+ctrl': 'selectAll',\n  'a+meta': 'selectAll'\n} as const;\n\n// Default colors for elements\nexport const DEFAULT_COLORS = {\n  SHAPES: [\n    '#3B82F6', // Blue\n    '#EF4444', // Red\n    '#10B981', // Green\n    '#F59E0B', // Yellow\n    '#8B5CF6', // Purple\n    '#F97316', // Orange\n    '#06B6D4', // Cyan\n    '#84CC16', // Lime\n  ],\n  GRID: '#10B981', // Emerald\n  SELECTION: '#3B82F6', // Blue\n  HANDLES: '#3B82F6' // Blue\n} as const;\n",
      "size_bytes": 3281
    },
    "client/src/utils/canvasCoordinates.ts": {
      "content": "import { CANVAS_CONSTANTS } from './canvasConstants';\n\n// Coordinate system utilities for canvas transformations\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport interface CanvasTransform {\n  zoom: number;\n  panOffset: Point;\n}\n\nexport interface CanvasViewport {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n/**\n * Calculate pixels per meter based on canvas dimensions and real-world size\n */\nexport const calculatePixelsPerMeter = (\n  canvasDimensions: Dimensions,\n  canvasRealSize: Dimensions\n): number => {\n  return Math.min(\n    canvasDimensions.width / canvasRealSize.width,\n    canvasDimensions.height / canvasRealSize.height\n  );\n};\n\n/**\n * Convert meters to pixels\n */\nexport const metersToPixels = (meters: number, pixelsPerMeter: number): number => {\n  return meters * pixelsPerMeter;\n};\n\n/**\n * Convert pixels to meters\n */\nexport const pixelsToMeters = (pixels: number, pixelsPerMeter: number): number => {\n  return pixels / pixelsPerMeter;\n};\n\n/**\n * Get mouse position relative to canvas with zoom and pan transformations\n */\nexport const getCanvasMousePosition = (\n  event: React.MouseEvent | MouseEvent | React.DragEvent,\n  canvasRef: React.RefObject<HTMLElement>,\n  transform: CanvasTransform\n): Point => {\n  if (!canvasRef.current) return { x: 0, y: 0 };\n  \n  const rect = canvasRef.current.getBoundingClientRect();\n  const clientX = 'clientX' in event ? event.clientX : 0;\n  const clientY = 'clientY' in event ? event.clientY : 0;\n  \n  // Get position relative to canvas\n  const rawX = clientX - rect.left;\n  const rawY = clientY - rect.top;\n  \n  // Apply inverse transform (zoom and pan)\n  const x = (rawX - transform.panOffset.x) / (transform.zoom / 100);\n  const y = (rawY - transform.panOffset.y) / (transform.zoom / 100);\n  \n  return { x, y };\n};\n\n/**\n * Snap point to grid if grid is enabled\n */\nexport const snapToGrid = (\n  point: Point, \n  gridEnabled: boolean, \n  pixelsPerMeter: number\n): Point => {\n  if (!gridEnabled) return point;\n  \n  const gridSizePixels = CANVAS_CONSTANTS.GRID_SIZE_METERS * pixelsPerMeter;\n  \n  return {\n    x: Math.round(point.x / gridSizePixels) * gridSizePixels,\n    y: Math.round(point.y / gridSizePixels) * gridSizePixels\n  };\n};\n\n/**\n * Calculate grid dimensions based on canvas size\n */\nexport const calculateGridDimensions = (\n  canvasRealSize: Dimensions\n): { horizontal: number; vertical: number } => {\n  return {\n    horizontal: Math.floor(canvasRealSize.width / CANVAS_CONSTANTS.GRID_SIZE_METERS),\n    vertical: Math.floor(canvasRealSize.height / CANVAS_CONSTANTS.GRID_SIZE_METERS)\n  };\n};\n\n/**\n * Calculate canvas viewport in world coordinates\n */\nexport const calculateViewport = (\n  canvasDimensions: Dimensions,\n  transform: CanvasTransform\n): CanvasViewport => {\n  const scale = transform.zoom / 100;\n  const width = canvasDimensions.width / scale;\n  const height = canvasDimensions.height / scale;\n  \n  return {\n    x: -transform.panOffset.x / scale,\n    y: -transform.panOffset.y / scale,\n    width,\n    height\n  };\n};\n\n/**\n * Check if a point is within the viewport (with buffer for performance)\n */\nexport const isPointInViewport = (\n  point: Point,\n  viewport: CanvasViewport,\n  buffer: number = CANVAS_CONSTANTS.PERFORMANCE.VIEWPORT_BUFFER\n): boolean => {\n  return (\n    point.x >= viewport.x - buffer &&\n    point.x <= viewport.x + viewport.width + buffer &&\n    point.y >= viewport.y - buffer &&\n    point.y <= viewport.y + viewport.height + buffer\n  );\n};\n\n/**\n * Check if a rectangle intersects with the viewport\n */\nexport const isRectInViewport = (\n  rect: { x: number; y: number; width: number; height: number },\n  viewport: CanvasViewport,\n  buffer: number = CANVAS_CONSTANTS.PERFORMANCE.VIEWPORT_BUFFER\n): boolean => {\n  return !(\n    rect.x + rect.width < viewport.x - buffer ||\n    rect.x > viewport.x + viewport.width + buffer ||\n    rect.y + rect.height < viewport.y - buffer ||\n    rect.y > viewport.y + viewport.height + buffer\n  );\n};\n\n/**\n * Calculate distance between two points\n */\nexport const calculateDistance = (point1: Point, point2: Point): number => {\n  const dx = point2.x - point1.x;\n  const dy = point2.y - point1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Calculate bounds for a set of points\n */\nexport const calculateBounds = (points: Point[]): {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  width: number;\n  height: number;\n} => {\n  if (points.length === 0) {\n    return { minX: 0, minY: 0, maxX: 0, maxY: 0, width: 0, height: 0 };\n  }\n  \n  const minX = Math.min(...points.map(p => p.x));\n  const minY = Math.min(...points.map(p => p.y));\n  const maxX = Math.max(...points.map(p => p.x));\n  const maxY = Math.max(...points.map(p => p.y));\n  \n  return {\n    minX,\n    minY,\n    maxX,\n    maxY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n};\n\n/**\n * Transform a point by rotation around a center\n */\nexport const rotatePoint = (point: Point, center: Point, angleDegrees: number): Point => {\n  const angleRadians = (angleDegrees * Math.PI) / 180;\n  const cos = Math.cos(angleRadians);\n  const sin = Math.sin(angleRadians);\n  \n  const dx = point.x - center.x;\n  const dy = point.y - center.y;\n  \n  return {\n    x: center.x + dx * cos - dy * sin,\n    y: center.y + dx * sin + dy * cos\n  };\n};\n",
      "size_bytes": 5338
    },
    "client/src/utils/canvasExport.ts": {
      "content": "import { toast } from 'sonner';\n\nexport interface ExportOptions {\n  quality?: number;\n  format?: 'png' | 'jpeg';\n  filename?: string;\n  scale?: number;\n}\n\n// Enhanced function to capture the actual canvas as it appears on screen\nexport const captureCanvasScreenshot = async (\n  canvasElement: HTMLElement,\n  options: ExportOptions = {}\n): Promise<void> => {\n  const {\n    quality = 0.98,\n    format = 'png',\n    filename = `canvas-${Date.now()}`,\n    scale = 3 // Improved quality\n  } = options;\n\n  try {\n    toast.info('Capturando imagem do canvas...', { duration: 2000 });\n\n    // Dynamic import of html2canvas\n    const { default: html2canvas } = await import('html2canvas');\n    \n    // Take screenshot of the canvas element\n    const canvas = await html2canvas(canvasElement, {\n      backgroundColor: '#ffffff',\n      scale: scale,\n      logging: false,\n      allowTaint: true,\n      useCORS: true,\n      width: canvasElement.offsetWidth,\n      height: canvasElement.offsetHeight,\n      windowWidth: canvasElement.scrollWidth,\n      windowHeight: canvasElement.scrollHeight,\n      foreignObjectRendering: true,\n      onclone: (clonedDoc) => {\n        const clonedElement = clonedDoc.querySelector('[data-canvas=\"true\"]');\n        if (clonedElement) {\n          clonedElement.style.transform = 'none';\n          clonedElement.style.transformOrigin = 'initial';\n        }\n      }\n    });\n    \n    // Convert to blob and download\n    canvas.toBlob((blob) => {\n      if (!blob) {\n        toast.error('Erro ao gerar imagem');\n        return;\n      }\n      \n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${filename}.${format}`;\n      link.style.display = 'none';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      URL.revokeObjectURL(url);\n      \n      toast.success('Canvas exportado com sucesso!', {\n        description: `Arquivo salvo como ${filename}.${format} (${canvas.width}x${canvas.height}px)`\n      });\n    }, `image/${format}`, quality);\n    \n  } catch (error) {\n    console.error('Export error:', error);\n    toast.error('Erro ao exportar canvas', {\n      description: 'Tente novamente ou atualize a página'\n    });\n  }\n};\n\n// Capture specific area of the canvas\nexport const captureCanvasArea = async (\n  canvasElement: HTMLElement,\n  selectionArea: { x: number; y: number; width: number; height: number },\n  options: ExportOptions = {}\n): Promise<void> => {\n  const {\n    quality = 0.95,\n    format = 'png',\n    filename = `canvas-area-${Date.now()}`,\n    scale = 2\n  } = options;\n\n  try {\n    toast.info('Capturando área selecionada...', { duration: 2000 });\n\n    const { default: html2canvas } = await import('html2canvas');\n    \n    // Capture the full canvas first\n    const fullCanvas = await html2canvas(canvasElement, {\n      backgroundColor: '#ffffff',\n      scale: scale,\n      logging: false,\n      allowTaint: true,\n      useCORS: true,\n      width: canvasElement.offsetWidth,\n      height: canvasElement.offsetHeight,\n      onclone: (clonedDoc) => {\n        const clonedElement = clonedDoc.querySelector('[data-canvas=\"true\"]');\n        if (clonedElement) {\n          clonedElement.style.transform = 'none';\n          clonedElement.style.transformOrigin = 'initial';\n        }\n      }\n    });\n    \n    // Create a new canvas for the cropped area\n    const croppedCanvas = document.createElement('canvas');\n    const ctx = croppedCanvas.getContext('2d');\n    \n    if (!ctx) {\n      throw new Error('Could not get canvas context');\n    }\n    \n    // Set dimensions for the cropped area\n    croppedCanvas.width = selectionArea.width * scale;\n    croppedCanvas.height = selectionArea.height * scale;\n    \n    // Draw the selected area onto the new canvas\n    ctx.drawImage(\n      fullCanvas,\n      selectionArea.x * scale, // Source x\n      selectionArea.y * scale, // Source y\n      selectionArea.width * scale, // Source width\n      selectionArea.height * scale, // Source height\n      0, // Destination x\n      0, // Destination y\n      croppedCanvas.width, // Destination width\n      croppedCanvas.height // Destination height\n    );\n    \n    // Convert to blob and download\n    croppedCanvas.toBlob((blob) => {\n      if (!blob) {\n        toast.error('Erro ao gerar imagem');\n        return;\n      }\n      \n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${filename}.${format}`;\n      link.style.display = 'none';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      URL.revokeObjectURL(url);\n      \n      toast.success('Área exportada com sucesso!', {\n        description: `Arquivo salvo como ${filename}.${format} (${croppedCanvas.width}x${croppedCanvas.height}px)`\n      });\n    }, `image/${format}`, quality);\n    \n  } catch (error) {\n    console.error('Export error:', error);\n    toast.error('Erro ao exportar área', {\n      description: 'Tente novamente ou selecione uma área menor'\n    });\n  }\n};\n\n// High-resolution canvas capture\nexport const captureHighResCanvas = async (\n  canvasElement: HTMLElement,\n  options: ExportOptions = {}\n): Promise<void> => {\n  const {\n    quality = 0.98,\n    format = 'png',\n    filename = `canvas-hires-${Date.now()}`,\n    scale = 4 // 4x for high resolution\n  } = options;\n\n  try {\n    toast.info('Gerando imagem de alta resolução...', { duration: 3000 });\n\n    const { default: html2canvas } = await import('html2canvas');\n    \n    // Capture with high resolution\n    const canvas = await html2canvas(canvasElement, {\n      backgroundColor: '#ffffff',\n      scale: scale,\n      logging: false,\n      allowTaint: true,\n      useCORS: true,\n      width: canvasElement.offsetWidth,\n      height: canvasElement.offsetHeight,\n      foreignObjectRendering: true,\n      onclone: (clonedDoc) => {\n        const clonedElement = clonedDoc.querySelector('[data-canvas=\"true\"]');\n        if (clonedElement) {\n          clonedElement.style.transform = 'none';\n          clonedElement.style.transformOrigin = 'initial';\n        }\n      }\n    });\n    \n    // Convert to blob and download\n    canvas.toBlob((blob) => {\n      if (!blob) {\n        toast.error('Erro ao gerar imagem');\n        return;\n      }\n      \n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${filename}.${format}`;\n      link.style.display = 'none';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      URL.revokeObjectURL(url);\n      \n      toast.success('Imagem de alta resolução exportada!', {\n        description: `Arquivo salvo como ${filename}.${format} (${canvas.width}x${canvas.height}px)`\n      });\n    }, `image/${format}`, quality);\n    \n  } catch (error) {\n    console.error('Export error:', error);\n    toast.error('Erro ao exportar alta resolução', {\n      description: 'Tente novamente com uma resolução menor'\n    });\n  }\n};\n\n// Export visible viewport\nexport const exportViewport = async (\n  canvasElement: HTMLElement,\n  options: ExportOptions = {}\n): Promise<void> => {\n  return captureCanvasScreenshot(canvasElement, {\n    ...options,\n    filename: options.filename || `viewport-${Date.now()}`\n  });\n};\n\n// Export full canvas\nexport const exportFullCanvas = async (\n  canvasElement: HTMLElement,\n  options: ExportOptions = {}\n): Promise<void> => {\n  return captureCanvasScreenshot(canvasElement, {\n    ...options,\n    filename: options.filename || `canvas-full-${Date.now()}`\n  });\n};\n\n// Export selected area\nexport const exportSelectedArea = async (\n  canvasElement: HTMLElement,\n  selectionArea: { x: number; y: number; width: number; height: number },\n  options: ExportOptions = {}\n): Promise<void> => {\n  return captureCanvasArea(canvasElement, selectionArea, {\n    ...options,\n    filename: options.filename || `selection-${Date.now()}`\n  });\n};\n\n// Legacy compatibility\nexport const exportCanvasArea = exportSelectedArea;\nexport const exportSelectedElements = exportViewport;\nexport const exportHighResolutionCanvas = captureHighResCanvas;\n",
      "size_bytes": 8276
    },
    "client/src/utils/canvasUtils.ts": {
      "content": "// Canvas utility functions for modularization\n\nimport { Position, Size, DrawingElement, ResizeHandle } from '@/types/canvas.types';\n\n// Parsing utilities\nexport const parseTerrainSize = (sizeString: string): Size => {\n  if (sizeString === \"Variável\") {\n    return { width: 1, height: 1 }; // Default 1x1m for variable size\n  }\n  \n  const match = sizeString.match(/(\\d+)x(\\d+)m/);\n  if (match) {\n    return { width: parseInt(match[1]), height: parseInt(match[2]) };\n  }\n  \n  // Handle single dimension (like \"2x2m\")\n  const singleMatch = sizeString.match(/(\\d+)m/);\n  if (singleMatch) {\n    const size = parseInt(singleMatch[1]);\n    return { width: size, height: size };\n  }\n  \n  // Default fallback\n  return { width: 1, height: 1 };\n};\n\nexport const parsePlantSpacing = (spacing: string, pixelsPerMeter: number): Size => {\n  if (spacing.includes('x')) {\n    const match = spacing.match(/(\\d+(?:\\.\\d+)?)x(\\d+(?:\\.\\d+)?)/);\n    if (match) {\n      const width = parseFloat(match[1]);\n      const height = parseFloat(match[2]);\n      return { width: width * pixelsPerMeter, height: height * pixelsPerMeter };\n    }\n  }\n  const singleMatch = spacing.match(/(\\d+(?:\\.\\d+)?)(cm|m)/);\n  if (singleMatch) {\n    const value = parseFloat(singleMatch[1]);\n    const unit = singleMatch[2];\n    const meters = unit === 'cm' ? value / 100 : value;\n    const pixels = meters * pixelsPerMeter;\n    return { width: pixels, height: pixels };\n  }\n  return { width: 40, height: 40 };\n};\n\n// Bounds calculation utilities\nexport const getElementBounds = (element: DrawingElement, pixelsPerMeter: number) => {\n  if (element.type === 'plant') {\n    const plantSize = parsePlantSpacing(element.plant?.spacing || '1x1m', pixelsPerMeter);\n    return {\n      x: element.x - plantSize.width / 2,\n      y: element.y - plantSize.height / 2,\n      width: plantSize.width,\n      height: plantSize.height\n    };\n  } else if (element.type === 'circle' || (element.type === 'terrain' && element.brushType === 'circle')) {\n    const radius = element.radius || 0;\n    return {\n      x: element.x,\n      y: element.y,\n      width: radius * 2,\n      height: radius * 2\n    };\n  } else {\n    return {\n      x: element.x,\n      y: element.y,\n      width: element.width || 0,\n      height: element.height || 0\n    };\n  }\n};\n\n// Handle detection utility\nexport const detectResizeHandle = (\n  pos: Position, \n  element: DrawingElement, \n  pixelsPerMeter: number\n): ResizeHandle | null => {\n  if (!element.selected) return null;\n\n  const handleSize = 8; // Size of resize handles\n  const bounds = getElementBounds(element, pixelsPerMeter);\n  \n  const left = bounds.x;\n  const top = bounds.y;\n  const right = left + bounds.width;\n  const bottom = top + bounds.height;\n  \n  // Check each handle\n  if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'nw';\n  if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - top) <= handleSize) return 'ne';\n  if (Math.abs(pos.x - left) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'sw';\n  if (Math.abs(pos.x - right) <= handleSize && Math.abs(pos.y - bottom) <= handleSize) return 'se';\n  \n  return null;\n};\n\n// Resize calculation utility\nexport const calculateNewBounds = (\n  originalBounds: { x: number; y: number; width: number; height: number },\n  resizeHandle: ResizeHandle,\n  deltaX: number,\n  deltaY: number,\n  minSize: number = 20\n) => {\n  const newBounds = { ...originalBounds };\n  \n  switch (resizeHandle) {\n    case 'nw':\n      newBounds.x = originalBounds.x + deltaX;\n      newBounds.y = originalBounds.y + deltaY;\n      newBounds.width = originalBounds.width - deltaX;\n      newBounds.height = originalBounds.height - deltaY;\n      break;\n    case 'ne':\n      newBounds.y = originalBounds.y + deltaY;\n      newBounds.width = originalBounds.width + deltaX;\n      newBounds.height = originalBounds.height - deltaY;\n      break;\n    case 'sw':\n      newBounds.x = originalBounds.x + deltaX;\n      newBounds.width = originalBounds.width - deltaX;\n      newBounds.height = originalBounds.height + deltaY;\n      break;\n    case 'se':\n      newBounds.width = originalBounds.width + deltaX;\n      newBounds.height = originalBounds.height + deltaY;\n      break;\n  }\n  \n  // Ensure minimum size\n  newBounds.width = Math.max(newBounds.width, minSize);\n  newBounds.height = Math.max(newBounds.height, minSize);\n  \n  return newBounds;\n};\n\n// Element update utility\nexport const updateElementFromBounds = (\n  element: DrawingElement,\n  newBounds: { x: number; y: number; width: number; height: number }\n): DrawingElement => {\n  if (element.type === 'plant') {\n    // For plants, update the center position\n    const newCenterX = newBounds.x + newBounds.width / 2;\n    const newCenterY = newBounds.y + newBounds.height / 2;\n    return { ...element, x: newCenterX, y: newCenterY };\n  } else if (element.type === 'circle' || (element.type === 'terrain' && element.brushType === 'circle')) {\n    // For circles, update radius\n    const newRadius = Math.min(newBounds.width, newBounds.height) / 2;\n    return {\n      ...element,\n      x: newBounds.x,\n      y: newBounds.y,\n      radius: newRadius,\n      width: newRadius * 2,\n      height: newRadius * 2\n    };\n  } else {\n    // For rectangles\n    return {\n      ...element,\n      x: newBounds.x,\n      y: newBounds.y,\n      width: newBounds.width,\n      height: newBounds.height\n    };\n  }\n};\n\n// ID generation utility\nexport const generateElementId = (): number => {\n  return Date.now() + Math.random();\n};\n\n// Canvas metrics calculation\nexport const calculateCanvasMetrics = (\n  canvasDimensions: Size,\n  canvasSize: Size | undefined,\n  canvasRealSize: Size\n) => {\n  const effectiveSize = canvasSize || canvasRealSize;\n  const pixelsPerMeter = Math.min(\n    canvasDimensions.width / effectiveSize.width,\n    canvasDimensions.height / effectiveSize.height\n  );\n  const gridSizeMeters = 2; // Each grid square = 2m x 2m\n  const gridSizePixels = gridSizeMeters * pixelsPerMeter;\n  \n  return {\n    pixelsPerMeter,\n    gridSizeMeters,\n    gridSizePixels,\n    maxHorizontalGrids: Math.floor(effectiveSize.width / gridSizeMeters),\n    maxVerticalGrids: Math.floor(effectiveSize.height / gridSizeMeters),\n  };\n};\n\n// Path point distance calculation\nexport const shouldAddPathPoint = (\n  newPoint: Position,\n  lastPoint: Position,\n  minDistance: number = 5\n): boolean => {\n  const distance = Math.sqrt(\n    Math.pow(newPoint.x - lastPoint.x, 2) + \n    Math.pow(newPoint.y - lastPoint.y, 2)\n  );\n  return distance > minDistance;\n};\n\n// Cursor style utility\nexport const getCanvasCursorStyle = (\n  isSpacePressed: boolean,\n  isPanning: boolean,\n  selectedTool: string,\n  hasSelectedPlant: boolean,\n  hasSelectedTerrain: boolean\n): string => {\n  if (isSpacePressed || isPanning) return 'cursor-grab';\n  if (selectedTool === 'select') return 'cursor-default';\n  if (selectedTool === 'delete') return 'cursor-pointer';\n  if (hasSelectedPlant || hasSelectedTerrain) return 'cursor-copy';\n  return 'cursor-crosshair';\n};\n",
      "size_bytes": 7006
    },
    "client/src/utils/colorUtils.ts": {
      "content": "// Color utilities for the canvas application\n\n// Plant border color palette - vibrant and diverse colors\nexport const PLANT_BORDER_COLORS = [\n  '#FF6B6B', // Red\n  '#4ECDC4', // Teal\n  '#45B7D1', // Blue\n  '#96CEB4', // Mint Green\n  '#FFEAA7', // Yellow\n  '#DDA0DD', // Plum\n  '#98D8C8', // Mint\n  '#F7DC6F', // Light Yellow\n  '#BB8FCE', // Purple\n  '#85C1E9', // Light Blue\n  '#82E0AA', // Light Green\n  '#F8C471', // Orange\n  '#F1948A', // Light Red\n  '#85929E', // Gray Blue\n  '#A569BD', // Purple\n  '#5DADE2', // Sky Blue\n  '#58D68D', // Green\n  '#F4D03F', // Gold\n  '#EC7063', // Salmon\n  '#48C9B0', // Turquoise\n];\n\n// Shape color palette - professional and varied\nexport const SHAPE_COLORS = [\n  '#3498DB', // Blue\n  '#E74C3C', // Red\n  '#2ECC71', // Green\n  '#F39C12', // Orange\n  '#9B59B6', // Purple\n  '#1ABC9C', // Turquoise\n  '#E67E22', // Dark Orange\n  '#34495E', // Dark Gray\n  '#16A085', // Dark Turquoise\n  '#27AE60', // Dark Green\n  '#2980B9', // Dark Blue\n  '#8E44AD', // Dark Purple\n  '#F1C40F', // Yellow\n  '#E91E63', // Pink\n  '#FF5722', // Deep Orange\n];\n\n// Terrain color enhancements\nexport const TERRAIN_COLORS = {\n  soil: ['#8B4513', '#A0522D', '#CD853F', '#DEB887', '#F5DEB3'],\n  water: ['#4682B4', '#87CEEB', '#20B2AA', '#48D1CC', '#00CED1'],\n  vegetation: ['#228B22', '#32CD32', '#9ACD32', '#6B8E23', '#556B2F'],\n  structure: ['#696969', '#A9A9A9', '#D3D3D3', '#778899', '#708090'],\n  energy: ['#FFD700', '#FFA500', '#FF8C00', '#FF4500', '#DC143C'],\n};\n\n/**\n * Generate a consistent color for a plant based on its ID\n * This ensures the same plant always gets the same color\n */\nexport const getPlantBorderColor = (plantId: string): string => {\n  // Create a simple hash of the plant ID\n  let hash = 0;\n  for (let i = 0; i < plantId.length; i++) {\n    const char = plantId.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  // Use the hash to select a color from the palette\n  const colorIndex = Math.abs(hash) % PLANT_BORDER_COLORS.length;\n  return PLANT_BORDER_COLORS[colorIndex];\n};\n\n/**\n * Generate a consistent color for shapes based on their ID\n */\nexport const getShapeColor = (shapeId: string | number): string => {\n  // Create a simple hash of the shape ID\n  const idString = String(shapeId);\n  let hash = 0;\n  for (let i = 0; i < idString.length; i++) {\n    const char = idString.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  // Use the hash to select a color from the palette\n  const colorIndex = Math.abs(hash) % SHAPE_COLORS.length;\n  return SHAPE_COLORS[colorIndex];\n};\n\n/**\n * Get a terrain color from the appropriate category\n */\nexport const getTerrainColor = (category: string, index: number = 0): string => {\n  const categoryColors = TERRAIN_COLORS[category as keyof typeof TERRAIN_COLORS];\n  if (!categoryColors) {\n    return TERRAIN_COLORS.soil[0]; // Default to soil color\n  }\n  return categoryColors[index % categoryColors.length];\n};\n\n/**\n * Convert hex color to RGB with alpha\n */\nexport const hexToRgba = (hex: string, alpha: number = 1): string => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!result) return `rgba(0, 0, 0, ${alpha})`;\n  \n  const r = parseInt(result[1], 16);\n  const g = parseInt(result[2], 16);\n  const b = parseInt(result[3], 16);\n  \n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n/**\n * Generate a lighter version of a color\n */\nexport const lightenColor = (hex: string, amount: number = 0.3): string => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!result) return hex;\n  \n  const r = Math.min(255, parseInt(result[1], 16) + Math.floor(255 * amount));\n  const g = Math.min(255, parseInt(result[2], 16) + Math.floor(255 * amount));\n  const b = Math.min(255, parseInt(result[3], 16) + Math.floor(255 * amount));\n  \n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\n/**\n * Generate a darker version of a color\n */\nexport const darkenColor = (hex: string, amount: number = 0.3): string => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!result) return hex;\n  \n  const r = Math.max(0, parseInt(result[1], 16) - Math.floor(255 * amount));\n  const g = Math.max(0, parseInt(result[2], 16) - Math.floor(255 * amount));\n  const b = Math.max(0, parseInt(result[3], 16) - Math.floor(255 * amount));\n  \n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};",
      "size_bytes": 4597
    },
    "client/src/utils/plantSizes.ts": {
      "content": "// Utility functions for consistent plant and terrain size calculations\n\nexport interface RealWorldSize {\n  width: number;  // in meters\n  height: number; // in meters\n}\n\nexport interface PixelSize {\n  width: number;  // in pixels\n  height: number; // in pixels\n}\n\n/**\n * Parse spacing string to get dimensions in meters\n * Examples: \"30x30cm\", \"1x1m\", \"50cm\", \"2m\"\n */\nexport function parseSpacingToMeters(spacing: string): RealWorldSize {\n  // Handle XxY format (e.g., \"30x30cm\", \"1x1m\")\n  if (spacing.includes('x')) {\n    const match = spacing.match(/(\\d+(?:\\.\\d+)?)x(\\d+(?:\\.\\d+)?)(cm|m)?/);\n    if (match) {\n      const width = parseFloat(match[1]);\n      const height = parseFloat(match[2]);\n      const unit = match[3] || 'm';\n      \n      const widthInMeters = unit === 'cm' ? width / 100 : width;\n      const heightInMeters = unit === 'cm' ? height / 100 : height;\n      \n      return { width: widthInMeters, height: heightInMeters };\n    }\n  }\n  \n  // Handle single dimension (e.g., \"50cm\", \"2m\")\n  const singleMatch = spacing.match(/(\\d+(?:\\.\\d+)?)(cm|m)/);\n  if (singleMatch) {\n    const value = parseFloat(singleMatch[1]);\n    const unit = singleMatch[2];\n    const meters = unit === 'cm' ? value / 100 : value;\n    \n    return { width: meters, height: meters };\n  }\n  \n  // Default to 1x1m if format is not recognized\n  console.warn(`Unrecognized spacing format: ${spacing}, defaulting to 1x1m`);\n  return { width: 1, height: 1 };\n}\n\n/**\n * Convert meters to pixels based on current scale\n */\nexport function metersToPixels(meters: number, pixelsPerMeter: number): number {\n  return meters * pixelsPerMeter;\n}\n\n/**\n * Convert real world size to pixel size\n */\nexport function realWorldSizeToPixels(\n  realSize: RealWorldSize, \n  pixelsPerMeter: number\n): PixelSize {\n  return {\n    width: metersToPixels(realSize.width, pixelsPerMeter),\n    height: metersToPixels(realSize.height, pixelsPerMeter)\n  };\n}\n\n/**\n * Format real world size for display\n */\nexport function formatRealWorldSize(size: RealWorldSize): string {\n  if (size.width === size.height) {\n    return size.width < 1 ? `${size.width * 100}cm` : `${size.width}m`;\n  }\n  \n  const formatValue = (value: number) => \n    value < 1 ? `${value * 100}cm` : `${value}m`;\n  \n  return `${formatValue(size.width)}×${formatValue(size.height)}`;\n}\n\n/**\n * Calculate appropriate icon size based on plant's real world size\n */\nexport function calculateIconSize(pixelSize: PixelSize): number {\n  const avgSize = (pixelSize.width + pixelSize.height) / 2;\n  \n  // Scale icon to be 30-50% of the plant area, with min/max constraints\n  const iconSize = avgSize * 0.4;\n  \n  // Ensure icon is between 16px and 80px\n  return Math.max(16, Math.min(80, iconSize));\n}\n",
      "size_bytes": 2719
    },
    "client/src/utils/searchUtils.ts": {
      "content": "/**\n * Enhanced search utilities with case-insensitive and fuzzy matching\n */\n\nexport interface SearchableItem {\n  id: string;\n  name: string;\n  category?: string;\n  description?: string;\n  [key: string]: unknown;\n}\n\n/**\n * Normalize string for search comparison\n */\nexport function normalizeSearchString(str: string): string {\n  return str\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '') // Remove accents\n    .replace(/[^\\w\\s]/g, '') // Remove punctuation\n    .trim();\n}\n\n/**\n * Calculate similarity between two strings using Levenshtein distance\n */\nexport function calculateSimilarity(str1: string, str2: string): number {\n  const normalized1 = normalizeSearchString(str1);\n  const normalized2 = normalizeSearchString(str2);\n  \n  if (normalized1 === normalized2) return 1;\n  if (normalized1.length === 0 || normalized2.length === 0) return 0;\n  \n  const maxLength = Math.max(normalized1.length, normalized2.length);\n  const distance = levenshteinDistance(normalized1, normalized2);\n  \n  return (maxLength - distance) / maxLength;\n}\n\n/**\n * Levenshtein distance algorithm\n */\nfunction levenshteinDistance(str1: string, str2: string): number {\n  const matrix = Array(str2.length + 1).fill(null).map(() => \n    Array(str1.length + 1).fill(null)\n  );\n  \n  for (let i = 0; i <= str1.length; i++) {\n    matrix[0][i] = i;\n  }\n  \n  for (let j = 0; j <= str2.length; j++) {\n    matrix[j][0] = j;\n  }\n  \n  for (let j = 1; j <= str2.length; j++) {\n    for (let i = 1; i <= str1.length; i++) {\n      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n      matrix[j][i] = Math.min(\n        matrix[j][i - 1] + 1,     // deletion\n        matrix[j - 1][i] + 1,     // insertion\n        matrix[j - 1][i - 1] + indicator // substitution\n      );\n    }\n  }\n  \n  return matrix[str2.length][str1.length];\n}\n\n/**\n * Check if search term matches item with fuzzy matching\n */\nexport function matchesSearch(item: SearchableItem, searchTerm: string): boolean {\n  if (!searchTerm.trim()) return true;\n  \n  const normalizedTerm = normalizeSearchString(searchTerm);\n  const fields = [item.name, item.category, item.description].filter(Boolean);\n  \n  return fields.some(field => {\n    const normalizedField = normalizeSearchString(field || '');\n    \n    // Exact match\n    if (normalizedField.includes(normalizedTerm)) return true;\n    \n    // Fuzzy match with threshold\n    const similarity = calculateSimilarity(normalizedField, normalizedTerm);\n    return similarity >= 0.6;\n  });\n}\n\n/**\n * Filter and sort items based on search term\n */\nexport function searchItems<T extends SearchableItem>(\n  items: T[],\n  searchTerm: string,\n  options: {\n    threshold?: number;\n    maxResults?: number;\n    sortByRelevance?: boolean;\n  } = {}\n): T[] {\n  const { threshold = 0.3, maxResults = 100, sortByRelevance = true } = options;\n  \n  if (!searchTerm.trim()) return items;\n  \n  const normalizedTerm = normalizeSearchString(searchTerm);\n  \n  // Filter and calculate relevance scores\n  const results = items\n    .map(item => {\n      const fields = [item.name, item.category, item.description].filter(Boolean);\n      let maxScore = 0;\n      let hasExactMatch = false;\n      \n      fields.forEach(field => {\n        const normalizedField = normalizeSearchString(field || '');\n        \n        // Check for exact substring match\n        if (normalizedField.includes(normalizedTerm)) {\n          hasExactMatch = true;\n          maxScore = Math.max(maxScore, 1);\n        } else {\n          // Calculate fuzzy similarity\n          const similarity = calculateSimilarity(normalizedField, normalizedTerm);\n          maxScore = Math.max(maxScore, similarity);\n        }\n      });\n      \n      return {\n        item,\n        score: maxScore,\n        hasExactMatch\n      };\n    })\n    .filter(result => result.score >= threshold)\n    .slice(0, maxResults);\n  \n  // Sort by relevance if requested\n  if (sortByRelevance) {\n    results.sort((a, b) => {\n      // Exact matches first\n      if (a.hasExactMatch && !b.hasExactMatch) return -1;\n      if (!a.hasExactMatch && b.hasExactMatch) return 1;\n      \n      // Then by score\n      if (a.score !== b.score) return b.score - a.score;\n      \n      // Finally by name\n      return a.item.name.localeCompare(b.item.name);\n    });\n  }\n  \n  return results.map(result => result.item);\n}\n\n/**\n * Debounced search function\n */\nexport function createDebouncedSearch<T extends SearchableItem>(\n  searchFn: (items: T[], term: string) => T[],\n  delay: number = 300\n) {\n  let timeoutId: NodeJS.Timeout;\n  \n  return function debouncedSearch(\n    items: T[],\n    term: string,\n    callback: (results: T[]) => void\n  ) {\n    clearTimeout(timeoutId);\n    \n    timeoutId = setTimeout(() => {\n      const results = searchFn(items, term);\n      callback(results);\n    }, delay);\n  };\n}\n\n/**\n * Highlight search term in text\n */\nexport function highlightSearchTerm(text: string, searchTerm: string): string {\n  if (!searchTerm.trim()) return text;\n  \n  const normalizedTerm = normalizeSearchString(searchTerm);\n  const normalizedText = normalizeSearchString(text);\n  \n  const index = normalizedText.indexOf(normalizedTerm);\n  if (index === -1) return text;\n  \n  // Find the original text position accounting for normalization\n  const originalIndex = findOriginalIndex(text, normalizedText, index);\n  const originalLength = findOriginalLength(text, originalIndex, normalizedTerm.length);\n  \n  return (\n    text.substring(0, originalIndex) +\n    `<mark>${text.substring(originalIndex, originalIndex + originalLength)}</mark>` +\n    text.substring(originalIndex + originalLength)\n  );\n}\n\nfunction findOriginalIndex(original: string, normalized: string, normalizedIndex: number): number {\n  let originalIndex = 0;\n  let normalizedPosition = 0;\n  \n  while (normalizedPosition < normalizedIndex && originalIndex < original.length) {\n    const char = original[originalIndex];\n    const normalizedChar = normalizeSearchString(char);\n    \n    if (normalizedChar.length > 0) {\n      normalizedPosition += normalizedChar.length;\n    }\n    originalIndex++;\n  }\n  \n  return originalIndex;\n}\n\nfunction findOriginalLength(original: string, startIndex: number, normalizedLength: number): number {\n  let length = 0;\n  let normalizedCount = 0;\n  \n  while (normalizedCount < normalizedLength && startIndex + length < original.length) {\n    const char = original[startIndex + length];\n    const normalizedChar = normalizeSearchString(char);\n    \n    if (normalizedChar.length > 0) {\n      normalizedCount += normalizedChar.length;\n    }\n    length++;\n  }\n  \n  return length;\n}\n",
      "size_bytes": 6573
    },
    "client/src/components/canvas/CanvasContainer.tsx": {
      "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { CanvasRenderer } from './CanvasRenderer';\nimport { CanvasEventHandler } from './CanvasEventHandler';\nimport { CanvasControls } from './CanvasControls';\nimport { Dimensions } from '../../utils/canvasCoordinates';\nimport { Plant, Terrain } from '../../types/canvasTypes';\nimport { CANVAS_CONSTANTS } from '../../utils/canvasConstants';\n\ninterface CanvasContainerProps {\n  selectedTool: string;\n  selectedPlant: Plant | null;\n  selectedTerrain: Terrain | null;\n  onPlantUsed: () => void;\n  onTerrainUsed: () => void;\n  onToolChange: (tool: string) => void;\n  canvasSize?: Dimensions;\n  onCanvasSizeChange?: (size: Dimensions) => void;\n}\n\nexport const CanvasContainer = ({\n  selectedTool,\n  selectedPlant,\n  selectedTerrain,\n  onPlantUsed,\n  onTerrainUsed,\n  onToolChange,\n  canvasSize,\n  onCanvasSizeChange,\n}: CanvasContainerProps) => {\n  const canvasRef = useRef<HTMLDivElement | null>(null);\n  const [elements, setElements] = useState([]);\n  const [zoom, setZoom] = useState(100);\n  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });\n  const [showGrid, setShowGrid] = useState(true);\n\n  // Effects for updating canvas dimensions when size changes\n  useEffect(() => {\n    if (canvasSize) {\n      setCanvasDimensions(canvasSize);\n    }\n  }, [canvasSize]);\n\n  return (\n    <div ref={canvasRef} className=\"canvas-container\">\n      <CanvasControls\n        showGrid={showGrid}\n        setShowGrid={setShowGrid}\n        zoom={zoom}\n        setZoom={setZoom}\n      />\n      <CanvasEventHandler\n        canvasRef={canvasRef}\n        selectedTool={selectedTool}\n        setPanOffset={setPanOffset}\n        panOffset={panOffset}\n        zoom={zoom}\n        elements={elements}\n        setElements={setElements}\n      />\n      <CanvasRenderer\n        elements={elements}\n        showGrid={showGrid}\n        zoom={zoom}\n        panOffset={panOffset}\n        selectedTool={selectedTool}\n      />\n    </div>\n  );\n};\n",
      "size_bytes": 1979
    },
    "client/src/components/canvas/CanvasElement.tsx": {
      "content": "import React, { useState, memo, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Plant, Terrain } from '../../types/canvasTypes';\nimport { parseSpacingToMeters, realWorldSizeToPixels, calculateIconSize, formatRealWorldSize } from \"@/utils/plantSizes\";\nimport { getPlantBorderColor, getShapeColor, hexToRgba, lightenColor, darkenColor } from \"@/utils/colorUtils\";\nimport { motion } from 'framer-motion';\n\ninterface DrawingElement {\n  id: number;\n  type: 'plant' | 'terrain' | 'rectangle' | 'circle';\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  radius?: number;\n  plant?: Plant;\n  terrain?: Terrain;\n  selected?: boolean;\n  rotation?: number;\n  realWorldWidth?: number;\n  realWorldHeight?: number;\n  brushType?: 'rectangle' | 'circle' | 'path' | 'brush';\n  texture?: string;\n  pathPoints?: { x: number; y: number }[];\n  selectedBrushMode?: 'rectangle' | 'circle' | 'brush';\n  brushThickness?: number;\n}\n\ninterface CanvasElementProps {\n  element: DrawingElement;\n  pixelsPerMeter?: number;\n  onResizeStart?: (elementId: number, handle: string, event: React.MouseEvent) => void;\n  onElementClick?: (elementId: number, event: React.MouseEvent) => void;\n}\n\nconst CanvasElementComponent = ({ element, pixelsPerMeter = 10, onResizeStart, onElementClick }: CanvasElementProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const isSelected = element.selected;\n  const selectionStyle = isSelected ? 'ring-2 ring-blue-500 ring-offset-2 shadow-lg' : '';\n\n  const handleMouseEnter = useCallback(() => setShowTooltip(true), []);\n  const handleMouseLeave = useCallback(() => setShowTooltip(false), []);\n  \n  const handleResizeStart = useCallback((handle: string) => (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onResizeStart) {\n      onResizeStart(element.id, handle, e);\n    }\n  }, [element.id, onResizeStart]);\n  \n  const handleElementClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onElementClick) {\n      onElementClick(element.id, e);\n    }\n  }, [element.id, onElementClick]);\n\n  // Improved plant rendering with better selection area\n  if (element.type === 'plant') {\n    const realWorldSize = parseSpacingToMeters(element.plant?.spacing || '1x1m');\n    const pixelSize = realWorldSizeToPixels(realWorldSize, pixelsPerMeter);\n    const iconSize = calculateIconSize(pixelSize);\n    \n    // Proportional clickable area - smaller minimum size for better proportionality\n    const minClickableSize = 24; // Reduced from 32 to 24\n    const maxClickableSize = 120; // Add maximum to prevent huge selection areas\n    \n    // Scale factor for clickable area relative to actual size\n    const scaleFactor = 1.2; // 20% larger than actual size for easier selection\n    \n    const clickableSize = {\n      width: Math.max(minClickableSize, Math.min(maxClickableSize, pixelSize.width * scaleFactor)),\n      height: Math.max(minClickableSize, Math.min(maxClickableSize, pixelSize.height * scaleFactor))\n    };\n    \n    const borderColor = getPlantBorderColor(element.plant?.id || String(element.id));\n    const backgroundColorLight = hexToRgba(borderColor, 0.1);\n    const borderColorAlpha = hexToRgba(borderColor, 0.6);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className={cn(\n          \"absolute plant-area cursor-move transition-all group border-2 border-dashed rounded-lg\",\n          \"hover:border-solid hover:shadow-md\",\n          selectionStyle,\n          isSelected && \"border-solid border-blue-500 bg-blue-50 dark:bg-blue-950\"\n        )}\n        style={{\n          left: element.x - clickableSize.width / 2,\n          top: element.y - clickableSize.height / 2,\n          width: clickableSize.width,\n          height: clickableSize.height,\n          transform: `rotate(${element.rotation || 0}deg)`,\n          zIndex: isSelected ? 10 : 1,\n          borderColor: isSelected ? undefined : borderColorAlpha,\n          backgroundColor: isSelected ? undefined : backgroundColorLight,\n          boxShadow: isSelected ? undefined : `0 0 8px ${hexToRgba(borderColor, 0.3)}`,\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {/* Plant visual area (actual size) */}\n        <div \n          className=\"absolute border border-dashed opacity-60\"\n          style={{\n            left: (clickableSize.width - pixelSize.width) / 2,\n            top: (clickableSize.height - pixelSize.height) / 2,\n            width: pixelSize.width,\n            height: pixelSize.height,\n            borderColor: borderColor,\n            backgroundColor: 'transparent',\n          }}\n        />\n        \n        {/* Plant icon in center */}\n        <div \n          className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full bg-white/95 dark:bg-gray-800/95 shadow-md hover:shadow-lg transition-all relative border-2 flex items-center justify-center\"\n          style={{\n            width: iconSize,\n            height: iconSize,\n            fontSize: iconSize * 0.5,\n            borderColor: borderColor,\n            boxShadow: `0 2px 8px ${hexToRgba(borderColor, 0.4)}`,\n          }}\n        >\n          {element.plant?.icon}\n        </div>\n        \n        {/* Plant name label - Always visible */}\n        <div \n          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs px-2 py-1 rounded font-medium shadow-sm text-white whitespace-nowrap\"\n          style={{\n            backgroundColor: borderColor,\n          }}\n        >\n          {element.plant?.name}\n        </div>\n        \n        {/* Selection handles */}\n        {isSelected && (\n          <>\n            <div \n              className=\"absolute -top-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-nw-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('nw')}\n            ></div>\n            <div \n              className=\"absolute -top-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-ne-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('ne')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-sw-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('sw')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-se-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('se')}\n            ></div>\n          </>\n        )}\n        \n        {/* Hover tooltip with detailed info */}\n        {showTooltip && (\n          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm rounded-lg shadow-lg border whitespace-nowrap z-20 min-w-max\">\n            <div className=\"font-semibold\" style={{ color: borderColor }}>{element.plant?.name}</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">Espaçamento: {element.plant?.spacing}</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">Área: {formatRealWorldSize(realWorldSize)}</div>\n            {element.plant?.description && (\n              <div className=\"text-gray-600 dark:text-gray-400 text-xs mt-1\">{element.plant.description}</div>\n            )}\n          </div>\n        )}\n      </motion.div>\n    );\n  }\n\n  // Terrain texture patterns - Enhanced\n  const getTerrainPattern = (texture: string, color: string) => {\n    switch (texture) {\n      case 'water':\n        return `radial-gradient(circle at 20% 20%, ${color}40 2px, transparent 2px),\n                radial-gradient(circle at 80% 80%, ${color}60 1px, transparent 1px),\n                linear-gradient(45deg, ${color}20 25%, transparent 25%)`;\n      case 'grass':\n        return `repeating-linear-gradient(\n                  0deg, ${color}30, ${color}30 2px, transparent 2px, transparent 4px),\n                repeating-linear-gradient(\n                  90deg, ${color}20, ${color}20 1px, transparent 1px, transparent 3px)`;\n      case 'sand':\n        return `radial-gradient(circle at 25% 25%, ${color}40 1px, transparent 1px),\n                radial-gradient(circle at 75% 75%, ${color}30 1px, transparent 1px)`;\n      case 'rock':\n        return `radial-gradient(ellipse at 30% 40%, ${color}60 3px, transparent 3px),\n                radial-gradient(ellipse at 70% 20%, ${color}50 2px, transparent 2px)`;\n      case 'trail':\n      case 'dirt_road':\n      case 'path':\n        return `repeating-linear-gradient(\n                  45deg, ${color}40, ${color}40 3px, transparent 3px, transparent 6px)`;\n      case 'building':\n      case 'structure':\n        return `repeating-linear-gradient(\n                  0deg, ${color}50, ${color}50 5px, transparent 5px, transparent 10px),\n                repeating-linear-gradient(\n                  90deg, ${color}40, ${color}40 5px, transparent 5px, transparent 10px)`;\n      case 'fence':\n        return `repeating-linear-gradient(\n                  90deg, ${color}60, ${color}60 2px, transparent 2px, transparent 8px)`;\n      case 'solar':\n        return `repeating-linear-gradient(\n                  0deg, ${color}70, ${color}70 1px, transparent 1px, transparent 3px),\n                repeating-linear-gradient(\n                  90deg, ${color}50, ${color}50 1px, transparent 1px, transparent 6px)`;\n      case 'compost':\n        return `radial-gradient(circle at 30% 30%, ${color}50 2px, transparent 2px),\n                radial-gradient(circle at 70% 70%, ${color}60 1px, transparent 1px),\n                repeating-linear-gradient(30deg, ${color}20, ${color}20 1px, transparent 1px, transparent 4px)`;\n      case 'well':\n        return `radial-gradient(circle at 50% 50%, ${color}80 10px, ${color}40 10px, ${color}40 15px, transparent 15px)`;\n      default:\n        return `repeating-linear-gradient(\n                  45deg, ${color}30, ${color}30 2px, transparent 2px, transparent 8px)`;\n    }\n  };\n\n  // Enhanced terrain rendering\n  if (element.type === 'terrain') {\n    const terrainWidth = element.width || 40;\n    const terrainHeight = element.height || 40;\n    const realWidth = element.realWorldWidth || 1;\n    const realHeight = element.realWorldHeight || 1;\n    const brushType = element.brushType || 'rectangle';\n    \n    // Handle path-based terrain (trails, streams, freehand brush)\n    if (brushType === 'path' && element.pathPoints && element.pathPoints.length > 1) {\n      const minX = Math.min(...element.pathPoints.map(p => p.x));\n      const minY = Math.min(...element.pathPoints.map(p => p.y));\n      const maxX = Math.max(...element.pathPoints.map(p => p.x));\n      const maxY = Math.max(...element.pathPoints.map(p => p.y));\n      \n      const pathD = element.pathPoints.reduce((path, point, index) => {\n        const relX = point.x - minX + 5;\n        const relY = point.y - minY + 5;\n        return index === 0 ? `M ${relX} ${relY}` : `${path} L ${relX} ${relY}`;\n      }, '');\n      \n      const strokeWidth = element.brushThickness || 8;\n      \n      return (\n        <motion.div\n          initial={{ opacity: 0, pathLength: 0 }}\n          animate={{ opacity: 1, pathLength: 1 }}\n          transition={{ duration: 0.5 }}\n          className={cn(\n            \"absolute terrain-path cursor-move transition-all hover:opacity-90\",\n            selectionStyle\n          )}\n          style={{\n            left: minX - 5,\n            top: minY - 5,\n            width: maxX - minX + 10,\n            height: maxY - minY + 10,\n            transform: `rotate(${element.rotation || 0}deg)`,\n            zIndex: isSelected ? 10 : 1,\n          }}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          <svg\n            width={maxX - minX + 10}\n            height={maxY - minY + 10}\n            className=\"absolute inset-0\"\n          >\n            {/* Path shadow */}\n            <path\n              d={pathD}\n              stroke=\"rgba(0,0,0,0.2)\"\n              strokeWidth={strokeWidth + 2}\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              transform=\"translate(1,1)\"\n            />\n            {/* Main path */}\n            <path\n              d={pathD}\n              stroke={element.terrain?.color}\n              strokeWidth={strokeWidth}\n              fill=\"none\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            {/* Path texture pattern */}\n            {strokeWidth <= 12 && (\n              <path\n                d={pathD}\n                stroke={element.terrain?.color + '60'}\n                strokeWidth={Math.max(2, strokeWidth / 2)}\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeDasharray=\"2 3\"\n              />\n            )}\n          </svg>\n          \n          {/* Trail name label */}\n          <div \n            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs px-2 py-1 rounded font-medium shadow-sm text-white whitespace-nowrap\"\n            style={{ backgroundColor: element.terrain?.color }}\n          >\n            {element.terrain?.name}\n          </div>\n          \n          {/* Selection handles for paths */}\n          {isSelected && (\n            <>\n              <div className=\"absolute -top-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-move\"></div>\n              <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-move\"></div>\n              <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-move\"></div>\n              <div className=\"absolute -bottom-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-move\"></div>\n            </>\n          )}\n          \n          {showTooltip && (\n            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm rounded-lg shadow-lg border whitespace-nowrap z-20 min-w-max\">\n              <div className=\"font-semibold\">{element.terrain?.name}</div>\n              <div className=\"text-gray-600 dark:text-gray-400 text-xs\">{element.terrain?.description}</div>\n              <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n                Espessura: {strokeWidth}px ({(strokeWidth / 10).toFixed(1)}m)\n              </div>\n              <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n                Comprimento: ~{Math.round(Math.sqrt(Math.pow(maxX - minX, 2) + Math.pow(maxY - minY, 2)) / 10)}m\n              </div>\n            </div>\n          )}\n        </motion.div>\n      );\n    }\n    \n    // Handle area-based terrain (rectangle, circle, brush)\n    const isCircle = brushType === 'circle';\n    const borderRadius = isCircle ? '50%' : '8px';\n    \n    // Proportional clickable size for small terrain elements\n    const minClickableSize = 24;\n    const maxClickableSize = 120;\n    const scaleFactor = 1.2;\n    const clickableWidth = Math.max(minClickableSize, Math.min(maxClickableSize, terrainWidth * scaleFactor));\n    const clickableHeight = Math.max(minClickableSize, Math.min(maxClickableSize, terrainHeight * scaleFactor));\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className={cn(\n          \"absolute terrain-area cursor-move transition-all group border-2 hover:shadow-md\",\n          selectionStyle,\n          isSelected && \"border-orange-500 bg-orange-50 dark:bg-orange-950\"\n        )}\n        style={{\n          left: element.x - (clickableWidth - terrainWidth) / 2,\n          top: element.y - (clickableHeight - terrainHeight) / 2,\n          width: clickableWidth,\n          height: clickableHeight,\n          borderRadius: isCircle ? '50%' : '8px',\n          transform: `rotate(${element.rotation || 0}deg)`,\n          backgroundColor: element.terrain?.color + '40',\n          borderColor: isSelected ? undefined : element.terrain?.color,\n          backgroundImage: getTerrainPattern(element.texture || 'default', element.terrain?.color || '#666'),\n          backgroundSize: '8px 8px',\n          zIndex: isSelected ? 10 : 1,\n          boxShadow: `inset 0 0 0 1px ${element.terrain?.color}60`,\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {/* Actual terrain area indicator */}\n        <div \n          className=\"absolute border border-dashed opacity-60\"\n          style={{\n            left: (clickableWidth - terrainWidth) / 2,\n            top: (clickableHeight - terrainHeight) / 2,\n            width: terrainWidth,\n            height: terrainHeight,\n            borderRadius: isCircle ? '50%' : '4px',\n            borderColor: element.terrain?.color,\n            backgroundColor: 'transparent',\n          }}\n        />\n        \n        {/* Central icon for identification */}\n        <div \n          className=\"absolute inset-0 flex items-center justify-center text-lg font-bold pointer-events-none\"\n          style={{ \n            color: element.terrain?.color,\n            textShadow: '0 0 4px rgba(255,255,255,0.8), 0 0 8px rgba(255,255,255,0.6)',\n            filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))'\n          }}\n        >\n          {element.terrain?.icon}\n        </div>\n        \n        {/* Terrain name label - Always visible */}\n        <div \n          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs px-2 py-1 rounded font-medium shadow-sm text-white whitespace-nowrap\"\n          style={{ backgroundColor: element.terrain?.color }}\n        >\n          {element.terrain?.name}\n        </div>\n        \n        {/* Selection handles */}\n        {isSelected && (\n          <>\n            <div \n              className=\"absolute -top-2 -left-2 w-4 h-4 bg-orange-500 rounded-full border-2 border-white shadow-md cursor-nw-resize hover:bg-orange-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('nw')}\n            ></div>\n            <div \n              className=\"absolute -top-2 -right-2 w-4 h-4 bg-orange-500 rounded-full border-2 border-white shadow-md cursor-ne-resize hover:bg-orange-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('ne')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-orange-500 rounded-full border-2 border-white shadow-md cursor-sw-resize hover:bg-orange-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('sw')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -right-2 w-4 h-4 bg-orange-500 rounded-full border-2 border-white shadow-md cursor-se-resize hover:bg-orange-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('se')}\n            ></div>\n          </>\n        )}\n        \n        {/* Hover tooltip with detailed info */}\n        {showTooltip && (\n          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm rounded-lg shadow-lg border whitespace-nowrap z-20 min-w-max\">\n            <div className=\"font-semibold\">{element.terrain?.name}</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">{element.terrain?.description}</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Área: {realWidth}×{realHeight}m ({realWidth * realHeight}m²)\n            </div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Modo: {brushType} • Textura: {element.texture}\n            </div>\n          </div>\n        )}\n      </motion.div>\n    );\n  }\n\n  // Enhanced rectangle rendering\n  if (element.type === 'rectangle') {\n    const shapeColor = getShapeColor(element.id);\n    const lightColor = hexToRgba(shapeColor, 0.2);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className={cn(\n          \"absolute border-2 cursor-move transition-all rounded-lg hover:shadow-md\",\n          selectionStyle\n        )}\n        style={{\n          left: element.x,\n          top: element.y,\n          width: element.width,\n          height: element.height,\n          transform: `rotate(${element.rotation || 0}deg)`,\n          zIndex: isSelected ? 10 : 1,\n          borderColor: shapeColor,\n          backgroundColor: lightColor,\n          boxShadow: `0 0 8px ${hexToRgba(shapeColor, 0.3)}`,\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {/* Shape name label */}\n        <div \n          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs px-2 py-1 rounded font-medium shadow-sm text-white whitespace-nowrap\"\n          style={{ backgroundColor: shapeColor }}\n        >\n          Retângulo\n        </div>\n        \n        {/* Selection handles */}\n        {isSelected && (\n          <>\n            <div \n              className=\"absolute -top-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-nw-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('nw')}\n            ></div>\n            <div \n              className=\"absolute -top-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-ne-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('ne')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-sw-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('sw')}\n            ></div>\n            <div \n              className=\"absolute -bottom-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-se-resize hover:bg-blue-600 transition-colors z-20\"\n              onMouseDown={handleResizeStart('se')}\n            ></div>\n          </>\n        )}\n        \n        {/* Hover tooltip */}\n        {showTooltip && (\n          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm rounded-lg shadow-lg border whitespace-nowrap z-20\">\n            <div className=\"font-semibold\">Retângulo</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Tamanho: {Math.round((element.width || 0) / 10)}×{Math.round((element.height || 0) / 10)}m\n            </div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Área: {Math.round(((element.width || 0) * (element.height || 0)) / 100)}m²\n            </div>\n          </div>\n        )}\n      </motion.div>\n    );\n  }\n\n  // Enhanced circle rendering\n  if (element.type === 'circle') {\n    const diameter = element.radius ? element.radius * 2 : 0;\n    const shapeColor = getShapeColor(element.id);\n    const lightColor = hexToRgba(shapeColor, 0.2);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.3 }}\n        className={cn(\n          \"absolute border-2 rounded-full cursor-move transition-all hover:shadow-md\",\n          selectionStyle\n        )}\n        style={{\n          left: element.x,\n          top: element.y,\n          width: diameter,\n          height: diameter,\n          transform: `rotate(${element.rotation || 0}deg)`,\n          zIndex: isSelected ? 10 : 1,\n          borderColor: shapeColor,\n          backgroundColor: lightColor,\n          boxShadow: `0 0 8px ${hexToRgba(shapeColor, 0.3)}`,\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {/* Shape name label */}\n        <div \n          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs px-2 py-1 rounded font-medium shadow-sm text-white whitespace-nowrap\"\n          style={{ backgroundColor: shapeColor }}\n        >\n          Círculo\n        </div>\n        \n        {/* Selection handles */}\n        {isSelected && (\n          <>\n            <div className=\"absolute -top-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-nw-resize\"></div>\n            <div className=\"absolute -top-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-ne-resize\"></div>\n            <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-sw-resize\"></div>\n            <div className=\"absolute -bottom-2 -right-2 w-4 h-4 bg-blue-500 rounded-full border-2 border-white shadow-md cursor-se-resize\"></div>\n          </>\n        )}\n        \n        {/* Hover tooltip */}\n        {showTooltip && (\n          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm rounded-lg shadow-lg border whitespace-nowrap z-20\">\n            <div className=\"font-semibold\">Círculo</div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Diâmetro: {Math.round(diameter / 10)}m\n            </div>\n            <div className=\"text-gray-600 dark:text-gray-400 text-xs\">\n              Área: {Math.round((Math.PI * Math.pow(diameter / 2, 2)) / 100)}m²\n            </div>\n          </div>\n        )}\n      </motion.div>\n    );\n  }\n\n  return null;\n};\n\nexport const CanvasElement = memo(CanvasElementComponent);\nCanvasElement.displayName = \"CanvasElement\";",
      "size_bytes": 26271
    },
    "client/src/components/canvas/CanvasRenderer.tsx": {
      "content": "import React from 'react';\nimport { Point, Dimensions, CanvasTransform } from '../../utils/canvasCoordinates';\nimport { DrawingElement } from '../../types/canvasTypes';\n\ninterface CanvasRendererProps {\n  elements: DrawingElement[];\n  showGrid: boolean;\n  zoom: number;\n  panOffset: Point;\n  selectedTool: string;\n}\n\nexport const CanvasRenderer: React.FC<CanvasRendererProps> = ({\n  elements,\n  showGrid,\n  zoom,\n  panOffset,\n  selectedTool,\n}) => {\n  // Determine rendering logic, e.g., show elements, grid, etc.\n  // Note: Simplified example, replace with actual rendering logic\n  return (\n    <div className=\"canvas-renderer\">\n      {/* Render Grid and Elements here */}\n      {/* Example: Render each element */}\n      {elements.map((element, index) => (\n        <div key={index} style={{ position: 'absolute', left: element.x, top: element.y }}>\n          {/* Render the element, placeholder shape */}\n          <div style={{ width: 50, height: 50, backgroundColor: 'blue' }}></div>\n        </div>\n      ))}\n      {showGrid && (\n        <div>Grid Enabled</div> // Placeholder for grid visualization\n      )}\n    </div>\n  );\n};\n",
      "size_bytes": 1131
    },
    "client/src/components/canvas/CanvasWelcome.tsx": {
      "content": "import { Mountain, Leaf, Square, Circle } from \"lucide-react\";\n\nexport const CanvasWelcome = () => {\n  return (\n    <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n      <div className=\"text-center max-w-md mx-auto p-8 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl border shadow-lg\">\n        <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center\">\n          <Leaf className=\"w-8 h-8 text-white\" />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold mb-3 text-foreground\">\n          Começar seu projeto agroecológico\n        </h3>\n        \n        <p className=\"text-sm text-muted-foreground mb-6 leading-relaxed\">\n          Selecione plantas da biblioteca ao lado ou use as ferramentas para \n          desenhar sua área.\n        </p>\n        \n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Leaf className=\"w-4 h-4 text-green-500\" />\n            <span>Arraste plantas</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Mountain className=\"w-4 h-4 text-brown-500\" />\n            <span>Use terreno</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Square className=\"w-4 h-4 text-blue-500\" />\n            <span>Desenhe áreas</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Circle className=\"w-4 h-4 text-purple-500\" />\n            <span>Forme círculos</span>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 text-xs text-muted-foreground\">\n          💡 <strong>Dica:</strong> Use <kbd className=\"px-1 py-0.5 bg-muted rounded\">Esc</kbd> para cancelar, <kbd className=\"px-1 py-0.5 bg-muted rounded\">Del</kbd> para excluir\n        </div>\n      </div>\n    </div>\n  );\n};",
      "size_bytes": 2022
    },
    "client/src/components/ui/ExportControls.tsx": {
      "content": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Download, Settings, Image as ImageIcon, FileImage } from 'lucide-react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from 'sonner';\n\nexport interface ExportControlsProps {\n  onExportHighRes: (options: { scale: number; format: 'png' | 'jpeg' }) => Promise<void>;\n  onExportSelection: () => Promise<void>;\n  onExportElements: () => Promise<void>;\n  onExportFull: () => Promise<void>;\n  hasSelection?: boolean;\n  hasSelectedElements?: boolean;\n  className?: string;\n}\n\nexport const ExportControls: React.FC<ExportControlsProps> = ({\n  onExportHighRes,\n  onExportSelection,\n  onExportElements,\n  onExportFull,\n  hasSelection = false,\n  hasSelectedElements = false,\n  className\n}) => {\n  const [scale, setScale] = useState([4]);\n  const [format, setFormat] = useState<'png' | 'jpeg'>('png');\n  const [isExporting, setIsExporting] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const handleExport = async (exportFn: () => Promise<void>, type: string) => {\n    setIsExporting(true);\n    try {\n      await exportFn();\n      toast.success(`${type} exportado com sucesso!`);\n    } catch (error) {\n      toast.error(`Erro ao exportar ${type.toLowerCase()}`);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleHighResExport = async () => {\n    setIsExporting(true);\n    try {\n      await onExportHighRes({ scale: scale[0], format });\n      setDialogOpen(false);\n      toast.success('Exportação de alta resolução concluída!');\n    } catch (error) {\n      toast.error('Erro na exportação de alta resolução');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getResolutionText = () => {\n    const baseRes = 1000; // Base resolution estimate\n    const finalRes = baseRes * scale[0];\n    return `~${finalRes}x${Math.round(finalRes * 0.6)}px`;\n  };\n\n  const getFileSizeEstimate = () => {\n    const pixelCount = (1000 * scale[0]) * (600 * scale[0]);\n    const bytesPerPixel = format === 'png' ? 4 : 3;\n    const sizeInMB = (pixelCount * bytesPerPixel) / (1024 * 1024);\n    return sizeInMB > 1 ? `${sizeInMB.toFixed(1)} MB` : `${(sizeInMB * 1024).toFixed(0)} KB`;\n  };\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      {/* Quick Export Buttons */}\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => handleExport(onExportFull, 'Canvas completo')}\n        disabled={isExporting}\n        className=\"flex items-center gap-2\"\n      >\n        <Download className=\"w-4 h-4\" />\n        Exportar Tudo\n      </Button>\n\n      {hasSelection && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleExport(onExportSelection, 'Área selecionada')}\n          disabled={isExporting}\n          className=\"flex items-center gap-2\"\n        >\n          <ImageIcon className=\"w-4 h-4\" />\n          Exportar Seleção\n        </Button>\n      )}\n\n      {hasSelectedElements && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleExport(onExportElements, 'Elementos selecionados')}\n          disabled={isExporting}\n          className=\"flex items-center gap-2\"\n        >\n          <FileImage className=\"w-4 h-4\" />\n          Exportar Elementos\n        </Button>\n      )}\n\n      {/* High Resolution Export Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            className=\"flex items-center gap-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            Alta Resolução\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Settings className=\"w-5 h-5\" />\n              Exportação de Alta Resolução\n            </DialogTitle>\n            <DialogDescription>\n              Configure as opções para exportar uma imagem de alta qualidade do seu canvas.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Configurações de Exportação</CardTitle>\n              <CardDescription>\n                Ajuste a qualidade e formato da imagem exportada\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Scale Slider */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"scale\">\n                  Escala de Resolução: {scale[0]}x\n                </Label>\n                <Slider\n                  id=\"scale\"\n                  min={1}\n                  max={8}\n                  step={1}\n                  value={scale}\n                  onValueChange={setScale}\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-sm text-gray-500\">\n                  <span>1x (Normal)</span>\n                  <span>8x (Máximo)</span>\n                </div>\n              </div>\n\n              {/* Format Selection */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"format\">Formato da Imagem</Label>\n                <Select value={format} onValueChange={(value: 'png' | 'jpeg') => setFormat(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o formato\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"png\">PNG (Melhor qualidade)</SelectItem>\n                    <SelectItem value=\"jpeg\">JPEG (Menor tamanho)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Preview Information */}\n              <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Resolução estimada:</span>\n                  <span className=\"font-medium\">{getResolutionText()}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Tamanho do arquivo:</span>\n                  <span className=\"font-medium\">{getFileSizeEstimate()}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Qualidade:</span>\n                  <span className=\"font-medium\">\n                    {scale[0] <= 2 ? 'Baixa' : scale[0] <= 4 ? 'Média' : scale[0] <= 6 ? 'Alta' : 'Máxima'}\n                  </span>\n                </div>\n              </div>\n\n              {/* Export Button */}\n              <Button\n                onClick={handleHighResExport}\n                disabled={isExporting}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isExporting ? (\n                  <>\n                    <div className=\"w-4 h-4 mr-2 animate-spin border-2 border-white border-t-transparent rounded-full\" />\n                    Exportando...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Exportar {scale[0]}x ({format.toUpperCase()})\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n",
      "size_bytes": 8022
    },
    "client/src/components/ui/ExportarButton.tsx": {
      "content": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Download, Camera, Settings, Maximize2, FileImage } from 'lucide-react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\nexport interface ExportarButtonProps {\n  onExportCanvas: () => Promise<void>;\n  onExportSelection?: () => Promise<void>;\n  onExportHighRes: (options: { scale: number; format: 'png' | 'jpeg' }) => Promise<void>;\n  hasSelection?: boolean;\n  className?: string;\n}\n\nexport const ExportarButton: React.FC<ExportarButtonProps> = ({\n  onExportCanvas,\n  onExportSelection,\n  onExportHighRes,\n  hasSelection = false,\n  className\n}) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [scale, setScale] = useState([3]); // Default to 3x for high quality\n  const [format, setFormat] = useState<'png' | 'jpeg'>('png');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [exportMode, setExportMode] = useState<'quick' | 'selection' | 'highres'>('quick');\n\n  const handleQuickExport = async () => {\n    setIsExporting(true);\n    try {\n      await onExportCanvas();\n      toast.success('Canvas exportado com sucesso!');\n    } catch (error) {\n      toast.error('Erro ao exportar canvas');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleSelectionExport = async () => {\n    if (!onExportSelection) return;\n    \n    setIsExporting(true);\n    try {\n      await onExportSelection();\n      toast.success('Área selecionada exportada com sucesso!');\n    } catch (error) {\n      toast.error('Erro ao exportar seleção');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleHighResExport = async () => {\n    setIsExporting(true);\n    try {\n      await onExportHighRes({ scale: scale[0], format });\n      setDialogOpen(false);\n      toast.success('Exportação de alta resolução concluída!');\n    } catch (error) {\n      toast.error('Erro na exportação de alta resolução');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getResolutionText = () => {\n    const baseRes = 1200; // Improved base resolution estimate\n    const finalRes = baseRes * scale[0];\n    return `~${finalRes}x${Math.round(finalRes * 0.7)}px`;\n  };\n\n  const getFileSizeEstimate = () => {\n    const pixelCount = (1200 * scale[0]) * (840 * scale[0]);\n    const bytesPerPixel = format === 'png' ? 4 : 3;\n    const sizeInMB = (pixelCount * bytesPerPixel) / (1024 * 1024);\n    return sizeInMB > 1 ? `${sizeInMB.toFixed(1)} MB` : `${(sizeInMB * 1024).toFixed(0)} KB`;\n  };\n\n  const getQualityLabel = () => {\n    if (scale[0] <= 1) return 'Básica';\n    if (scale[0] <= 2) return 'Boa';\n    if (scale[0] <= 3) return 'Alta';\n    if (scale[0] <= 4) return 'Máxima';\n    return 'Ultra';\n  };\n\n  return (\n    <div className={cn(\"flex items-center\", className)}>\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            disabled={isExporting}\n            className=\"flex items-center gap-2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-lg font-semibold px-4 py-2 rounded-lg transition-all duration-200 hover:scale-105\"\n            title=\"Exportar canvas\"\n          >\n            <Download className=\"w-4 h-4\" />\n            {isExporting ? 'Exportando...' : 'Exportar'}\n          </Button>\n        </DialogTrigger>\n        \n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-xl\">\n              <Download className=\"w-6 h-6 text-green-500\" />\n              Exportar Canvas\n            </DialogTitle>\n            <DialogDescription>\n              Escolha como deseja exportar sua criação\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Export Mode Selection */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-base font-semibold\">Modo de Exportação</Label>\n              <div className=\"grid grid-cols-1 gap-2\">\n                <Button\n                  variant={exportMode === 'quick' ? 'default' : 'outline'}\n                  onClick={() => setExportMode('quick')}\n                  className=\"flex items-center gap-3 p-4 h-auto justify-start\"\n                >\n                  <Camera className=\"w-5 h-5\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Exportação Rápida</div>\n                    <div className=\"text-sm text-gray-500\">Screenshot do canvas atual</div>\n                  </div>\n                </Button>\n\n                {hasSelection && (\n                  <Button\n                    variant={exportMode === 'selection' ? 'default' : 'outline'}\n                    onClick={() => setExportMode('selection')}\n                    className=\"flex items-center gap-3 p-4 h-auto justify-start\"\n                  >\n                    <Maximize2 className=\"w-5 h-5\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-medium\">Exportar Seleção</div>\n                      <div className=\"text-sm text-gray-500\">Apenas a área selecionada</div>\n                    </div>\n                  </Button>\n                )}\n\n                <Button\n                  variant={exportMode === 'highres' ? 'default' : 'outline'}\n                  onClick={() => setExportMode('highres')}\n                  className=\"flex items-center gap-3 p-4 h-auto justify-start\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Alta Resolução</div>\n                    <div className=\"text-sm text-gray-500\">Configuração personalizada</div>\n                  </div>\n                </Button>\n              </div>\n            </div>\n\n            {/* High Resolution Settings */}\n            {exportMode === 'highres' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Configurações Avançadas</CardTitle>\n                  <CardDescription>\n                    Ajuste a qualidade e formato da exportação\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Scale Slider */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"scale\">\n                      Qualidade: {scale[0]}x ({getQualityLabel()})\n                    </Label>\n                    <Slider\n                      id=\"scale\"\n                      min={1}\n                      max={5}\n                      step={1}\n                      value={scale}\n                      onValueChange={setScale}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-gray-500\">\n                      <span>1x (Básica)</span>\n                      <span>5x (Ultra)</span>\n                    </div>\n                  </div>\n\n                  {/* Format Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"format\">Formato</Label>\n                    <Select value={format} onValueChange={(value: 'png' | 'jpeg') => setFormat(value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecione o formato\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"png\">PNG (Melhor qualidade)</SelectItem>\n                        <SelectItem value=\"jpeg\">JPEG (Menor tamanho)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Preview Info */}\n                  <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">Resolução:</span>\n                      <span className=\"font-medium\">{getResolutionText()}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">Tamanho estimado:</span>\n                      <span className=\"font-medium\">{getFileSizeEstimate()}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">Qualidade:</span>\n                      <span className=\"font-medium\">{getQualityLabel()}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Separator />\n\n            {/* Export Button */}\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setDialogOpen(false)}\n                disabled={isExporting}\n              >\n                Cancelar\n              </Button>\n              <Button\n                onClick={async () => {\n                  if (exportMode === 'quick') {\n                    await handleQuickExport();\n                  } else if (exportMode === 'selection') {\n                    await handleSelectionExport();\n                  } else {\n                    await handleHighResExport();\n                  }\n                }}\n                disabled={isExporting}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n              >\n                {isExporting ? (\n                  <>\n                    <div className=\"w-4 h-4 mr-2 animate-spin border-2 border-white border-t-transparent rounded-full\" />\n                    Exportando...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Exportar\n                    {exportMode === 'highres' && ` ${scale[0]}x`}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n",
      "size_bytes": 10860
    },
    "client/src/components/ui/SimpleExportControls.tsx": {
      "content": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Download, Camera, Maximize2, Settings } from 'lucide-react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\nexport interface SimpleExportControlsProps {\n  onExportCanvas: () => Promise<void>;\n  onExportSelection: () => Promise<void>;\n  onExportHighRes: (options: { scale: number; format: 'png' | 'jpeg' }) => Promise<void>;\n  hasSelection?: boolean;\n  className?: string;\n}\n\nexport const SimpleExportControls: React.FC<SimpleExportControlsProps> = ({\n  onExportCanvas,\n  onExportSelection,\n  onExportHighRes,\n  hasSelection = false,\n  className\n}) => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [scale, setScale] = useState('2');\n  const [format, setFormat] = useState<'png' | 'jpeg'>('png');\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const handleExport = async (exportFn: () => Promise<void>, description: string) => {\n    setIsExporting(true);\n    try {\n      await exportFn();\n      toast.success(`${description} exportado com sucesso!`);\n    } catch (error) {\n      toast.error(`Erro ao exportar ${description.toLowerCase()}`);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleHighResExport = async () => {\n    setIsExporting(true);\n    try {\n      await onExportHighRes({ \n        scale: parseInt(scale), \n        format \n      });\n      setDialogOpen(false);\n      toast.success('Export de alta resolução concluído!');\n    } catch (error) {\n      toast.error('Erro no export de alta resolução');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      {/* Quick Screenshot Button */}\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => handleExport(onExportCanvas, 'Screenshot do canvas')}\n        disabled={isExporting}\n        className=\"flex items-center gap-2\"\n        title=\"Capturar screenshot do canvas\"\n      >\n        <Camera className=\"w-4 h-4\" />\n        {isExporting ? 'Exportando...' : 'Screenshot'}\n      </Button>\n\n      {/* Export Selection Button */}\n      {hasSelection && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleExport(onExportSelection, 'Área selecionada')}\n          disabled={isExporting}\n          className=\"flex items-center gap-2\"\n          title=\"Exportar área selecionada\"\n        >\n          <Maximize2 className=\"w-4 h-4\" />\n          Área Selecionada\n        </Button>\n      )}\n\n      {/* High Resolution Export Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            className=\"flex items-center gap-2\"\n            title=\"Exportar em alta resolução\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            Alta Resolução\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[400px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Download className=\"w-5 h-5\" />\n              Export de Alta Resolução\n            </DialogTitle>\n            <DialogDescription>\n              Capture uma imagem de alta qualidade do canvas atual.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Scale Selection */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"scale\">Qualidade de Resolução</Label>\n              <Select value={scale} onValueChange={setScale}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione a qualidade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1x - Normal (rápido)</SelectItem>\n                  <SelectItem value=\"2\">2x - Boa qualidade</SelectItem>\n                  <SelectItem value=\"3\">3x - Alta qualidade</SelectItem>\n                  <SelectItem value=\"4\">4x - Máxima qualidade</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Format Selection */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"format\">Formato</Label>\n              <Select value={format} onValueChange={(value: 'png' | 'jpeg') => setFormat(value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione o formato\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"png\">PNG (melhor qualidade)</SelectItem>\n                  <SelectItem value=\"jpeg\">JPEG (arquivo menor)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Info */}\n            <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {scale}x resolução será {parseInt(scale) >= 3 ? 'alta qualidade' : 'boa qualidade'} para impressão.\n              </p>\n            </div>\n\n            {/* Export Button */}\n            <Button\n              onClick={handleHighResExport}\n              disabled={isExporting}\n              className=\"w-full\"\n            >\n              {isExporting ? (\n                <>\n                  <div className=\"w-4 h-4 mr-2 animate-spin border-2 border-white border-t-transparent rounded-full\" />\n                  Exportando...\n                </>\n              ) : (\n                <>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Exportar {scale}x {format.toUpperCase()}\n                </>\n              )}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n",
      "size_bytes": 6142
    },
    "client/src/components/ui/ZoomControls.tsx": {
      "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Minus, RotateCcw, Maximize2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport interface ZoomControlsProps {\n  zoom: number;\n  canZoomIn: boolean;\n  canZoomOut: boolean;\n  onZoomIn: () => void;\n  onZoomOut: () => void;\n  onZoomToFit: () => void;\n  onResetZoom: () => void;\n  className?: string;\n}\n\nexport const ZoomControls: React.FC<ZoomControlsProps> = ({\n  zoom,\n  canZoomIn,\n  canZoomOut,\n  onZoomIn,\n  onZoomOut,\n  onZoomToFit,\n  onResetZoom,\n  className\n}) => {\n  return (\n    <div className={cn(\n      \"flex items-center gap-1 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-lg p-1 shadow-lg border border-gray-200 dark:border-gray-700\",\n      className\n    )}>\n      {/* Zoom Out */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onZoomOut}\n        disabled={!canZoomOut}\n        className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700\"\n        title=\"Diminuir zoom\"\n      >\n        <Minus className=\"h-4 w-4\" />\n      </Button>\n      \n      {/* Zoom Level Display */}\n      <div className=\"px-2 py-1 text-xs font-medium text-gray-600 dark:text-gray-300 min-w-[4rem] text-center\">\n        {Math.round(zoom)}%\n      </div>\n      \n      {/* Zoom In */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onZoomIn}\n        disabled={!canZoomIn}\n        className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700\"\n        title=\"Aumentar zoom\"\n      >\n        <Plus className=\"h-4 w-4\" />\n      </Button>\n      \n      {/* Separator */}\n      <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n      \n      {/* Zoom to Fit */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onZoomToFit}\n        className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700\"\n        title=\"Ajustar à tela\"\n      >\n        <Maximize2 className=\"h-4 w-4\" />\n      </Button>\n      \n      {/* Reset Zoom */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onResetZoom}\n        className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700\"\n        title=\"Resetar zoom (100%)\"\n      >\n        <RotateCcw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n",
      "size_bytes": 2287
    },
    "client/src/components/ui/accordion.tsx": {
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "size_bytes": 1977
    },
    "client/src/components/ui/alert-dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/lib/ui-variants\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "size_bytes": 4415
    },
    "client/src/components/ui/alert.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "size_bytes": 1584
    },
    "client/src/components/ui/aspect-ratio.tsx": {
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "size_bytes": 140
    },
    "client/src/components/ui/avatar.tsx": {
      "content": "import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "size_bytes": 1405
    },
    "client/src/components/ui/badge.tsx": {
      "content": "import * as React from \"react\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { badgeVariants } from \"@/lib/ui-variants\"\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge }\n",
      "size_bytes": 471
    },
    "client/src/components/ui/breadcrumb.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "size_bytes": 2701
    },
    "client/src/components/ui/button.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/lib/ui-variants\"\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button }\n",
      "size_bytes": 752
    },
    "client/src/components/ui/calendar.tsx": {
      "content": "import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/lib/ui-variants\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n",
      "size_bytes": 2614
    },
    "client/src/components/ui/card.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "size_bytes": 1877
    },
    "client/src/components/ui/carousel.tsx": {
      "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "size_bytes": 6210
    },
    "client/src/components/ui/chart.tsx": {
      "content": "import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "size_bytes": 10466
    },
    "client/src/components/ui/checkbox.tsx": {
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "size_bytes": 1056
    },
    "client/src/components/ui/collapsible.tsx": {
      "content": "import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "size_bytes": 315
    },
    "client/src/components/ui/command.tsx": {
      "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {\n  children?: React.ReactNode;\n}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "size_bytes": 4910
    },
    "client/src/components/ui/context-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "size_bytes": 7246
    },
    "client/src/components/ui/dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "size_bytes": 3835
    },
    "client/src/components/ui/drawer.tsx": {
      "content": "import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "size_bytes": 3007
    },
    "client/src/components/ui/dropdown-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "size_bytes": 7295
    },
    "client/src/components/ui/favorite-button.tsx": {
      "content": "import * as React from \"react\"\nimport { Heart } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { useSidebar } from \"@/lib/sidebar-utils\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\ninterface FavoriteButtonProps {\n  id: string\n  className?: string\n  size?: \"sm\" | \"default\" | \"lg\"\n}\n\nconst FavoriteButton = React.forwardRef<\n  HTMLButtonElement,\n  FavoriteButtonProps\n>(({ id, className, size = \"sm\", ...props }, ref) => {\n  const { favorites, addToFavorites, removeFromFavorites, isFavorite } = useSidebar()\n  const favorite = isFavorite(id)\n\n  const handleToggle = () => {\n    if (favorite) {\n      removeFromFavorites(id)\n    } else {\n      addToFavorites(id)\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          ref={ref}\n          variant=\"ghost\"\n          size={size}\n          onClick={handleToggle}\n          className={cn(\n            \"h-6 w-6 p-0 hover:bg-accent/10 transition-all duration-200\",\n            favorite && \"text-red-500 hover:text-red-600\",\n            !favorite && \"text-muted-foreground hover:text-foreground\",\n            className\n          )}\n          {...props}\n        >\n          <Heart \n            className={cn(\n              \"h-3.5 w-3.5 transition-all duration-200\",\n              favorite && \"fill-current scale-110\",\n              !favorite && \"scale-100\"\n            )} \n          />\n          <span className=\"sr-only\">\n            {favorite ? \"Remove from favorites\" : \"Add to favorites\"}\n          </span>\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent side=\"top\">\n        <p>{favorite ? \"Remove from favorites\" : \"Add to favorites\"}</p>\n      </TooltipContent>\n    </Tooltip>\n  )\n})\nFavoriteButton.displayName = \"FavoriteButton\"\n\nexport { FavoriteButton }\n",
      "size_bytes": 1864
    },
    "client/src/components/ui/form.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\nimport { FormFieldContext, FormItemContext, useFormField } from \"@/lib/form-utils\"\n\nconst Form = FormProvider\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "size_bytes": 3117
    },
    "client/src/components/ui/hover-card.tsx": {
      "content": "import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "size_bytes": 1184
    },
    "client/src/components/ui/input-otp.tsx": {
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "size_bytes": 2154
    },
    "client/src/components/ui/input.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/label.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "size_bytes": 710
    },
    "client/src/components/ui/menubar.tsx": {
      "content": "import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "size_bytes": 7974
    },
    "client/src/components/ui/mobile-drawer.tsx": {
      "content": "import * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};",
      "size_bytes": 3016
    },
    "client/src/components/ui/navigation-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { navigationMenuTriggerStyle } from \"@/lib/ui-variants\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "size_bytes": 4639
    },
    "client/src/components/ui/pagination.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps } from \"@/components/ui/button\"\nimport { buttonVariants } from \"@/lib/ui-variants\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
      "size_bytes": 2786
    },
    "client/src/components/ui/popover.tsx": {
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "size_bytes": 1230
    },
    "client/src/components/ui/progress.tsx": {
      "content": "import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "size_bytes": 777
    },
    "client/src/components/ui/radio-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "size_bytes": 1467
    },
    "client/src/components/ui/resizable.tsx": {
      "content": "import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "size_bytes": 1709
    },
    "client/src/components/ui/scroll-area.tsx": {
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "size_bytes": 1642
    },
    "client/src/components/ui/select.tsx": {
      "content": "import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "size_bytes": 5615
    },
    "client/src/components/ui/separator.tsx": {
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "size_bytes": 756
    },
    "client/src/components/ui/sheet.tsx": {
      "content": "import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n",
      "size_bytes": 4250
    },
    "client/src/components/ui/sidebar.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nimport {\n  getCookie,\n  setCookie,\n  SidebarContext,\n  useSidebar,\n  SIDEBAR_COOKIE_NAME,\n  FAVORITES_COOKIE_NAME,\n  SIDEBAR_COOKIE_MAX_AGE,\n  SIDEBAR_WIDTH,\n  SIDEBAR_WIDTH_MOBILE,\n  SIDEBAR_WIDTH_ICON,\n  SIDEBAR_KEYBOARD_SHORTCUT,\n} from \"@/lib/sidebar-utils\"\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n    const [favorites, setFavorites] = React.useState<string[]>(() => {\n      const saved = getCookie(FAVORITES_COOKIE_NAME)\n      return saved ? JSON.parse(saved) : []\n    })\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(() => {\n      const saved = getCookie(SIDEBAR_COOKIE_NAME)\n      return saved ? JSON.parse(saved) : defaultOpen\n    })\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        setCookie(SIDEBAR_COOKIE_NAME, JSON.stringify(openState))\n      },\n      [setOpenProp, open]\n    )\n\n    // Favorites methods\n    const addToFavorites = React.useCallback((id: string) => {\n      setFavorites(prev => {\n        const newFavorites = [...prev, id]\n        setCookie(FAVORITES_COOKIE_NAME, JSON.stringify(newFavorites))\n        return newFavorites\n      })\n    }, [])\n\n    const removeFromFavorites = React.useCallback((id: string) => {\n      setFavorites(prev => {\n        const newFavorites = prev.filter(fav => fav !== id)\n        setCookie(FAVORITES_COOKIE_NAME, JSON.stringify(newFavorites))\n        return newFavorites\n      })\n    }, [])\n\n    const isFavorite = React.useCallback((id: string) => {\n      return favorites.includes(id)\n    }, [favorites])\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n        favorites,\n        addToFavorites,\n        removeFromFavorites,\n        isFavorite,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar, favorites, addToFavorites, removeFromFavorites, isFavorite]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                flex: isMobile ? 'auto' : `0 0 ${SIDEBAR_WIDTH}`,\n                \"--sidebar-width\": isMobile ? SIDEBAR_WIDTH_MOBILE : SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar transition-all duration-300 ease-in-out\",\n              \"bg-gradient-to-br from-background via-background/95 to-background/90\",\n              \"backdrop-blur-sm border-r border-border/50 shadow-lg\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-300 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-in-out\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            \"shadow-[inset_-1px_0_0_hsl(var(--border)/0.1)]\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar/95 backdrop-blur-md group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow-xl group-data-[variant=floating]:shadow-primary/5\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n}\n",
      "size_bytes": 24388
    },
    "client/src/components/ui/skeleton.tsx": {
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "size_bytes": 261
    },
    "client/src/components/ui/slider.tsx": {
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "size_bytes": 1077
    },
    "client/src/components/ui/sonner.tsx": {
      "content": "import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
      "size_bytes": 880
    },
    "client/src/components/ui/switch.tsx": {
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "size_bytes": 1139
    },
    "client/src/components/ui/table.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "size_bytes": 2765
    },
    "client/src/components/ui/tabs.tsx": {
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "size_bytes": 1883
    },
    "client/src/components/ui/textarea.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  placeholder?: string;\n}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "size_bytes": 797
    },
    "client/src/components/ui/toast.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "size_bytes": 4845
    },
    "client/src/components/ui/toaster.tsx": {
      "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "size_bytes": 772
    },
    "client/src/components/ui/toggle-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "size_bytes": 1739
    },
    "client/src/components/ui/toggle.tsx": {
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/lib/ui-variants\"\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle }\n",
      "size_bytes": 675
    },
    "client/src/components/ui/tooltip.tsx": {
      "content": "import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "size_bytes": 1145
    },
    "client/src/components/ui/use-toast.ts": {
      "content": "import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n",
      "size_bytes": 82
    }
  }
}
